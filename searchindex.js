Search.setIndex({"alltitles": {"API Reference": [[167, "api-reference"]], "Concepts": [[168, null]], "Installation": [[169, null]], "Introduction": [[167, "introduction"]], "Paramaters": [[22, "paramaters"]], "Possible entries": [[10, "possible-entries"]], "Preprocessor Nodes": [[168, "preprocessor-nodes"]], "Quickstart": [[170, null]], "The Pipeline or Algorithm Tree": [[168, "the-pipeline-or-algorithm-tree"]], "Tutorials": [[171, null]], "Users\u2019s Guide": [[167, "users-s-guide"]], "Welcome to Cuvis AI\u2019s documentation!": [[167, null]], "cuvis_ai": [[0, null]], "cuvis_ai.data": [[1, null]], "cuvis_ai.data.BaseDataSet": [[2, null]], "cuvis_ai.data.BaseDataSet.BaseDataSet": [[3, null]], "cuvis_ai.data.CuvisDataSet": [[4, null]], "cuvis_ai.data.Labels2TV": [[5, null]], "cuvis_ai.data.Labels2TV.RLE2mask": [[6, null]], "cuvis_ai.data.Labels2TV.convert_COCO2TV": [[7, null]], "cuvis_ai.data.LiveCuvisDataLoader": [[8, null]], "cuvis_ai.data.MetadataUtils": [[9, null]], "cuvis_ai.data.MetadataUtils.C_ATTRIB_LIST": [[10, null]], "cuvis_ai.data.MetadataUtils.metadataInit": [[11, null]], "cuvis_ai.data.NumpyDataSet": [[12, null]], "cuvis_ai.data.OutputFormat": [[13, null]], "cuvis_ai.data.PublicDataSets": [[14, null]], "cuvis_ai.data.utils_dataloader": [[15, null]], "cuvis_ai.data.utils_dataloader.cuvis_collate": [[16, null]], "cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset": [[17, null]], "cuvis_ai.deciders": [[18, null]], "cuvis_ai.deciders.base_decider": [[19, null]], "cuvis_ai.deciders.base_decider.BaseDecider": [[20, null]], "cuvis_ai.deciders.binary_decider": [[21, null]], "cuvis_ai.deciders.binary_decider.BinaryDecider": [[22, null]], "cuvis_ai.deciders.cascaded_decider": [[23, null]], "cuvis_ai.deciders.cascaded_decider.Cascaded": [[24, null]], "cuvis_ai.deciders.combining_decider": [[25, null]], "cuvis_ai.deciders.combining_decider.CombiningDecider": [[26, null]], "cuvis_ai.deciders.combining_decider.all_agree": [[27, null]], "cuvis_ai.deciders.combining_decider.at_least_n_agree": [[28, null]], "cuvis_ai.deciders.multiclass_decider": [[29, null]], "cuvis_ai.deciders.multiclass_decider.MultiClassDecider": [[30, null]], "cuvis_ai.distance": [[31, null]], "cuvis_ai.distance.distance": [[32, null]], "cuvis_ai.distance.distance.AbstractDistance": [[33, null]], "cuvis_ai.distance.distance.Canberra": [[34, null]], "cuvis_ai.distance.distance.ECS": [[35, null]], "cuvis_ai.distance.distance.Euclidean": [[36, null]], "cuvis_ai.distance.distance.GFC": [[37, null]], "cuvis_ai.distance.distance.Manhattan": [[38, null]], "cuvis_ai.distance.distance.Minkowski": [[39, null]], "cuvis_ai.distance.distance.SpectralAngle": [[40, null]], "cuvis_ai.node": [[41, null]], "cuvis_ai.node.Consumers": [[42, null]], "cuvis_ai.node.Consumers.CubeConsumer": [[43, null]], "cuvis_ai.node.Consumers.LabelConsumer": [[44, null]], "cuvis_ai.node.Consumers.LabelConsumerInference": [[45, null]], "cuvis_ai.node.Consumers.MetadataConsumer": [[46, null]], "cuvis_ai.node.Consumers.MetadataConsumerInference": [[47, null]], "cuvis_ai.node.base": [[48, null]], "cuvis_ai.node.base.BaseSupervised": [[49, null]], "cuvis_ai.node.base.BaseTransformation": [[50, null]], "cuvis_ai.node.base.BaseUnsupervised": [[51, null]], "cuvis_ai.node.base.Preprocessor": [[52, null]], "cuvis_ai.node.node": [[53, null]], "cuvis_ai.node.node.Node": [[54, null]], "cuvis_ai.node.sklearn": [[55, null]], "cuvis_ai.node.torch": [[56, null]], "cuvis_ai.node.wrap": [[57, null]], "cuvis_ai.node.wrap.make_node": [[58, null]], "cuvis_ai.pipeline": [[59, null]], "cuvis_ai.pipeline.graph": [[60, null]], "cuvis_ai.pipeline.graph.Graph": [[61, null]], "cuvis_ai.preprocessor": [[62, null]], "cuvis_ai.preprocessor.nmf": [[63, null]], "cuvis_ai.preprocessor.nmf.NMF": [[64, null]], "cuvis_ai.preprocessor.pca": [[65, null]], "cuvis_ai.preprocessor.pca.PCA": [[66, null]], "cuvis_ai.supervised": [[67, null]], "cuvis_ai.supervised.lda": [[68, null]], "cuvis_ai.supervised.lda.LDA": [[69, null]], "cuvis_ai.supervised.qda": [[70, null]], "cuvis_ai.supervised.qda.QDA": [[71, null]], "cuvis_ai.supervised.skorch_supervised": [[72, null]], "cuvis_ai.supervised.skorch_supervised.SkorchSupervised": [[73, null]], "cuvis_ai.supervised.svm": [[74, null]], "cuvis_ai.supervised.svm.SVM": [[75, null]], "cuvis_ai.test": [[76, null]], "cuvis_ai.test.test_numpy_utils": [[77, null]], "cuvis_ai.test.test_numpy_utils.TestNumpyUtils": [[78, null]], "cuvis_ai.test.test_pipeline_graph": [[79, null]], "cuvis_ai.test.test_preprocessor_structural": [[80, null]], "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode": [[81, null]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF": [[82, null]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA": [[83, null]], "cuvis_ai.test.test_serialization": [[84, null]], "cuvis_ai.test.test_serialization.TestNodeSerialization": [[85, null]], "cuvis_ai.test.test_serialization.TestPreprocessorNMF": [[86, null]], "cuvis_ai.test.test_serialization.TestPreprocessorPCA": [[87, null]], "cuvis_ai.test.test_serialization.TestSupervisedLDA": [[88, null]], "cuvis_ai.test.test_serialization.TestSupervisedQDA": [[89, null]], "cuvis_ai.test.test_serialization.TestSupervisedSVM": [[90, null]], "cuvis_ai.test.test_serialization.TestTransformationReflectance": [[91, null]], "cuvis_ai.test.test_serialization.TestTransformationTorch": [[92, null]], "cuvis_ai.test.test_serialization.TestTransformationTorchVision": [[93, null]], "cuvis_ai.test.test_serialization.TestUnsupervisedGMM": [[94, null]], "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans": [[95, null]], "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift": [[96, null]], "cuvis_ai.test.test_unsupervised_structural": [[97, null]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM": [[98, null]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans": [[99, null]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode": [[100, null]], "cuvis_ai.transformation": [[101, null]], "cuvis_ai.transformation.reflectance": [[102, null]], "cuvis_ai.transformation.reflectance.Reflectance": [[103, null]], "cuvis_ai.transformation.torch_transformation": [[104, null]], "cuvis_ai.transformation.torch_transformation.TorchTransformation": [[105, null]], "cuvis_ai.transformation.torchvision_transformation": [[106, null]], "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation": [[107, null]], "cuvis_ai.tv_transforms": [[108, null]], "cuvis_ai.tv_transforms.Bandpass": [[109, null]], "cuvis_ai.tv_transforms.Bandpass.call_super_init": [[110, null]], "cuvis_ai.tv_transforms.Bandpass.dump_patches": [[111, null]], "cuvis_ai.tv_transforms.Bandpass.training": [[112, null]], "cuvis_ai.tv_transforms.MultiBandpass": [[113, null]], "cuvis_ai.tv_transforms.MultiBandpass.call_super_init": [[114, null]], "cuvis_ai.tv_transforms.MultiBandpass.dump_patches": [[115, null]], "cuvis_ai.tv_transforms.MultiBandpass.training": [[116, null]], "cuvis_ai.tv_transforms.NormalizeStdDev": [[117, null]], "cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init": [[118, null]], "cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches": [[119, null]], "cuvis_ai.tv_transforms.NormalizeStdDev.training": [[120, null]], "cuvis_ai.tv_transforms.NormalizeToFloat": [[121, null]], "cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init": [[122, null]], "cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches": [[123, null]], "cuvis_ai.tv_transforms.NormalizeToFloat.training": [[124, null]], "cuvis_ai.tv_transforms.WavelengthList": [[125, null]], "cuvis_ai.unsupervised": [[126, null]], "cuvis_ai.unsupervised.gmm": [[127, null]], "cuvis_ai.unsupervised.gmm.GMM": [[128, null]], "cuvis_ai.unsupervised.kmeans": [[129, null]], "cuvis_ai.unsupervised.kmeans.KMeans": [[130, null]], "cuvis_ai.unsupervised.mean_shift": [[131, null]], "cuvis_ai.unsupervised.mean_shift.MeanShift": [[132, null]], "cuvis_ai.utils": [[133, null]], "cuvis_ai.utils.filesystem": [[134, null]], "cuvis_ai.utils.filesystem.change_working_dir": [[135, null]], "cuvis_ai.utils.nn_config": [[136, null]], "cuvis_ai.utils.nn_config.Adam": [[137, null]], "cuvis_ai.utils.nn_config.Optimizer": [[138, null]], "cuvis_ai.utils.nn_config.SGD": [[139, null]], "cuvis_ai.utils.numpy_utils": [[140, null]], "cuvis_ai.utils.numpy_utils.binary_mask_to_rle": [[141, null]], "cuvis_ai.utils.numpy_utils.check_array_shape": [[142, null]], "cuvis_ai.utils.numpy_utils.flatten_batch_and_labels": [[143, null]], "cuvis_ai.utils.numpy_utils.flatten_batch_and_spatial": [[144, null]], "cuvis_ai.utils.numpy_utils.flatten_labels": [[145, null]], "cuvis_ai.utils.numpy_utils.flatten_spatial": [[146, null]], "cuvis_ai.utils.numpy_utils.gen_coco_labels": [[147, null]], "cuvis_ai.utils.numpy_utils.get_shape_without_batch": [[148, null]], "cuvis_ai.utils.numpy_utils.unflatten_batch_and_labels": [[149, null]], "cuvis_ai.utils.numpy_utils.unflatten_batch_and_spatial": [[150, null]], "cuvis_ai.utils.numpy_utils.unflatten_labels": [[151, null]], "cuvis_ai.utils.numpy_utils.unflatten_spatial": [[152, null]], "cuvis_ai.utils.serializer": [[153, null]], "cuvis_ai.utils.serializer.CuvisYamlDumper": [[154, null]], "cuvis_ai.utils.serializer.CuvisYamlLoader": [[155, null]], "cuvis_ai.utils.serializer.Serializer": [[156, null]], "cuvis_ai.utils.serializer.YamlSerializer": [[157, null]], "cuvis_ai.utils.serializer.numpy_array_representer": [[158, null]], "cuvis_ai.utils.serializer.numpy_arrray_constructor": [[159, null]], "cuvis_ai.utils.serializer.numpy_float32_constructor": [[160, null]], "cuvis_ai.utils.serializer.numpy_float32_representer": [[161, null]], "cuvis_ai.utils.test": [[162, null]], "cuvis_ai.utils.test.get_np_dummy_data": [[163, null]], "cuvis_ai.utils.visualize": [[164, null]], "cuvis_ai.utils.visualize.visualize_features": [[165, null]], "cuvis_ai.utils.visualize.visualize_image": [[166, null]], "pip installation": [[169, "pip-installation"]]}, "docnames": ["_autosummary/cuvis_ai", "_autosummary/cuvis_ai.data", "_autosummary/cuvis_ai.data.BaseDataSet", "_autosummary/cuvis_ai.data.BaseDataSet.BaseDataSet", "_autosummary/cuvis_ai.data.CuvisDataSet", "_autosummary/cuvis_ai.data.Labels2TV", "_autosummary/cuvis_ai.data.Labels2TV.RLE2mask", "_autosummary/cuvis_ai.data.Labels2TV.convert_COCO2TV", "_autosummary/cuvis_ai.data.LiveCuvisDataLoader", "_autosummary/cuvis_ai.data.MetadataUtils", "_autosummary/cuvis_ai.data.MetadataUtils.C_ATTRIB_LIST", "_autosummary/cuvis_ai.data.MetadataUtils.metadataInit", "_autosummary/cuvis_ai.data.NumpyDataSet", "_autosummary/cuvis_ai.data.OutputFormat", "_autosummary/cuvis_ai.data.PublicDataSets", "_autosummary/cuvis_ai.data.utils_dataloader", "_autosummary/cuvis_ai.data.utils_dataloader.cuvis_collate", "_autosummary/cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset", "_autosummary/cuvis_ai.deciders", "_autosummary/cuvis_ai.deciders.base_decider", "_autosummary/cuvis_ai.deciders.base_decider.BaseDecider", "_autosummary/cuvis_ai.deciders.binary_decider", "_autosummary/cuvis_ai.deciders.binary_decider.BinaryDecider", "_autosummary/cuvis_ai.deciders.cascaded_decider", "_autosummary/cuvis_ai.deciders.cascaded_decider.Cascaded", "_autosummary/cuvis_ai.deciders.combining_decider", "_autosummary/cuvis_ai.deciders.combining_decider.CombiningDecider", "_autosummary/cuvis_ai.deciders.combining_decider.all_agree", "_autosummary/cuvis_ai.deciders.combining_decider.at_least_n_agree", "_autosummary/cuvis_ai.deciders.multiclass_decider", "_autosummary/cuvis_ai.deciders.multiclass_decider.MultiClassDecider", "_autosummary/cuvis_ai.distance", "_autosummary/cuvis_ai.distance.distance", "_autosummary/cuvis_ai.distance.distance.AbstractDistance", "_autosummary/cuvis_ai.distance.distance.Canberra", "_autosummary/cuvis_ai.distance.distance.ECS", "_autosummary/cuvis_ai.distance.distance.Euclidean", "_autosummary/cuvis_ai.distance.distance.GFC", "_autosummary/cuvis_ai.distance.distance.Manhattan", "_autosummary/cuvis_ai.distance.distance.Minkowski", "_autosummary/cuvis_ai.distance.distance.SpectralAngle", "_autosummary/cuvis_ai.node", "_autosummary/cuvis_ai.node.Consumers", "_autosummary/cuvis_ai.node.Consumers.CubeConsumer", "_autosummary/cuvis_ai.node.Consumers.LabelConsumer", "_autosummary/cuvis_ai.node.Consumers.LabelConsumerInference", "_autosummary/cuvis_ai.node.Consumers.MetadataConsumer", "_autosummary/cuvis_ai.node.Consumers.MetadataConsumerInference", "_autosummary/cuvis_ai.node.base", "_autosummary/cuvis_ai.node.base.BaseSupervised", "_autosummary/cuvis_ai.node.base.BaseTransformation", "_autosummary/cuvis_ai.node.base.BaseUnsupervised", "_autosummary/cuvis_ai.node.base.Preprocessor", "_autosummary/cuvis_ai.node.node", "_autosummary/cuvis_ai.node.node.Node", "_autosummary/cuvis_ai.node.sklearn", "_autosummary/cuvis_ai.node.torch", "_autosummary/cuvis_ai.node.wrap", "_autosummary/cuvis_ai.node.wrap.make_node", "_autosummary/cuvis_ai.pipeline", "_autosummary/cuvis_ai.pipeline.graph", "_autosummary/cuvis_ai.pipeline.graph.Graph", "_autosummary/cuvis_ai.preprocessor", "_autosummary/cuvis_ai.preprocessor.nmf", "_autosummary/cuvis_ai.preprocessor.nmf.NMF", "_autosummary/cuvis_ai.preprocessor.pca", "_autosummary/cuvis_ai.preprocessor.pca.PCA", "_autosummary/cuvis_ai.supervised", "_autosummary/cuvis_ai.supervised.lda", "_autosummary/cuvis_ai.supervised.lda.LDA", "_autosummary/cuvis_ai.supervised.qda", "_autosummary/cuvis_ai.supervised.qda.QDA", "_autosummary/cuvis_ai.supervised.skorch_supervised", "_autosummary/cuvis_ai.supervised.skorch_supervised.SkorchSupervised", "_autosummary/cuvis_ai.supervised.svm", "_autosummary/cuvis_ai.supervised.svm.SVM", "_autosummary/cuvis_ai.test", "_autosummary/cuvis_ai.test.test_numpy_utils", "_autosummary/cuvis_ai.test.test_numpy_utils.TestNumpyUtils", "_autosummary/cuvis_ai.test.test_pipeline_graph", "_autosummary/cuvis_ai.test.test_preprocessor_structural", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA", "_autosummary/cuvis_ai.test.test_serialization", "_autosummary/cuvis_ai.test.test_serialization.TestNodeSerialization", "_autosummary/cuvis_ai.test.test_serialization.TestPreprocessorNMF", "_autosummary/cuvis_ai.test.test_serialization.TestPreprocessorPCA", "_autosummary/cuvis_ai.test.test_serialization.TestSupervisedLDA", "_autosummary/cuvis_ai.test.test_serialization.TestSupervisedQDA", "_autosummary/cuvis_ai.test.test_serialization.TestSupervisedSVM", "_autosummary/cuvis_ai.test.test_serialization.TestTransformationReflectance", "_autosummary/cuvis_ai.test.test_serialization.TestTransformationTorch", "_autosummary/cuvis_ai.test.test_serialization.TestTransformationTorchVision", "_autosummary/cuvis_ai.test.test_serialization.TestUnsupervisedGMM", "_autosummary/cuvis_ai.test.test_serialization.TestUnsupervisedKMeans", "_autosummary/cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift", "_autosummary/cuvis_ai.test.test_unsupervised_structural", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode", "_autosummary/cuvis_ai.transformation", "_autosummary/cuvis_ai.transformation.reflectance", "_autosummary/cuvis_ai.transformation.reflectance.Reflectance", "_autosummary/cuvis_ai.transformation.torch_transformation", "_autosummary/cuvis_ai.transformation.torch_transformation.TorchTransformation", "_autosummary/cuvis_ai.transformation.torchvision_transformation", "_autosummary/cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation", "_autosummary/cuvis_ai.tv_transforms", "_autosummary/cuvis_ai.tv_transforms.Bandpass", "_autosummary/cuvis_ai.tv_transforms.Bandpass.call_super_init", "_autosummary/cuvis_ai.tv_transforms.Bandpass.dump_patches", "_autosummary/cuvis_ai.tv_transforms.Bandpass.training", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.call_super_init", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.dump_patches", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.training", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.training", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.training", "_autosummary/cuvis_ai.tv_transforms.WavelengthList", "_autosummary/cuvis_ai.unsupervised", "_autosummary/cuvis_ai.unsupervised.gmm", "_autosummary/cuvis_ai.unsupervised.gmm.GMM", "_autosummary/cuvis_ai.unsupervised.kmeans", "_autosummary/cuvis_ai.unsupervised.kmeans.KMeans", "_autosummary/cuvis_ai.unsupervised.mean_shift", "_autosummary/cuvis_ai.unsupervised.mean_shift.MeanShift", "_autosummary/cuvis_ai.utils", "_autosummary/cuvis_ai.utils.filesystem", "_autosummary/cuvis_ai.utils.filesystem.change_working_dir", "_autosummary/cuvis_ai.utils.nn_config", "_autosummary/cuvis_ai.utils.nn_config.Adam", "_autosummary/cuvis_ai.utils.nn_config.Optimizer", "_autosummary/cuvis_ai.utils.nn_config.SGD", "_autosummary/cuvis_ai.utils.numpy_utils", "_autosummary/cuvis_ai.utils.numpy_utils.binary_mask_to_rle", "_autosummary/cuvis_ai.utils.numpy_utils.check_array_shape", "_autosummary/cuvis_ai.utils.numpy_utils.flatten_batch_and_labels", "_autosummary/cuvis_ai.utils.numpy_utils.flatten_batch_and_spatial", "_autosummary/cuvis_ai.utils.numpy_utils.flatten_labels", "_autosummary/cuvis_ai.utils.numpy_utils.flatten_spatial", "_autosummary/cuvis_ai.utils.numpy_utils.gen_coco_labels", "_autosummary/cuvis_ai.utils.numpy_utils.get_shape_without_batch", "_autosummary/cuvis_ai.utils.numpy_utils.unflatten_batch_and_labels", "_autosummary/cuvis_ai.utils.numpy_utils.unflatten_batch_and_spatial", "_autosummary/cuvis_ai.utils.numpy_utils.unflatten_labels", "_autosummary/cuvis_ai.utils.numpy_utils.unflatten_spatial", "_autosummary/cuvis_ai.utils.serializer", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlDumper", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlLoader", "_autosummary/cuvis_ai.utils.serializer.Serializer", "_autosummary/cuvis_ai.utils.serializer.YamlSerializer", "_autosummary/cuvis_ai.utils.serializer.numpy_array_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_representer", "_autosummary/cuvis_ai.utils.test", "_autosummary/cuvis_ai.utils.test.get_np_dummy_data", "_autosummary/cuvis_ai.utils.visualize", "_autosummary/cuvis_ai.utils.visualize.visualize_features", "_autosummary/cuvis_ai.utils.visualize.visualize_image", "index", "user/concepts", "user/installation", "user/quickstart", "user/tutorials"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["_autosummary/cuvis_ai.rst", "_autosummary/cuvis_ai.data.rst", "_autosummary/cuvis_ai.data.BaseDataSet.rst", "_autosummary/cuvis_ai.data.BaseDataSet.BaseDataSet.rst", "_autosummary/cuvis_ai.data.CuvisDataSet.rst", "_autosummary/cuvis_ai.data.Labels2TV.rst", "_autosummary/cuvis_ai.data.Labels2TV.RLE2mask.rst", "_autosummary/cuvis_ai.data.Labels2TV.convert_COCO2TV.rst", "_autosummary/cuvis_ai.data.LiveCuvisDataLoader.rst", "_autosummary/cuvis_ai.data.MetadataUtils.rst", "_autosummary/cuvis_ai.data.MetadataUtils.C_ATTRIB_LIST.rst", "_autosummary/cuvis_ai.data.MetadataUtils.metadataInit.rst", "_autosummary/cuvis_ai.data.NumpyDataSet.rst", "_autosummary/cuvis_ai.data.OutputFormat.rst", "_autosummary/cuvis_ai.data.PublicDataSets.rst", "_autosummary/cuvis_ai.data.utils_dataloader.rst", "_autosummary/cuvis_ai.data.utils_dataloader.cuvis_collate.rst", "_autosummary/cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset.rst", "_autosummary/cuvis_ai.deciders.rst", "_autosummary/cuvis_ai.deciders.base_decider.rst", "_autosummary/cuvis_ai.deciders.base_decider.BaseDecider.rst", "_autosummary/cuvis_ai.deciders.binary_decider.rst", "_autosummary/cuvis_ai.deciders.binary_decider.BinaryDecider.rst", "_autosummary/cuvis_ai.deciders.cascaded_decider.rst", "_autosummary/cuvis_ai.deciders.cascaded_decider.Cascaded.rst", "_autosummary/cuvis_ai.deciders.combining_decider.rst", "_autosummary/cuvis_ai.deciders.combining_decider.CombiningDecider.rst", "_autosummary/cuvis_ai.deciders.combining_decider.all_agree.rst", "_autosummary/cuvis_ai.deciders.combining_decider.at_least_n_agree.rst", "_autosummary/cuvis_ai.deciders.multiclass_decider.rst", "_autosummary/cuvis_ai.deciders.multiclass_decider.MultiClassDecider.rst", "_autosummary/cuvis_ai.distance.rst", "_autosummary/cuvis_ai.distance.distance.rst", "_autosummary/cuvis_ai.distance.distance.AbstractDistance.rst", "_autosummary/cuvis_ai.distance.distance.Canberra.rst", "_autosummary/cuvis_ai.distance.distance.ECS.rst", "_autosummary/cuvis_ai.distance.distance.Euclidean.rst", "_autosummary/cuvis_ai.distance.distance.GFC.rst", "_autosummary/cuvis_ai.distance.distance.Manhattan.rst", "_autosummary/cuvis_ai.distance.distance.Minkowski.rst", "_autosummary/cuvis_ai.distance.distance.SpectralAngle.rst", "_autosummary/cuvis_ai.node.rst", "_autosummary/cuvis_ai.node.Consumers.rst", "_autosummary/cuvis_ai.node.Consumers.CubeConsumer.rst", "_autosummary/cuvis_ai.node.Consumers.LabelConsumer.rst", "_autosummary/cuvis_ai.node.Consumers.LabelConsumerInference.rst", "_autosummary/cuvis_ai.node.Consumers.MetadataConsumer.rst", "_autosummary/cuvis_ai.node.Consumers.MetadataConsumerInference.rst", "_autosummary/cuvis_ai.node.base.rst", "_autosummary/cuvis_ai.node.base.BaseSupervised.rst", "_autosummary/cuvis_ai.node.base.BaseTransformation.rst", "_autosummary/cuvis_ai.node.base.BaseUnsupervised.rst", "_autosummary/cuvis_ai.node.base.Preprocessor.rst", "_autosummary/cuvis_ai.node.node.rst", "_autosummary/cuvis_ai.node.node.Node.rst", "_autosummary/cuvis_ai.node.sklearn.rst", "_autosummary/cuvis_ai.node.torch.rst", "_autosummary/cuvis_ai.node.wrap.rst", "_autosummary/cuvis_ai.node.wrap.make_node.rst", "_autosummary/cuvis_ai.pipeline.rst", "_autosummary/cuvis_ai.pipeline.graph.rst", "_autosummary/cuvis_ai.pipeline.graph.Graph.rst", "_autosummary/cuvis_ai.preprocessor.rst", "_autosummary/cuvis_ai.preprocessor.nmf.rst", "_autosummary/cuvis_ai.preprocessor.nmf.NMF.rst", "_autosummary/cuvis_ai.preprocessor.pca.rst", "_autosummary/cuvis_ai.preprocessor.pca.PCA.rst", "_autosummary/cuvis_ai.supervised.rst", "_autosummary/cuvis_ai.supervised.lda.rst", "_autosummary/cuvis_ai.supervised.lda.LDA.rst", "_autosummary/cuvis_ai.supervised.qda.rst", "_autosummary/cuvis_ai.supervised.qda.QDA.rst", "_autosummary/cuvis_ai.supervised.skorch_supervised.rst", "_autosummary/cuvis_ai.supervised.skorch_supervised.SkorchSupervised.rst", "_autosummary/cuvis_ai.supervised.svm.rst", "_autosummary/cuvis_ai.supervised.svm.SVM.rst", "_autosummary/cuvis_ai.test.rst", "_autosummary/cuvis_ai.test.test_numpy_utils.rst", "_autosummary/cuvis_ai.test.test_numpy_utils.TestNumpyUtils.rst", "_autosummary/cuvis_ai.test.test_pipeline_graph.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.rst", "_autosummary/cuvis_ai.test.test_serialization.rst", "_autosummary/cuvis_ai.test.test_serialization.TestNodeSerialization.rst", "_autosummary/cuvis_ai.test.test_serialization.TestPreprocessorNMF.rst", "_autosummary/cuvis_ai.test.test_serialization.TestPreprocessorPCA.rst", "_autosummary/cuvis_ai.test.test_serialization.TestSupervisedLDA.rst", "_autosummary/cuvis_ai.test.test_serialization.TestSupervisedQDA.rst", "_autosummary/cuvis_ai.test.test_serialization.TestSupervisedSVM.rst", "_autosummary/cuvis_ai.test.test_serialization.TestTransformationReflectance.rst", "_autosummary/cuvis_ai.test.test_serialization.TestTransformationTorch.rst", "_autosummary/cuvis_ai.test.test_serialization.TestTransformationTorchVision.rst", "_autosummary/cuvis_ai.test.test_serialization.TestUnsupervisedGMM.rst", "_autosummary/cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.rst", "_autosummary/cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.rst", "_autosummary/cuvis_ai.transformation.rst", "_autosummary/cuvis_ai.transformation.reflectance.rst", "_autosummary/cuvis_ai.transformation.reflectance.Reflectance.rst", "_autosummary/cuvis_ai.transformation.torch_transformation.rst", "_autosummary/cuvis_ai.transformation.torch_transformation.TorchTransformation.rst", "_autosummary/cuvis_ai.transformation.torchvision_transformation.rst", "_autosummary/cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.rst", "_autosummary/cuvis_ai.tv_transforms.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.training.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.training.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.training.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.training.rst", "_autosummary/cuvis_ai.tv_transforms.WavelengthList.rst", "_autosummary/cuvis_ai.unsupervised.rst", "_autosummary/cuvis_ai.unsupervised.gmm.rst", "_autosummary/cuvis_ai.unsupervised.gmm.GMM.rst", "_autosummary/cuvis_ai.unsupervised.kmeans.rst", "_autosummary/cuvis_ai.unsupervised.kmeans.KMeans.rst", "_autosummary/cuvis_ai.unsupervised.mean_shift.rst", "_autosummary/cuvis_ai.unsupervised.mean_shift.MeanShift.rst", "_autosummary/cuvis_ai.utils.rst", "_autosummary/cuvis_ai.utils.filesystem.rst", "_autosummary/cuvis_ai.utils.filesystem.change_working_dir.rst", "_autosummary/cuvis_ai.utils.nn_config.rst", "_autosummary/cuvis_ai.utils.nn_config.Adam.rst", "_autosummary/cuvis_ai.utils.nn_config.Optimizer.rst", "_autosummary/cuvis_ai.utils.nn_config.SGD.rst", "_autosummary/cuvis_ai.utils.numpy_utils.rst", "_autosummary/cuvis_ai.utils.numpy_utils.binary_mask_to_rle.rst", "_autosummary/cuvis_ai.utils.numpy_utils.check_array_shape.rst", "_autosummary/cuvis_ai.utils.numpy_utils.flatten_batch_and_labels.rst", "_autosummary/cuvis_ai.utils.numpy_utils.flatten_batch_and_spatial.rst", "_autosummary/cuvis_ai.utils.numpy_utils.flatten_labels.rst", "_autosummary/cuvis_ai.utils.numpy_utils.flatten_spatial.rst", "_autosummary/cuvis_ai.utils.numpy_utils.gen_coco_labels.rst", "_autosummary/cuvis_ai.utils.numpy_utils.get_shape_without_batch.rst", "_autosummary/cuvis_ai.utils.numpy_utils.unflatten_batch_and_labels.rst", "_autosummary/cuvis_ai.utils.numpy_utils.unflatten_batch_and_spatial.rst", "_autosummary/cuvis_ai.utils.numpy_utils.unflatten_labels.rst", "_autosummary/cuvis_ai.utils.numpy_utils.unflatten_spatial.rst", "_autosummary/cuvis_ai.utils.serializer.rst", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlDumper.rst", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlLoader.rst", "_autosummary/cuvis_ai.utils.serializer.Serializer.rst", "_autosummary/cuvis_ai.utils.serializer.YamlSerializer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_array_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_representer.rst", "_autosummary/cuvis_ai.utils.test.rst", "_autosummary/cuvis_ai.utils.test.get_np_dummy_data.rst", "_autosummary/cuvis_ai.utils.visualize.rst", "_autosummary/cuvis_ai.utils.visualize.visualize_features.rst", "_autosummary/cuvis_ai.utils.visualize.visualize_image.rst", "index.rst", "user/concepts.rst", "user/installation.rst", "user/quickstart.rst", "user/tutorials.rst"], "indexentries": {"__init__() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.__init__", false]], "__init__() (cuvis_ai.deciders.base_decider.basedecider method)": [[20, "cuvis_ai.deciders.base_decider.BaseDecider.__init__", false]], "__init__() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[22, "cuvis_ai.deciders.binary_decider.BinaryDecider.__init__", false]], "__init__() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[24, "cuvis_ai.deciders.cascaded_decider.Cascaded.__init__", false]], "__init__() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[26, "cuvis_ai.deciders.combining_decider.CombiningDecider.__init__", false]], "__init__() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[30, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.__init__", false]], "__init__() (cuvis_ai.distance.distance.abstractdistance method)": [[33, "cuvis_ai.distance.distance.AbstractDistance.__init__", false]], "__init__() (cuvis_ai.distance.distance.canberra method)": [[34, "cuvis_ai.distance.distance.Canberra.__init__", false]], "__init__() (cuvis_ai.distance.distance.ecs method)": [[35, "cuvis_ai.distance.distance.ECS.__init__", false]], "__init__() (cuvis_ai.distance.distance.euclidean method)": [[36, "cuvis_ai.distance.distance.Euclidean.__init__", false]], "__init__() (cuvis_ai.distance.distance.gfc method)": [[37, "cuvis_ai.distance.distance.GFC.__init__", false]], "__init__() (cuvis_ai.distance.distance.manhattan method)": [[38, "cuvis_ai.distance.distance.Manhattan.__init__", false]], "__init__() (cuvis_ai.distance.distance.minkowski method)": [[39, "cuvis_ai.distance.distance.Minkowski.__init__", false]], "__init__() (cuvis_ai.distance.distance.spectralangle method)": [[40, "cuvis_ai.distance.distance.SpectralAngle.__init__", false]], "__init__() (cuvis_ai.node.base.basesupervised method)": [[49, "cuvis_ai.node.base.BaseSupervised.__init__", false]], "__init__() (cuvis_ai.node.base.basetransformation method)": [[50, "cuvis_ai.node.base.BaseTransformation.__init__", false]], "__init__() (cuvis_ai.node.base.baseunsupervised method)": [[51, "cuvis_ai.node.base.BaseUnsupervised.__init__", false]], "__init__() (cuvis_ai.node.base.preprocessor method)": [[52, "cuvis_ai.node.base.Preprocessor.__init__", false]], "__init__() (cuvis_ai.node.consumers.cubeconsumer method)": [[43, "cuvis_ai.node.Consumers.CubeConsumer.__init__", false]], "__init__() (cuvis_ai.node.consumers.labelconsumer method)": [[44, "cuvis_ai.node.Consumers.LabelConsumer.__init__", false]], "__init__() (cuvis_ai.node.consumers.labelconsumerinference method)": [[45, "cuvis_ai.node.Consumers.LabelConsumerInference.__init__", false]], "__init__() (cuvis_ai.node.consumers.metadataconsumer method)": [[46, "cuvis_ai.node.Consumers.MetadataConsumer.__init__", false]], "__init__() (cuvis_ai.node.consumers.metadataconsumerinference method)": [[47, "cuvis_ai.node.Consumers.MetadataConsumerInference.__init__", false]], "__init__() (cuvis_ai.node.node.node method)": [[54, "cuvis_ai.node.node.Node.__init__", false]], "__init__() (cuvis_ai.pipeline.graph.graph method)": [[61, "cuvis_ai.pipeline.graph.Graph.__init__", false]], "__init__() (cuvis_ai.preprocessor.nmf.nmf method)": [[64, "cuvis_ai.preprocessor.nmf.NMF.__init__", false]], "__init__() (cuvis_ai.preprocessor.pca.pca method)": [[66, "cuvis_ai.preprocessor.pca.PCA.__init__", false]], "__init__() (cuvis_ai.supervised.lda.lda method)": [[69, "cuvis_ai.supervised.lda.LDA.__init__", false]], "__init__() (cuvis_ai.supervised.qda.qda method)": [[71, "cuvis_ai.supervised.qda.QDA.__init__", false]], "__init__() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[73, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.__init__", false]], "__init__() (cuvis_ai.supervised.svm.svm method)": [[75, "cuvis_ai.supervised.svm.SVM.__init__", false]], "__init__() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.__init__", false]], "__init__() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[81, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.__init__", false]], "__init__() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.__init__", false]], "__init__() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testnodeserialization method)": [[85, "cuvis_ai.test.test_serialization.TestNodeSerialization.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.__init__", false]], "__init__() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.__init__", false]], "__init__() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.__init__", false]], "__init__() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[100, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.__init__", false]], "__init__() (cuvis_ai.transformation.reflectance.reflectance method)": [[103, "cuvis_ai.transformation.reflectance.Reflectance.__init__", false]], "__init__() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[105, "cuvis_ai.transformation.torch_transformation.TorchTransformation.__init__", false]], "__init__() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[107, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.__init__", false]], "__init__() (cuvis_ai.unsupervised.gmm.gmm method)": [[128, "cuvis_ai.unsupervised.gmm.GMM.__init__", false]], "__init__() (cuvis_ai.unsupervised.kmeans.kmeans method)": [[130, "cuvis_ai.unsupervised.kmeans.KMeans.__init__", false]], "__init__() (cuvis_ai.unsupervised.mean_shift.meanshift method)": [[132, "cuvis_ai.unsupervised.mean_shift.MeanShift.__init__", false]], "__init__() (cuvis_ai.utils.nn_config.adam method)": [[137, "cuvis_ai.utils.nn_config.Adam.__init__", false]], "__init__() (cuvis_ai.utils.nn_config.optimizer method)": [[138, "cuvis_ai.utils.nn_config.Optimizer.__init__", false]], "__init__() (cuvis_ai.utils.nn_config.sgd method)": [[139, "cuvis_ai.utils.nn_config.SGD.__init__", false]], "__init__() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.__init__", false]], "__init__() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.__init__", false]], "__init__() (cuvis_ai.utils.serializer.serializer method)": [[156, "cuvis_ai.utils.serializer.Serializer.__init__", false]], "__init__() (cuvis_ai.utils.serializer.yamlserializer method)": [[157, "cuvis_ai.utils.serializer.YamlSerializer.__init__", false]], "abstractdistance (class in cuvis_ai.distance.distance)": [[33, "cuvis_ai.distance.distance.AbstractDistance", false]], "adam (class in cuvis_ai.utils.nn_config)": [[137, "cuvis_ai.utils.nn_config.Adam", false]], "add_base_node() (cuvis_ai.pipeline.graph.graph method)": [[61, "cuvis_ai.pipeline.graph.Graph.add_base_node", false]], "add_constructor() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_constructor", false]], "add_edge() (cuvis_ai.pipeline.graph.graph method)": [[61, "cuvis_ai.pipeline.graph.Graph.add_edge", false]], "add_implicit_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_implicit_resolver", false]], "add_implicit_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_implicit_resolver", false]], "add_indent() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_indent", false]], "add_multi_constructor() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_multi_constructor", false]], "add_multi_representer() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_multi_representer", false]], "add_node() (cuvis_ai.pipeline.graph.graph method)": [[61, "cuvis_ai.pipeline.graph.Graph.add_node", false]], "add_path_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_path_resolver", false]], "add_path_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_path_resolver", false]], "add_representer() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_representer", false]], "addclasscleanup() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testpreprocessornmf class method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testpreprocessorpca class method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testsupervisedlda class method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testsupervisedqda class method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testsupervisedsvm class method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testtransformationreflectance class method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testtransformationtorch class method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testtransformationtorchvision class method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testunsupervisedgmm class method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testunsupervisedkmeans class method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift class method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.addClassCleanup", false]], "addcleanup() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.addCleanup", false]], "addtypeequalityfunc() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.addTypeEqualityFunc", false]], "all_agree() (in module cuvis_ai.deciders.combining_decider)": [[27, "cuvis_ai.deciders.combining_decider.all_agree", false]], "alpha (cuvis_ai.utils.nn_config.adam attribute)": [[137, "cuvis_ai.utils.nn_config.Adam.alpha", false]], "alpha (cuvis_ai.utils.nn_config.sgd attribute)": [[139, "cuvis_ai.utils.nn_config.SGD.alpha", false]], "analyze_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.analyze_scalar", false]], "anchor_node() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.anchor_node", false]], "anchor_template (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.ANCHOR_TEMPLATE", false]], "args (cuvis_ai.utils.nn_config.adam property)": [[137, "cuvis_ai.utils.nn_config.Adam.args", false]], "args (cuvis_ai.utils.nn_config.optimizer property)": [[138, "cuvis_ai.utils.nn_config.Optimizer.args", false]], "args (cuvis_ai.utils.nn_config.sgd property)": [[139, "cuvis_ai.utils.nn_config.SGD.args", false]], "ascend_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.ascend_resolver", false]], "ascend_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.ascend_resolver", false]], "assert_() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assert_", false]], "assert_() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assert_", false]], "assert_() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assert_", false]], "assert_() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assert_", false]], "assert_() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assert_", false]], "assertalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertAlmostEqual", false]], "assertalmostequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertAlmostEquals", false]], "assertcountequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertCountEqual", false]], "assertdictcontainssubset() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertDictContainsSubset", false]], "assertdictequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertDictEqual", false]], "assertequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertEqual", false]], "assertequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertEqual", false]], "assertequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertEqual", false]], "assertequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertEqual", false]], "assertequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertEqual", false]], "assertequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertEquals", false]], "assertequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertEquals", false]], "assertequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertEquals", false]], "assertequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertEquals", false]], "assertequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertEquals", false]], "assertfalse() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertFalse", false]], "assertgreater() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertGreater", false]], "assertgreaterequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertGreaterEqual", false]], "assertin() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIn", false]], "assertin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIn", false]], "assertin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertIn", false]], "assertin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIn", false]], "assertin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIn", false]], "assertis() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIs", false]], "assertis() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIs", false]], "assertis() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertIs", false]], "assertis() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIs", false]], "assertis() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIs", false]], "assertisinstance() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsInstance", false]], "assertisnone() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsNone", false]], "assertisnot() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsNot", false]], "assertisnotnone() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsNotNone", false]], "assertless() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertLess", false]], "assertless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertLess", false]], "assertless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertLess", false]], "assertless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertLess", false]], "assertless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertLess", false]], "assertlessequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertLessEqual", false]], "assertlistequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertListEqual", false]], "assertlogs() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertLogs", false]], "assertmultilineequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertMultiLineEqual", false]], "assertnologs() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNoLogs", false]], "assertnotalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotAlmostEqual", false]], "assertnotalmostequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotAlmostEquals", false]], "assertnotequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotEqual", false]], "assertnotequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotEquals", false]], "assertnotin() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotIn", false]], "assertnotisinstance() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotIsInstance", false]], "assertnotregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotRegex", false]], "assertnotregexpmatches() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotRegexpMatches", false]], "assertraises() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRaises", false]], "assertraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRaises", false]], "assertraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertRaises", false]], "assertraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRaises", false]], "assertraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRaises", false]], "assertraisesregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRaisesRegex", false]], "assertraisesregexp() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRaisesRegexp", false]], "assertregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRegex", false]], "assertregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRegex", false]], "assertregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertRegex", false]], "assertregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRegex", false]], "assertregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRegex", false]], "assertregexpmatches() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRegexpMatches", false]], "assertsequenceequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertSequenceEqual", false]], "assertsetequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertSetEqual", false]], "asserttrue() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertTrue", false]], "asserttupleequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertTupleEqual", false]], "assertwarns() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertWarns", false]], "assertwarnsregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertWarnsRegex", false]], "at_least_n_agree() (in module cuvis_ai.deciders.combining_decider)": [[28, "cuvis_ai.deciders.combining_decider.at_least_n_agree", false]], "basedataset (class in cuvis_ai.data.basedataset)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet", false]], "basedecider (class in cuvis_ai.deciders.base_decider)": [[20, "cuvis_ai.deciders.base_decider.BaseDecider", false]], "basesupervised (class in cuvis_ai.node.base)": [[49, "cuvis_ai.node.base.BaseSupervised", false]], "basetransformation (class in cuvis_ai.node.base)": [[50, "cuvis_ai.node.base.BaseTransformation", false]], "baseunsupervised (class in cuvis_ai.node.base)": [[51, "cuvis_ai.node.base.BaseUnsupervised", false]], "beta_1 (cuvis_ai.utils.nn_config.adam attribute)": [[137, "cuvis_ai.utils.nn_config.Adam.beta_1", false]], "beta_2 (cuvis_ai.utils.nn_config.adam attribute)": [[137, "cuvis_ai.utils.nn_config.Adam.beta_2", false]], "binary_mask_to_rle() (in module cuvis_ai.utils.numpy_utils)": [[141, "cuvis_ai.utils.numpy_utils.binary_mask_to_rle", false]], "binarydecider (class in cuvis_ai.deciders.binary_decider)": [[22, "cuvis_ai.deciders.binary_decider.BinaryDecider", false]], "bool_values (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.bool_values", false]], "c_attrib_list (in module cuvis_ai.data.metadatautils)": [[10, "cuvis_ai.data.MetadataUtils.C_ATTRIB_LIST", false]], "call_super_init (cuvis_ai.tv_transforms.bandpass attribute)": [[110, "cuvis_ai.tv_transforms.Bandpass.call_super_init", false]], "call_super_init (cuvis_ai.tv_transforms.multibandpass attribute)": [[114, "cuvis_ai.tv_transforms.MultiBandpass.call_super_init", false]], "call_super_init (cuvis_ai.tv_transforms.normalizestddev attribute)": [[118, "cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init", false]], "call_super_init (cuvis_ai.tv_transforms.normalizetofloat attribute)": [[122, "cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init", false]], "canberra (class in cuvis_ai.distance.distance)": [[34, "cuvis_ai.distance.distance.Canberra", false]], "cascaded (class in cuvis_ai.deciders.cascaded_decider)": [[24, "cuvis_ai.deciders.cascaded_decider.Cascaded", false]], "change_working_dir() (in module cuvis_ai.utils.filesystem)": [[135, "cuvis_ai.utils.filesystem.change_working_dir", false]], "check_array_shape() (in module cuvis_ai.utils.numpy_utils)": [[142, "cuvis_ai.utils.numpy_utils.check_array_shape", false]], "check_block_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_block_entry", false]], "check_data() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_data", false]], "check_directive() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_directive", false]], "check_document_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_document_end", false]], "check_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_document_start", false]], "check_empty_document() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_empty_document", false]], "check_empty_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_empty_mapping", false]], "check_empty_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_empty_sequence", false]], "check_event() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_event", false]], "check_input_dim() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.base_decider.basedecider method)": [[20, "cuvis_ai.deciders.base_decider.BaseDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[22, "cuvis_ai.deciders.binary_decider.BinaryDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[24, "cuvis_ai.deciders.cascaded_decider.Cascaded.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[26, "cuvis_ai.deciders.combining_decider.CombiningDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[30, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.abstractdistance method)": [[33, "cuvis_ai.distance.distance.AbstractDistance.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.canberra method)": [[34, "cuvis_ai.distance.distance.Canberra.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.ecs method)": [[35, "cuvis_ai.distance.distance.ECS.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.euclidean method)": [[36, "cuvis_ai.distance.distance.Euclidean.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.gfc method)": [[37, "cuvis_ai.distance.distance.GFC.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.manhattan method)": [[38, "cuvis_ai.distance.distance.Manhattan.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.minkowski method)": [[39, "cuvis_ai.distance.distance.Minkowski.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.spectralangle method)": [[40, "cuvis_ai.distance.distance.SpectralAngle.check_input_dim", false]], "check_input_dim() (cuvis_ai.node.node.node method)": [[54, "cuvis_ai.node.node.Node.check_input_dim", false]], "check_input_dim() (cuvis_ai.preprocessor.nmf.nmf method)": [[64, "cuvis_ai.preprocessor.nmf.NMF.check_input_dim", false]], "check_input_dim() (cuvis_ai.preprocessor.pca.pca method)": [[66, "cuvis_ai.preprocessor.pca.PCA.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.lda.lda method)": [[69, "cuvis_ai.supervised.lda.LDA.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.qda.qda method)": [[71, "cuvis_ai.supervised.qda.QDA.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.svm.svm method)": [[75, "cuvis_ai.supervised.svm.SVM.check_input_dim", false]], "check_input_dim() (cuvis_ai.transformation.reflectance.reflectance method)": [[103, "cuvis_ai.transformation.reflectance.Reflectance.check_input_dim", false]], "check_input_dim() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[105, "cuvis_ai.transformation.torch_transformation.TorchTransformation.check_input_dim", false]], "check_input_dim() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[107, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.check_input_dim", false]], "check_input_dim() (cuvis_ai.unsupervised.gmm.gmm method)": [[128, "cuvis_ai.unsupervised.gmm.GMM.check_input_dim", false]], "check_input_dim() (cuvis_ai.unsupervised.kmeans.kmeans method)": [[130, "cuvis_ai.unsupervised.kmeans.KMeans.check_input_dim", false]], "check_input_dim() (cuvis_ai.unsupervised.mean_shift.meanshift method)": [[132, "cuvis_ai.unsupervised.mean_shift.MeanShift.check_input_dim", false]], "check_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_key", false]], "check_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_node", false]], "check_output_dim() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.base_decider.basedecider method)": [[20, "cuvis_ai.deciders.base_decider.BaseDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[22, "cuvis_ai.deciders.binary_decider.BinaryDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[24, "cuvis_ai.deciders.cascaded_decider.Cascaded.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[26, "cuvis_ai.deciders.combining_decider.CombiningDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[30, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.abstractdistance method)": [[33, "cuvis_ai.distance.distance.AbstractDistance.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.canberra method)": [[34, "cuvis_ai.distance.distance.Canberra.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.ecs method)": [[35, "cuvis_ai.distance.distance.ECS.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.euclidean method)": [[36, "cuvis_ai.distance.distance.Euclidean.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.gfc method)": [[37, "cuvis_ai.distance.distance.GFC.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.manhattan method)": [[38, "cuvis_ai.distance.distance.Manhattan.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.minkowski method)": [[39, "cuvis_ai.distance.distance.Minkowski.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.spectralangle method)": [[40, "cuvis_ai.distance.distance.SpectralAngle.check_output_dim", false]], "check_output_dim() (cuvis_ai.node.node.node method)": [[54, "cuvis_ai.node.node.Node.check_output_dim", false]], "check_output_dim() (cuvis_ai.preprocessor.nmf.nmf method)": [[64, "cuvis_ai.preprocessor.nmf.NMF.check_output_dim", false]], "check_output_dim() (cuvis_ai.preprocessor.pca.pca method)": [[66, "cuvis_ai.preprocessor.pca.PCA.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.lda.lda method)": [[69, "cuvis_ai.supervised.lda.LDA.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.qda.qda method)": [[71, "cuvis_ai.supervised.qda.QDA.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.svm.svm method)": [[75, "cuvis_ai.supervised.svm.SVM.check_output_dim", false]], "check_output_dim() (cuvis_ai.transformation.reflectance.reflectance method)": [[103, "cuvis_ai.transformation.reflectance.Reflectance.check_output_dim", false]], "check_output_dim() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[105, "cuvis_ai.transformation.torch_transformation.TorchTransformation.check_output_dim", false]], "check_output_dim() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[107, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.check_output_dim", false]], "check_output_dim() (cuvis_ai.unsupervised.gmm.gmm method)": [[128, "cuvis_ai.unsupervised.gmm.GMM.check_output_dim", false]], "check_output_dim() (cuvis_ai.unsupervised.kmeans.kmeans method)": [[130, "cuvis_ai.unsupervised.kmeans.KMeans.check_output_dim", false]], "check_output_dim() (cuvis_ai.unsupervised.mean_shift.meanshift method)": [[132, "cuvis_ai.unsupervised.mean_shift.MeanShift.check_output_dim", false]], "check_plain() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_plain", false]], "check_printable() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_printable", false]], "check_resolver_prefix() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_resolver_prefix", false]], "check_resolver_prefix() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_resolver_prefix", false]], "check_simple_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_simple_key", false]], "check_state_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_state_key", false]], "check_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_token", false]], "check_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_value", false]], "choose_scalar_style() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.choose_scalar_style", false]], "close() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.close", false]], "combiningdecider (class in cuvis_ai.deciders.combining_decider)": [[26, "cuvis_ai.deciders.combining_decider.CombiningDecider", false]], "compose_document() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_document", false]], "compose_mapping_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_mapping_node", false]], "compose_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_node", false]], "compose_scalar_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_scalar_node", false]], "compose_sequence_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_sequence_node", false]], "construct_document() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_document", false]], "construct_mapping() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_mapping", false]], "construct_object() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_object", false]], "construct_pairs() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_pairs", false]], "construct_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_scalar", false]], "construct_sequence() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_sequence", false]], "construct_undefined() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_undefined", false]], "construct_yaml_binary() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_binary", false]], "construct_yaml_bool() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_bool", false]], "construct_yaml_float() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_float", false]], "construct_yaml_int() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_int", false]], "construct_yaml_map() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_map", false]], "construct_yaml_null() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_null", false]], "construct_yaml_object() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_object", false]], "construct_yaml_omap() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_omap", false]], "construct_yaml_pairs() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_pairs", false]], "construct_yaml_seq() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_seq", false]], "construct_yaml_set() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_set", false]], "construct_yaml_str() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_str", false]], "construct_yaml_timestamp() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_timestamp", false]], "convert_coco2tv() (in module cuvis_ai.data.labels2tv)": [[7, "cuvis_ai.data.Labels2TV.convert_COCO2TV", false]], "counttestcases() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.countTestCases", false]], "cubeconsumer (class in cuvis_ai.node.consumers)": [[43, "cuvis_ai.node.Consumers.CubeConsumer", false]], "cuvis_ai": [[0, "module-cuvis_ai", false]], "cuvis_ai.data": [[1, "module-cuvis_ai.data", false]], "cuvis_ai.data.basedataset": [[2, "module-cuvis_ai.data.BaseDataSet", false]], "cuvis_ai.data.cuvisdataset": [[4, "module-cuvis_ai.data.CuvisDataSet", false]], "cuvis_ai.data.labels2tv": [[5, "module-cuvis_ai.data.Labels2TV", false]], "cuvis_ai.data.livecuvisdataloader": [[8, "module-cuvis_ai.data.LiveCuvisDataLoader", false]], "cuvis_ai.data.metadatautils": [[9, "module-cuvis_ai.data.MetadataUtils", false]], "cuvis_ai.data.numpydataset": [[12, "module-cuvis_ai.data.NumpyDataSet", false]], "cuvis_ai.data.outputformat": [[13, "module-cuvis_ai.data.OutputFormat", false]], "cuvis_ai.data.publicdatasets": [[14, "module-cuvis_ai.data.PublicDataSets", false]], "cuvis_ai.data.utils_dataloader": [[15, "module-cuvis_ai.data.utils_dataloader", false]], "cuvis_ai.deciders": [[18, "module-cuvis_ai.deciders", false]], "cuvis_ai.deciders.base_decider": [[19, "module-cuvis_ai.deciders.base_decider", false]], "cuvis_ai.deciders.binary_decider": [[21, "module-cuvis_ai.deciders.binary_decider", false]], "cuvis_ai.deciders.cascaded_decider": [[23, "module-cuvis_ai.deciders.cascaded_decider", false]], "cuvis_ai.deciders.combining_decider": [[25, "module-cuvis_ai.deciders.combining_decider", false]], "cuvis_ai.deciders.multiclass_decider": [[29, "module-cuvis_ai.deciders.multiclass_decider", false]], "cuvis_ai.distance": [[31, "module-cuvis_ai.distance", false]], "cuvis_ai.distance.distance": [[32, "module-cuvis_ai.distance.distance", false]], "cuvis_ai.node": [[41, "module-cuvis_ai.node", false]], "cuvis_ai.node.base": [[48, "module-cuvis_ai.node.base", false]], "cuvis_ai.node.consumers": [[42, "module-cuvis_ai.node.Consumers", false]], "cuvis_ai.node.node": [[53, "module-cuvis_ai.node.node", false]], "cuvis_ai.node.sklearn": [[55, "module-cuvis_ai.node.sklearn", false]], "cuvis_ai.node.torch": [[56, "module-cuvis_ai.node.torch", false]], "cuvis_ai.node.wrap": [[57, "module-cuvis_ai.node.wrap", false]], "cuvis_ai.pipeline": [[59, "module-cuvis_ai.pipeline", false]], "cuvis_ai.pipeline.graph": [[60, "module-cuvis_ai.pipeline.graph", false]], "cuvis_ai.preprocessor": [[62, "module-cuvis_ai.preprocessor", false]], "cuvis_ai.preprocessor.nmf": [[63, "module-cuvis_ai.preprocessor.nmf", false]], "cuvis_ai.preprocessor.pca": [[65, "module-cuvis_ai.preprocessor.pca", false]], "cuvis_ai.supervised": [[67, "module-cuvis_ai.supervised", false]], "cuvis_ai.supervised.lda": [[68, "module-cuvis_ai.supervised.lda", false]], "cuvis_ai.supervised.qda": [[70, "module-cuvis_ai.supervised.qda", false]], "cuvis_ai.supervised.skorch_supervised": [[72, "module-cuvis_ai.supervised.skorch_supervised", false]], "cuvis_ai.supervised.svm": [[74, "module-cuvis_ai.supervised.svm", false]], "cuvis_ai.test": [[76, "module-cuvis_ai.test", false]], "cuvis_ai.test.test_numpy_utils": [[77, "module-cuvis_ai.test.test_numpy_utils", false]], "cuvis_ai.test.test_pipeline_graph": [[79, "module-cuvis_ai.test.test_pipeline_graph", false]], "cuvis_ai.test.test_preprocessor_structural": [[80, "module-cuvis_ai.test.test_preprocessor_structural", false]], "cuvis_ai.test.test_serialization": [[84, "module-cuvis_ai.test.test_serialization", false]], "cuvis_ai.test.test_unsupervised_structural": [[97, "module-cuvis_ai.test.test_unsupervised_structural", false]], "cuvis_ai.transformation": [[101, "module-cuvis_ai.transformation", false]], "cuvis_ai.transformation.reflectance": [[102, "module-cuvis_ai.transformation.reflectance", false]], "cuvis_ai.transformation.torch_transformation": [[104, "module-cuvis_ai.transformation.torch_transformation", false]], "cuvis_ai.transformation.torchvision_transformation": [[106, "module-cuvis_ai.transformation.torchvision_transformation", false]], "cuvis_ai.tv_transforms": [[108, "module-cuvis_ai.tv_transforms", false]], "cuvis_ai.tv_transforms.bandpass": [[109, "module-cuvis_ai.tv_transforms.Bandpass", false]], "cuvis_ai.tv_transforms.multibandpass": [[113, "module-cuvis_ai.tv_transforms.MultiBandpass", false]], "cuvis_ai.tv_transforms.normalizestddev": [[117, "module-cuvis_ai.tv_transforms.NormalizeStdDev", false]], "cuvis_ai.tv_transforms.normalizetofloat": [[121, "module-cuvis_ai.tv_transforms.NormalizeToFloat", false]], "cuvis_ai.tv_transforms.wavelengthlist": [[125, "module-cuvis_ai.tv_transforms.WavelengthList", false]], "cuvis_ai.unsupervised": [[126, "module-cuvis_ai.unsupervised", false]], "cuvis_ai.unsupervised.gmm": [[127, "module-cuvis_ai.unsupervised.gmm", false]], "cuvis_ai.unsupervised.kmeans": [[129, "module-cuvis_ai.unsupervised.kmeans", false]], "cuvis_ai.unsupervised.mean_shift": [[131, "module-cuvis_ai.unsupervised.mean_shift", false]], "cuvis_ai.utils": [[133, "module-cuvis_ai.utils", false]], "cuvis_ai.utils.filesystem": [[134, "module-cuvis_ai.utils.filesystem", false]], "cuvis_ai.utils.nn_config": [[136, "module-cuvis_ai.utils.nn_config", false]], "cuvis_ai.utils.numpy_utils": [[140, "module-cuvis_ai.utils.numpy_utils", false]], "cuvis_ai.utils.serializer": [[153, "module-cuvis_ai.utils.serializer", false]], "cuvis_ai.utils.test": [[162, "module-cuvis_ai.utils.test", false]], "cuvis_ai.utils.visualize": [[164, "module-cuvis_ai.utils.visualize", false]], "cuvis_collate() (in module cuvis_ai.data.utils_dataloader)": [[16, "cuvis_ai.data.utils_dataloader.cuvis_collate", false]], "cuvisyamldumper (class in cuvis_ai.utils.serializer)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper", false]], "cuvisyamlloader (class in cuvis_ai.utils.serializer)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader", false]], "debug() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.debug", false]], "debug() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.debug", false]], "debug() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.debug", false]], "debug() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.debug", false]], "debug() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.debug", false]], "debug() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.debug", false]], "debug() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.debug", false]], "debug() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.debug", false]], "debug() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.debug", false]], "debug() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.debug", false]], "debug() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.debug", false]], "debug() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.debug", false]], "debug() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.debug", false]], "debug() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.debug", false]], "debug() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.debug", false]], "debug() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.debug", false]], "default_mapping_tag (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_MAPPING_TAG", false]], "default_mapping_tag (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_MAPPING_TAG", false]], "default_scalar_tag (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_SCALAR_TAG", false]], "default_scalar_tag (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_SCALAR_TAG", false]], "default_sequence_tag (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_SEQUENCE_TAG", false]], "default_sequence_tag (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_SEQUENCE_TAG", false]], "default_tag_prefixes (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_TAG_PREFIXES", false]], "default_tags (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_TAGS", false]], "defaulttestresult() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.defaultTestResult", false]], "delete_node() (cuvis_ai.pipeline.graph.graph method)": [[61, "cuvis_ai.pipeline.graph.Graph.delete_node", false]], "descend_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.descend_resolver", false]], "descend_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.descend_resolver", false]], "determine_block_hints() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.determine_block_hints", false]], "determine_encoding() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.determine_encoding", false]], "dispose() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.dispose", false]], "dispose() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.dispose", false]], "doclasscleanups() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testpreprocessornmf class method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testpreprocessorpca class method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testsupervisedlda class method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testsupervisedqda class method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testsupervisedsvm class method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testtransformationreflectance class method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testtransformationtorch class method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testtransformationtorchvision class method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testunsupervisedgmm class method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testunsupervisedkmeans class method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift class method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.doClassCleanups", false]], "docleanups() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.doCleanups", false]], "docleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.doCleanups", false]], "docleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.doCleanups", false]], "docleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.doCleanups", false]], "docleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.doCleanups", false]], "dump_patches (cuvis_ai.tv_transforms.bandpass attribute)": [[111, "cuvis_ai.tv_transforms.Bandpass.dump_patches", false]], "dump_patches (cuvis_ai.tv_transforms.multibandpass attribute)": [[115, "cuvis_ai.tv_transforms.MultiBandpass.dump_patches", false]], "dump_patches (cuvis_ai.tv_transforms.normalizestddev attribute)": [[119, "cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches", false]], "dump_patches (cuvis_ai.tv_transforms.normalizetofloat attribute)": [[123, "cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches", false]], "ecs (class in cuvis_ai.distance.distance)": [[35, "cuvis_ai.distance.distance.ECS", false]], "emit() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.emit", false]], "epochs (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[73, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.epochs", false]], "epsilon (cuvis_ai.utils.nn_config.adam attribute)": [[137, "cuvis_ai.utils.nn_config.Adam.epsilon", false]], "escape_codes (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.ESCAPE_CODES", false]], "escape_replacements (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.ESCAPE_REPLACEMENTS", false]], "escape_replacements (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.ESCAPE_REPLACEMENTS", false]], "euclidean (class in cuvis_ai.distance.distance)": [[36, "cuvis_ai.distance.distance.Euclidean", false]], "expect_alias() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_alias", false]], "expect_block_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping", false]], "expect_block_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping_key", false]], "expect_block_mapping_simple_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping_simple_value", false]], "expect_block_mapping_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping_value", false]], "expect_block_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_sequence", false]], "expect_block_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_sequence_item", false]], "expect_document_end() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_document_end", false]], "expect_document_root() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_document_root", false]], "expect_document_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_document_start", false]], "expect_first_block_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_block_mapping_key", false]], "expect_first_block_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_block_sequence_item", false]], "expect_first_document_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_document_start", false]], "expect_first_flow_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_flow_mapping_key", false]], "expect_first_flow_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_flow_sequence_item", false]], "expect_flow_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping", false]], "expect_flow_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping_key", false]], "expect_flow_mapping_simple_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping_simple_value", false]], "expect_flow_mapping_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping_value", false]], "expect_flow_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_sequence", false]], "expect_flow_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_sequence_item", false]], "expect_node() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_node", false]], "expect_nothing() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_nothing", false]], "expect_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_scalar", false]], "expect_stream_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_stream_start", false]], "extra_repr() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.extra_repr", false]], "fail() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.fail", false]], "fail() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.fail", false]], "fail() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.fail", false]], "fail() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.fail", false]], "fail() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.fail", false]], "fail() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.fail", false]], "fail() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.fail", false]], "fail() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.fail", false]], "fail() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.fail", false]], "fail() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.fail", false]], "fail() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.fail", false]], "fail() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.fail", false]], "fail() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.fail", false]], "fail() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.fail", false]], "fail() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.fail", false]], "fail() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.fail", false]], "failif() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failIf", false]], "failif() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failIf", false]], "failif() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failIf", false]], "failif() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failIf", false]], "failif() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failIf", false]], "failifalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failIfAlmostEqual", false]], "failifequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failIfEqual", false]], "failunless() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnless", false]], "failunless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnless", false]], "failunless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failUnless", false]], "failunless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnless", false]], "failunless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnless", false]], "failunlessalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnlessAlmostEqual", false]], "failunlessequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnlessEqual", false]], "failunlessraises() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnlessRaises", false]], "failureexception (cuvis_ai.test.test_numpy_utils.testnumpyutils attribute)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failureException", false]], "failureexception (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf attribute)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failureException", false]], "failureexception (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca attribute)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testpreprocessornmf attribute)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testpreprocessorpca attribute)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testsupervisedlda attribute)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testsupervisedqda attribute)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testsupervisedsvm attribute)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testtransformationreflectance attribute)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testtransformationtorch attribute)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testtransformationtorchvision attribute)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testunsupervisedgmm attribute)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testunsupervisedkmeans attribute)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testunsupervisedmeanshift attribute)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failureException", false]], "failureexception (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm attribute)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failureException", false]], "failureexception (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans attribute)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failureException", false]], "fetch_alias() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_alias", false]], "fetch_anchor() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_anchor", false]], "fetch_block_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_block_entry", false]], "fetch_block_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_block_scalar", false]], "fetch_directive() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_directive", false]], "fetch_document_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_document_end", false]], "fetch_document_indicator() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_document_indicator", false]], "fetch_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_document_start", false]], "fetch_double() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_double", false]], "fetch_flow_collection_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_collection_end", false]], "fetch_flow_collection_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_collection_start", false]], "fetch_flow_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_entry", false]], "fetch_flow_mapping_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_mapping_end", false]], "fetch_flow_mapping_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_mapping_start", false]], "fetch_flow_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_scalar", false]], "fetch_flow_sequence_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_sequence_end", false]], "fetch_flow_sequence_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_sequence_start", false]], "fetch_folded() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_folded", false]], "fetch_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_key", false]], "fetch_literal() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_literal", false]], "fetch_more_tokens() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_more_tokens", false]], "fetch_plain() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_plain", false]], "fetch_single() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_single", false]], "fetch_stream_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_stream_end", false]], "fetch_stream_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_stream_start", false]], "fetch_tag() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_tag", false]], "fetch_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_value", false]], "fit() (cuvis_ai.deciders.base_decider.basedecider method)": [[20, "cuvis_ai.deciders.base_decider.BaseDecider.fit", false]], "fit() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[22, "cuvis_ai.deciders.binary_decider.BinaryDecider.fit", false]], "fit() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[24, "cuvis_ai.deciders.cascaded_decider.Cascaded.fit", false]], "fit() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[26, "cuvis_ai.deciders.combining_decider.CombiningDecider.fit", false]], "fit() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[30, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.fit", false]], "fit() (cuvis_ai.distance.distance.abstractdistance method)": [[33, "cuvis_ai.distance.distance.AbstractDistance.fit", false]], "fit() (cuvis_ai.distance.distance.canberra method)": [[34, "cuvis_ai.distance.distance.Canberra.fit", false]], "fit() (cuvis_ai.distance.distance.ecs method)": [[35, "cuvis_ai.distance.distance.ECS.fit", false]], "fit() (cuvis_ai.distance.distance.euclidean method)": [[36, "cuvis_ai.distance.distance.Euclidean.fit", false]], "fit() (cuvis_ai.distance.distance.gfc method)": [[37, "cuvis_ai.distance.distance.GFC.fit", false]], "fit() (cuvis_ai.distance.distance.manhattan method)": [[38, "cuvis_ai.distance.distance.Manhattan.fit", false]], "fit() (cuvis_ai.distance.distance.minkowski method)": [[39, "cuvis_ai.distance.distance.Minkowski.fit", false]], "fit() (cuvis_ai.distance.distance.spectralangle method)": [[40, "cuvis_ai.distance.distance.SpectralAngle.fit", false]], "fit() (cuvis_ai.node.base.basesupervised method)": [[49, "cuvis_ai.node.base.BaseSupervised.fit", false]], "fit() (cuvis_ai.node.base.basetransformation method)": [[50, "cuvis_ai.node.base.BaseTransformation.fit", false]], "fit() (cuvis_ai.node.base.baseunsupervised method)": [[51, "cuvis_ai.node.base.BaseUnsupervised.fit", false]], "fit() (cuvis_ai.node.base.preprocessor method)": [[52, "cuvis_ai.node.base.Preprocessor.fit", false]], "fit() (cuvis_ai.pipeline.graph.graph method)": [[61, "cuvis_ai.pipeline.graph.Graph.fit", false]], "fit() (cuvis_ai.preprocessor.nmf.nmf method)": [[64, "cuvis_ai.preprocessor.nmf.NMF.fit", false]], "fit() (cuvis_ai.preprocessor.pca.pca method)": [[66, "cuvis_ai.preprocessor.pca.PCA.fit", false]], "fit() (cuvis_ai.supervised.lda.lda method)": [[69, "cuvis_ai.supervised.lda.LDA.fit", false]], "fit() (cuvis_ai.supervised.qda.qda method)": [[71, "cuvis_ai.supervised.qda.QDA.fit", false]], "fit() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[73, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.fit", false]], "fit() (cuvis_ai.supervised.svm.svm method)": [[75, "cuvis_ai.supervised.svm.SVM.fit", false]], "fit() (cuvis_ai.transformation.reflectance.reflectance method)": [[103, "cuvis_ai.transformation.reflectance.Reflectance.fit", false]], "fit() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[105, "cuvis_ai.transformation.torch_transformation.TorchTransformation.fit", false]], "fit() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[107, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.fit", false]], "fit() (cuvis_ai.unsupervised.gmm.gmm method)": [[128, "cuvis_ai.unsupervised.gmm.GMM.fit", false]], "fit() (cuvis_ai.unsupervised.kmeans.kmeans method)": [[130, "cuvis_ai.unsupervised.kmeans.KMeans.fit", false]], "fit() (cuvis_ai.unsupervised.mean_shift.meanshift method)": [[132, "cuvis_ai.unsupervised.mean_shift.MeanShift.fit", false]], "flatten_batch_and_labels() (in module cuvis_ai.utils.numpy_utils)": [[143, "cuvis_ai.utils.numpy_utils.flatten_batch_and_labels", false]], "flatten_batch_and_spatial() (in module cuvis_ai.utils.numpy_utils)": [[144, "cuvis_ai.utils.numpy_utils.flatten_batch_and_spatial", false]], "flatten_labels() (in module cuvis_ai.utils.numpy_utils)": [[145, "cuvis_ai.utils.numpy_utils.flatten_labels", false]], "flatten_mapping() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.flatten_mapping", false]], "flatten_spatial() (in module cuvis_ai.utils.numpy_utils)": [[146, "cuvis_ai.utils.numpy_utils.flatten_spatial", false]], "flush_stream() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.flush_stream", false]], "forward() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.forward", false]], "forward() (cuvis_ai.deciders.base_decider.basedecider method)": [[20, "cuvis_ai.deciders.base_decider.BaseDecider.forward", false]], "forward() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[22, "cuvis_ai.deciders.binary_decider.BinaryDecider.forward", false]], "forward() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[24, "cuvis_ai.deciders.cascaded_decider.Cascaded.forward", false]], "forward() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[26, "cuvis_ai.deciders.combining_decider.CombiningDecider.forward", false]], "forward() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[30, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.forward", false]], "forward() (cuvis_ai.distance.distance.abstractdistance method)": [[33, "cuvis_ai.distance.distance.AbstractDistance.forward", false]], "forward() (cuvis_ai.distance.distance.canberra method)": [[34, "cuvis_ai.distance.distance.Canberra.forward", false]], "forward() (cuvis_ai.distance.distance.ecs method)": [[35, "cuvis_ai.distance.distance.ECS.forward", false]], "forward() (cuvis_ai.distance.distance.euclidean method)": [[36, "cuvis_ai.distance.distance.Euclidean.forward", false]], "forward() (cuvis_ai.distance.distance.gfc method)": [[37, "cuvis_ai.distance.distance.GFC.forward", false]], "forward() (cuvis_ai.distance.distance.manhattan method)": [[38, "cuvis_ai.distance.distance.Manhattan.forward", false]], "forward() (cuvis_ai.distance.distance.minkowski method)": [[39, "cuvis_ai.distance.distance.Minkowski.forward", false]], "forward() (cuvis_ai.distance.distance.spectralangle method)": [[40, "cuvis_ai.distance.distance.SpectralAngle.forward", false]], "forward() (cuvis_ai.node.base.basesupervised method)": [[49, "cuvis_ai.node.base.BaseSupervised.forward", false]], "forward() (cuvis_ai.node.base.basetransformation method)": [[50, "cuvis_ai.node.base.BaseTransformation.forward", false]], "forward() (cuvis_ai.node.base.baseunsupervised method)": [[51, "cuvis_ai.node.base.BaseUnsupervised.forward", false]], "forward() (cuvis_ai.node.node.node method)": [[54, "cuvis_ai.node.node.Node.forward", false]], "forward() (cuvis_ai.pipeline.graph.graph method)": [[61, "cuvis_ai.pipeline.graph.Graph.forward", false]], "forward() (cuvis_ai.preprocessor.nmf.nmf method)": [[64, "cuvis_ai.preprocessor.nmf.NMF.forward", false]], "forward() (cuvis_ai.preprocessor.pca.pca method)": [[66, "cuvis_ai.preprocessor.pca.PCA.forward", false]], "forward() (cuvis_ai.supervised.lda.lda method)": [[69, "cuvis_ai.supervised.lda.LDA.forward", false]], "forward() (cuvis_ai.supervised.qda.qda method)": [[71, "cuvis_ai.supervised.qda.QDA.forward", false]], "forward() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[73, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.forward", false]], "forward() (cuvis_ai.supervised.svm.svm method)": [[75, "cuvis_ai.supervised.svm.SVM.forward", false]], "forward() (cuvis_ai.transformation.reflectance.reflectance method)": [[103, "cuvis_ai.transformation.reflectance.Reflectance.forward", false]], "forward() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[105, "cuvis_ai.transformation.torch_transformation.TorchTransformation.forward", false]], "forward() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[107, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.forward", false]], "forward() (cuvis_ai.unsupervised.gmm.gmm method)": [[128, "cuvis_ai.unsupervised.gmm.GMM.forward", false]], "forward() (cuvis_ai.unsupervised.kmeans.kmeans method)": [[130, "cuvis_ai.unsupervised.kmeans.KMeans.forward", false]], "forward() (cuvis_ai.unsupervised.mean_shift.meanshift method)": [[132, "cuvis_ai.unsupervised.mean_shift.MeanShift.forward", false]], "forward() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.forward", false]], "gen_coco_labels() (in module cuvis_ai.utils.numpy_utils)": [[147, "cuvis_ai.utils.numpy_utils.gen_coco_labels", false]], "generate_anchor() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.generate_anchor", false]], "get_data() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_data", false]], "get_dataloader_from_dataset() (in module cuvis_ai.data.utils_dataloader)": [[17, "cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset", false]], "get_datatype() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.get_datatype", false]], "get_event() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_event", false]], "get_mark() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_mark", false]], "get_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_node", false]], "get_np_dummy_data() (in module cuvis_ai.utils.test)": [[163, "cuvis_ai.utils.test.get_np_dummy_data", false]], "get_shape_without_batch() (in module cuvis_ai.utils.numpy_utils)": [[148, "cuvis_ai.utils.numpy_utils.get_shape_without_batch", false]], "get_single_data() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_single_data", false]], "get_single_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_single_node", false]], "get_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_token", false]], "gfc (class in cuvis_ai.distance.distance)": [[37, "cuvis_ai.distance.distance.GFC", false]], "gmm (class in cuvis_ai.unsupervised.gmm)": [[128, "cuvis_ai.unsupervised.gmm.GMM", false]], "graph (class in cuvis_ai.pipeline.graph)": [[61, "cuvis_ai.pipeline.graph.Graph", false]], "id() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.id", false]], "id() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.id", false]], "id() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.id", false]], "id() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.id", false]], "id() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.id", false]], "id() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.id", false]], "id() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.id", false]], "id() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.id", false]], "id() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.id", false]], "id() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.id", false]], "id() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.id", false]], "id() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.id", false]], "id() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.id", false]], "id() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.id", false]], "id() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.id", false]], "id() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.id", false]], "ignore_aliases() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.ignore_aliases", false]], "increase_indent() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.increase_indent", false]], "inf_value (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.inf_value", false]], "inf_value (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.inf_value", false]], "input_dim (cuvis_ai.data.basedataset.basedataset property)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.input_dim", false]], "input_dim (cuvis_ai.deciders.base_decider.basedecider property)": [[20, "cuvis_ai.deciders.base_decider.BaseDecider.input_dim", false]], "input_dim (cuvis_ai.deciders.binary_decider.binarydecider property)": [[22, "cuvis_ai.deciders.binary_decider.BinaryDecider.input_dim", false]], "input_dim (cuvis_ai.deciders.cascaded_decider.cascaded property)": [[24, "cuvis_ai.deciders.cascaded_decider.Cascaded.input_dim", false]], "input_dim (cuvis_ai.deciders.combining_decider.combiningdecider property)": [[26, "cuvis_ai.deciders.combining_decider.CombiningDecider.input_dim", false]], "input_dim (cuvis_ai.deciders.multiclass_decider.multiclassdecider property)": [[30, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.input_dim", false]], "input_dim (cuvis_ai.distance.distance.abstractdistance property)": [[33, "cuvis_ai.distance.distance.AbstractDistance.input_dim", false]], "input_dim (cuvis_ai.distance.distance.canberra property)": [[34, "cuvis_ai.distance.distance.Canberra.input_dim", false]], "input_dim (cuvis_ai.distance.distance.ecs property)": [[35, "cuvis_ai.distance.distance.ECS.input_dim", false]], "input_dim (cuvis_ai.distance.distance.euclidean property)": [[36, "cuvis_ai.distance.distance.Euclidean.input_dim", false]], "input_dim (cuvis_ai.distance.distance.gfc property)": [[37, "cuvis_ai.distance.distance.GFC.input_dim", false]], "input_dim (cuvis_ai.distance.distance.manhattan property)": [[38, "cuvis_ai.distance.distance.Manhattan.input_dim", false]], "input_dim (cuvis_ai.distance.distance.minkowski property)": [[39, "cuvis_ai.distance.distance.Minkowski.input_dim", false]], "input_dim (cuvis_ai.distance.distance.spectralangle property)": [[40, "cuvis_ai.distance.distance.SpectralAngle.input_dim", false]], "input_dim (cuvis_ai.node.node.node property)": [[54, "cuvis_ai.node.node.Node.input_dim", false]], "input_dim (cuvis_ai.preprocessor.nmf.nmf property)": [[64, "cuvis_ai.preprocessor.nmf.NMF.input_dim", false]], "input_dim (cuvis_ai.preprocessor.pca.pca property)": [[66, "cuvis_ai.preprocessor.pca.PCA.input_dim", false]], "input_dim (cuvis_ai.supervised.lda.lda property)": [[69, "cuvis_ai.supervised.lda.LDA.input_dim", false]], "input_dim (cuvis_ai.supervised.qda.qda property)": [[71, "cuvis_ai.supervised.qda.QDA.input_dim", false]], "input_dim (cuvis_ai.supervised.svm.svm property)": [[75, "cuvis_ai.supervised.svm.SVM.input_dim", false]], "input_dim (cuvis_ai.transformation.reflectance.reflectance property)": [[103, "cuvis_ai.transformation.reflectance.Reflectance.input_dim", false]], "input_dim (cuvis_ai.transformation.torch_transformation.torchtransformation property)": [[105, "cuvis_ai.transformation.torch_transformation.TorchTransformation.input_dim", false]], "input_dim (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation property)": [[107, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.input_dim", false]], "input_dim (cuvis_ai.unsupervised.gmm.gmm property)": [[128, "cuvis_ai.unsupervised.gmm.GMM.input_dim", false]], "input_dim (cuvis_ai.unsupervised.kmeans.kmeans property)": [[130, "cuvis_ai.unsupervised.kmeans.KMeans.input_dim", false]], "input_dim (cuvis_ai.unsupervised.mean_shift.meanshift property)": [[132, "cuvis_ai.unsupervised.mean_shift.MeanShift.input_dim", false]], "input_dim() (cuvis_ai.node.base.basetransformation method)": [[50, "cuvis_ai.node.base.BaseTransformation.input_dim", false]], "kmeans (class in cuvis_ai.unsupervised.kmeans)": [[130, "cuvis_ai.unsupervised.kmeans.KMeans", false]], "labelconsumer (class in cuvis_ai.node.consumers)": [[44, "cuvis_ai.node.Consumers.LabelConsumer", false]], "labelconsumerinference (class in cuvis_ai.node.consumers)": [[45, "cuvis_ai.node.Consumers.LabelConsumerInference", false]], "lda (class in cuvis_ai.supervised.lda)": [[69, "cuvis_ai.supervised.lda.LDA", false]], "load() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.load", false]], "load() (cuvis_ai.deciders.base_decider.basedecider method)": [[20, "cuvis_ai.deciders.base_decider.BaseDecider.load", false]], "load() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[22, "cuvis_ai.deciders.binary_decider.BinaryDecider.load", false]], "load() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[24, "cuvis_ai.deciders.cascaded_decider.Cascaded.load", false]], "load() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[26, "cuvis_ai.deciders.combining_decider.CombiningDecider.load", false]], "load() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[30, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.load", false]], "load() (cuvis_ai.distance.distance.abstractdistance method)": [[33, "cuvis_ai.distance.distance.AbstractDistance.load", false]], "load() (cuvis_ai.distance.distance.canberra method)": [[34, "cuvis_ai.distance.distance.Canberra.load", false]], "load() (cuvis_ai.distance.distance.ecs method)": [[35, "cuvis_ai.distance.distance.ECS.load", false]], "load() (cuvis_ai.distance.distance.euclidean method)": [[36, "cuvis_ai.distance.distance.Euclidean.load", false]], "load() (cuvis_ai.distance.distance.gfc method)": [[37, "cuvis_ai.distance.distance.GFC.load", false]], "load() (cuvis_ai.distance.distance.manhattan method)": [[38, "cuvis_ai.distance.distance.Manhattan.load", false]], "load() (cuvis_ai.distance.distance.minkowski method)": [[39, "cuvis_ai.distance.distance.Minkowski.load", false]], "load() (cuvis_ai.distance.distance.spectralangle method)": [[40, "cuvis_ai.distance.distance.SpectralAngle.load", false]], "load() (cuvis_ai.node.base.basetransformation method)": [[50, "cuvis_ai.node.base.BaseTransformation.load", false]], "load() (cuvis_ai.node.node.node method)": [[54, "cuvis_ai.node.node.Node.load", false]], "load() (cuvis_ai.pipeline.graph.graph method)": [[61, "cuvis_ai.pipeline.graph.Graph.load", false]], "load() (cuvis_ai.preprocessor.nmf.nmf method)": [[64, "cuvis_ai.preprocessor.nmf.NMF.load", false]], "load() (cuvis_ai.preprocessor.pca.pca method)": [[66, "cuvis_ai.preprocessor.pca.PCA.load", false]], "load() (cuvis_ai.supervised.lda.lda method)": [[69, "cuvis_ai.supervised.lda.LDA.load", false]], "load() (cuvis_ai.supervised.qda.qda method)": [[71, "cuvis_ai.supervised.qda.QDA.load", false]], "load() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[73, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.load", false]], "load() (cuvis_ai.supervised.svm.svm method)": [[75, "cuvis_ai.supervised.svm.SVM.load", false]], "load() (cuvis_ai.transformation.reflectance.reflectance method)": [[103, "cuvis_ai.transformation.reflectance.Reflectance.load", false]], "load() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[105, "cuvis_ai.transformation.torch_transformation.TorchTransformation.load", false]], "load() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[107, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.load", false]], "load() (cuvis_ai.unsupervised.gmm.gmm method)": [[128, "cuvis_ai.unsupervised.gmm.GMM.load", false]], "load() (cuvis_ai.unsupervised.kmeans.kmeans method)": [[130, "cuvis_ai.unsupervised.kmeans.KMeans.load", false]], "load() (cuvis_ai.unsupervised.mean_shift.meanshift method)": [[132, "cuvis_ai.unsupervised.mean_shift.MeanShift.load", false]], "load() (cuvis_ai.utils.serializer.yamlserializer method)": [[157, "cuvis_ai.utils.serializer.YamlSerializer.load", false]], "load_from_file() (cuvis_ai.pipeline.graph.graph class method)": [[61, "cuvis_ai.pipeline.graph.Graph.load_from_file", false]], "load_node() (cuvis_ai.utils.serializer.serializer method)": [[156, "cuvis_ai.utils.serializer.Serializer.load_node", false]], "longmessage (cuvis_ai.test.test_numpy_utils.testnumpyutils attribute)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.longMessage", false]], "longmessage (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf attribute)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.longMessage", false]], "longmessage (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca attribute)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testpreprocessornmf attribute)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testpreprocessorpca attribute)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testsupervisedlda attribute)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testsupervisedqda attribute)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testsupervisedsvm attribute)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testtransformationreflectance attribute)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testtransformationtorch attribute)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testtransformationtorchvision attribute)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testunsupervisedgmm attribute)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testunsupervisedkmeans attribute)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testunsupervisedmeanshift attribute)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.longMessage", false]], "longmessage (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm attribute)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.longMessage", false]], "longmessage (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans attribute)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.longMessage", false]], "lr (cuvis_ai.utils.nn_config.adam attribute)": [[137, "cuvis_ai.utils.nn_config.Adam.lr", false]], "lr (cuvis_ai.utils.nn_config.sgd attribute)": [[139, "cuvis_ai.utils.nn_config.SGD.lr", false]], "make_node() (in module cuvis_ai.node.wrap)": [[58, "cuvis_ai.node.wrap.make_node", false]], "manhattan (class in cuvis_ai.distance.distance)": [[38, "cuvis_ai.distance.distance.Manhattan", false]], "maxdiff (cuvis_ai.test.test_numpy_utils.testnumpyutils attribute)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.maxDiff", false]], "maxdiff (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf attribute)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.maxDiff", false]], "maxdiff (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca attribute)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testpreprocessornmf attribute)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testpreprocessorpca attribute)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testsupervisedlda attribute)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testsupervisedqda attribute)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testsupervisedsvm attribute)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testtransformationreflectance attribute)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testtransformationtorch attribute)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testtransformationtorchvision attribute)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testunsupervisedgmm attribute)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testunsupervisedkmeans attribute)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testunsupervisedmeanshift attribute)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.maxDiff", false]], "maxdiff (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm attribute)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.maxDiff", false]], "maxdiff (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans attribute)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.maxDiff", false]], "meanshift (class in cuvis_ai.unsupervised.mean_shift)": [[132, "cuvis_ai.unsupervised.mean_shift.MeanShift", false]], "metadataconsumer (class in cuvis_ai.node.consumers)": [[46, "cuvis_ai.node.Consumers.MetadataConsumer", false]], "metadataconsumerinference (class in cuvis_ai.node.consumers)": [[47, "cuvis_ai.node.Consumers.MetadataConsumerInference", false]], "metadatainit() (in module cuvis_ai.data.metadatautils)": [[11, "cuvis_ai.data.MetadataUtils.metadataInit", false]], "minkowski (class in cuvis_ai.distance.distance)": [[39, "cuvis_ai.distance.distance.Minkowski", false]], "model (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[73, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.model", false]], "model_args (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[73, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.model_args", false]], "module": [[0, "module-cuvis_ai", false], [1, "module-cuvis_ai.data", false], [2, "module-cuvis_ai.data.BaseDataSet", false], [4, "module-cuvis_ai.data.CuvisDataSet", false], [5, "module-cuvis_ai.data.Labels2TV", false], [8, "module-cuvis_ai.data.LiveCuvisDataLoader", false], [9, "module-cuvis_ai.data.MetadataUtils", false], [12, "module-cuvis_ai.data.NumpyDataSet", false], [13, "module-cuvis_ai.data.OutputFormat", false], [14, "module-cuvis_ai.data.PublicDataSets", false], [15, "module-cuvis_ai.data.utils_dataloader", false], [18, "module-cuvis_ai.deciders", false], [19, "module-cuvis_ai.deciders.base_decider", false], [21, "module-cuvis_ai.deciders.binary_decider", false], [23, "module-cuvis_ai.deciders.cascaded_decider", false], [25, "module-cuvis_ai.deciders.combining_decider", false], [29, "module-cuvis_ai.deciders.multiclass_decider", false], [31, "module-cuvis_ai.distance", false], [32, "module-cuvis_ai.distance.distance", false], [41, "module-cuvis_ai.node", false], [42, "module-cuvis_ai.node.Consumers", false], [48, "module-cuvis_ai.node.base", false], [53, "module-cuvis_ai.node.node", false], [55, "module-cuvis_ai.node.sklearn", false], [56, "module-cuvis_ai.node.torch", false], [57, "module-cuvis_ai.node.wrap", false], [59, "module-cuvis_ai.pipeline", false], [60, "module-cuvis_ai.pipeline.graph", false], [62, "module-cuvis_ai.preprocessor", false], [63, "module-cuvis_ai.preprocessor.nmf", false], [65, "module-cuvis_ai.preprocessor.pca", false], [67, "module-cuvis_ai.supervised", false], [68, "module-cuvis_ai.supervised.lda", false], [70, "module-cuvis_ai.supervised.qda", false], [72, "module-cuvis_ai.supervised.skorch_supervised", false], [74, "module-cuvis_ai.supervised.svm", false], [76, "module-cuvis_ai.test", false], [77, "module-cuvis_ai.test.test_numpy_utils", false], [79, "module-cuvis_ai.test.test_pipeline_graph", false], [80, "module-cuvis_ai.test.test_preprocessor_structural", false], [84, "module-cuvis_ai.test.test_serialization", false], [97, "module-cuvis_ai.test.test_unsupervised_structural", false], [101, "module-cuvis_ai.transformation", false], [102, "module-cuvis_ai.transformation.reflectance", false], [104, "module-cuvis_ai.transformation.torch_transformation", false], [106, "module-cuvis_ai.transformation.torchvision_transformation", false], [108, "module-cuvis_ai.tv_transforms", false], [109, "module-cuvis_ai.tv_transforms.Bandpass", false], [113, "module-cuvis_ai.tv_transforms.MultiBandpass", false], [117, "module-cuvis_ai.tv_transforms.NormalizeStdDev", false], [121, "module-cuvis_ai.tv_transforms.NormalizeToFloat", false], [125, "module-cuvis_ai.tv_transforms.WavelengthList", false], [126, "module-cuvis_ai.unsupervised", false], [127, "module-cuvis_ai.unsupervised.gmm", false], [129, "module-cuvis_ai.unsupervised.kmeans", false], [131, "module-cuvis_ai.unsupervised.mean_shift", false], [133, "module-cuvis_ai.utils", false], [134, "module-cuvis_ai.utils.filesystem", false], [136, "module-cuvis_ai.utils.nn_config", false], [140, "module-cuvis_ai.utils.numpy_utils", false], [153, "module-cuvis_ai.utils.serializer", false], [162, "module-cuvis_ai.utils.test", false], [164, "module-cuvis_ai.utils.visualize", false]], "momentum (cuvis_ai.utils.nn_config.sgd attribute)": [[139, "cuvis_ai.utils.nn_config.SGD.momentum", false]], "multiclassdecider (class in cuvis_ai.deciders.multiclass_decider)": [[30, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider", false]], "n_components (cuvis_ai.supervised.lda.lda attribute)": [[69, "cuvis_ai.supervised.lda.LDA.n_components", false]], "name (cuvis_ai.utils.nn_config.adam property)": [[137, "cuvis_ai.utils.nn_config.Adam.name", false]], "name (cuvis_ai.utils.nn_config.optimizer property)": [[138, "cuvis_ai.utils.nn_config.Optimizer.name", false]], "name (cuvis_ai.utils.nn_config.sgd property)": [[139, "cuvis_ai.utils.nn_config.SGD.name", false]], "nan_value (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.nan_value", false]], "need_events() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.need_events", false]], "need_more_events() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.need_more_events", false]], "need_more_tokens() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.need_more_tokens", false]], "nesterov (cuvis_ai.utils.nn_config.sgd attribute)": [[139, "cuvis_ai.utils.nn_config.SGD.nesterov", false]], "next_possible_simple_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.next_possible_simple_key", false]], "nmf (class in cuvis_ai.preprocessor.nmf)": [[64, "cuvis_ai.preprocessor.nmf.NMF", false]], "node (class in cuvis_ai.node.node)": [[54, "cuvis_ai.node.node.Node", false]], "non_printable (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.NON_PRINTABLE", false]], "numpy_array_representer() (in module cuvis_ai.utils.serializer)": [[158, "cuvis_ai.utils.serializer.numpy_array_representer", false]], "numpy_arrray_constructor() (in module cuvis_ai.utils.serializer)": [[159, "cuvis_ai.utils.serializer.numpy_arrray_constructor", false]], "numpy_float32_constructor() (in module cuvis_ai.utils.serializer)": [[160, "cuvis_ai.utils.serializer.numpy_float32_constructor", false]], "numpy_float32_representer() (in module cuvis_ai.utils.serializer)": [[161, "cuvis_ai.utils.serializer.numpy_float32_representer", false]], "open() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.open", false]], "optimizer (class in cuvis_ai.utils.nn_config)": [[138, "cuvis_ai.utils.nn_config.Optimizer", false]], "optimizer (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[73, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.optimizer", false]], "output_dim (cuvis_ai.data.basedataset.basedataset property)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.output_dim", false]], "output_dim (cuvis_ai.deciders.base_decider.basedecider property)": [[20, "cuvis_ai.deciders.base_decider.BaseDecider.output_dim", false]], "output_dim (cuvis_ai.deciders.binary_decider.binarydecider property)": [[22, "cuvis_ai.deciders.binary_decider.BinaryDecider.output_dim", false]], "output_dim (cuvis_ai.deciders.cascaded_decider.cascaded property)": [[24, "cuvis_ai.deciders.cascaded_decider.Cascaded.output_dim", false]], "output_dim (cuvis_ai.deciders.combining_decider.combiningdecider property)": [[26, "cuvis_ai.deciders.combining_decider.CombiningDecider.output_dim", false]], "output_dim (cuvis_ai.deciders.multiclass_decider.multiclassdecider property)": [[30, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.output_dim", false]], "output_dim (cuvis_ai.distance.distance.abstractdistance property)": [[33, "cuvis_ai.distance.distance.AbstractDistance.output_dim", false]], "output_dim (cuvis_ai.distance.distance.canberra property)": [[34, "cuvis_ai.distance.distance.Canberra.output_dim", false]], "output_dim (cuvis_ai.distance.distance.ecs property)": [[35, "cuvis_ai.distance.distance.ECS.output_dim", false]], "output_dim (cuvis_ai.distance.distance.euclidean property)": [[36, "cuvis_ai.distance.distance.Euclidean.output_dim", false]], "output_dim (cuvis_ai.distance.distance.gfc property)": [[37, "cuvis_ai.distance.distance.GFC.output_dim", false]], "output_dim (cuvis_ai.distance.distance.manhattan property)": [[38, "cuvis_ai.distance.distance.Manhattan.output_dim", false]], "output_dim (cuvis_ai.distance.distance.minkowski property)": [[39, "cuvis_ai.distance.distance.Minkowski.output_dim", false]], "output_dim (cuvis_ai.distance.distance.spectralangle property)": [[40, "cuvis_ai.distance.distance.SpectralAngle.output_dim", false]], "output_dim (cuvis_ai.node.node.node property)": [[54, "cuvis_ai.node.node.Node.output_dim", false]], "output_dim (cuvis_ai.preprocessor.nmf.nmf property)": [[64, "cuvis_ai.preprocessor.nmf.NMF.output_dim", false]], "output_dim (cuvis_ai.preprocessor.pca.pca property)": [[66, "cuvis_ai.preprocessor.pca.PCA.output_dim", false]], "output_dim (cuvis_ai.supervised.lda.lda property)": [[69, "cuvis_ai.supervised.lda.LDA.output_dim", false]], "output_dim (cuvis_ai.supervised.qda.qda property)": [[71, "cuvis_ai.supervised.qda.QDA.output_dim", false]], "output_dim (cuvis_ai.supervised.svm.svm property)": [[75, "cuvis_ai.supervised.svm.SVM.output_dim", false]], "output_dim (cuvis_ai.transformation.reflectance.reflectance property)": [[103, "cuvis_ai.transformation.reflectance.Reflectance.output_dim", false]], "output_dim (cuvis_ai.transformation.torch_transformation.torchtransformation property)": [[105, "cuvis_ai.transformation.torch_transformation.TorchTransformation.output_dim", false]], "output_dim (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation property)": [[107, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.output_dim", false]], "output_dim (cuvis_ai.unsupervised.gmm.gmm property)": [[128, "cuvis_ai.unsupervised.gmm.GMM.output_dim", false]], "output_dim (cuvis_ai.unsupervised.kmeans.kmeans property)": [[130, "cuvis_ai.unsupervised.kmeans.KMeans.output_dim", false]], "output_dim (cuvis_ai.unsupervised.mean_shift.meanshift property)": [[132, "cuvis_ai.unsupervised.mean_shift.MeanShift.output_dim", false]], "output_dim() (cuvis_ai.node.base.basetransformation method)": [[50, "cuvis_ai.node.base.BaseTransformation.output_dim", false]], "parse_block_mapping_first_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_mapping_first_key", false]], "parse_block_mapping_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_mapping_key", false]], "parse_block_mapping_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_mapping_value", false]], "parse_block_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_node", false]], "parse_block_node_or_indentless_sequence() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_node_or_indentless_sequence", false]], "parse_block_sequence_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_sequence_entry", false]], "parse_block_sequence_first_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_sequence_first_entry", false]], "parse_document_content() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_document_content", false]], "parse_document_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_document_end", false]], "parse_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_document_start", false]], "parse_flow_mapping_empty_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_empty_value", false]], "parse_flow_mapping_first_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_first_key", false]], "parse_flow_mapping_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_key", false]], "parse_flow_mapping_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_value", false]], "parse_flow_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_node", false]], "parse_flow_sequence_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry", false]], "parse_flow_sequence_entry_mapping_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry_mapping_end", false]], "parse_flow_sequence_entry_mapping_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry_mapping_key", false]], "parse_flow_sequence_entry_mapping_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry_mapping_value", false]], "parse_flow_sequence_first_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_first_entry", false]], "parse_implicit_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_implicit_document_start", false]], "parse_indentless_sequence_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_indentless_sequence_entry", false]], "parse_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_node", false]], "parse_stream_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_stream_start", false]], "pca (class in cuvis_ai.preprocessor.pca)": [[66, "cuvis_ai.preprocessor.pca.PCA", false]], "peek() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.peek", false]], "peek_event() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.peek_event", false]], "peek_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.peek_token", false]], "power_t (cuvis_ai.utils.nn_config.sgd attribute)": [[139, "cuvis_ai.utils.nn_config.SGD.power_t", false]], "prefix() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.prefix", false]], "prepare_anchor() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_anchor", false]], "prepare_tag() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_tag", false]], "prepare_tag_handle() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_tag_handle", false]], "prepare_tag_prefix() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_tag_prefix", false]], "prepare_version() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_version", false]], "preprocessor (class in cuvis_ai.node.base)": [[52, "cuvis_ai.node.base.Preprocessor", false]], "process_anchor() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.process_anchor", false]], "process_directives() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.process_directives", false]], "process_empty_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.process_empty_scalar", false]], "process_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.process_scalar", false]], "process_tag() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.process_tag", false]], "pytorch_args (cuvis_ai.utils.nn_config.adam property)": [[137, "cuvis_ai.utils.nn_config.Adam.pytorch_args", false]], "pytorch_args (cuvis_ai.utils.nn_config.optimizer property)": [[138, "cuvis_ai.utils.nn_config.Optimizer.pytorch_args", false]], "pytorch_args (cuvis_ai.utils.nn_config.sgd property)": [[139, "cuvis_ai.utils.nn_config.SGD.pytorch_args", false]], "qda (class in cuvis_ai.supervised.qda)": [[71, "cuvis_ai.supervised.qda.QDA", false]], "reflectance (class in cuvis_ai.transformation.reflectance)": [[103, "cuvis_ai.transformation.reflectance.Reflectance", false]], "remove_possible_simple_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.remove_possible_simple_key", false]], "represent() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent", false]], "represent_binary() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_binary", false]], "represent_bool() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_bool", false]], "represent_data() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_data", false]], "represent_date() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_date", false]], "represent_datetime() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_datetime", false]], "represent_dict() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_dict", false]], "represent_float() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_float", false]], "represent_int() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_int", false]], "represent_list() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_list", false]], "represent_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_mapping", false]], "represent_none() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_none", false]], "represent_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_scalar", false]], "represent_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_sequence", false]], "represent_set() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_set", false]], "represent_str() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_str", false]], "represent_undefined() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_undefined", false]], "represent_yaml_object() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_yaml_object", false]], "resolve() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.resolve", false]], "resolve() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.resolve", false]], "rle2mask() (in module cuvis_ai.data.labels2tv)": [[6, "cuvis_ai.data.Labels2TV.RLE2mask", false]], "run() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.run", false]], "run() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.run", false]], "run() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.run", false]], "run() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.run", false]], "run() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.run", false]], "run() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.run", false]], "run() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.run", false]], "run() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.run", false]], "run() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.run", false]], "run() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.run", false]], "run() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.run", false]], "run() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.run", false]], "run() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.run", false]], "run() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.run", false]], "run() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.run", false]], "run() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.run", false]], "save_possible_simple_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.save_possible_simple_key", false]], "save_to_file() (cuvis_ai.pipeline.graph.graph method)": [[61, "cuvis_ai.pipeline.graph.Graph.save_to_file", false]], "scan_anchor() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_anchor", false]], "scan_block_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar", false]], "scan_block_scalar_breaks() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_breaks", false]], "scan_block_scalar_ignored_line() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_ignored_line", false]], "scan_block_scalar_indentation() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_indentation", false]], "scan_block_scalar_indicators() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_indicators", false]], "scan_directive() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_directive", false]], "scan_directive_ignored_line() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_directive_ignored_line", false]], "scan_directive_name() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_directive_name", false]], "scan_flow_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar", false]], "scan_flow_scalar_breaks() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar_breaks", false]], "scan_flow_scalar_non_spaces() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar_non_spaces", false]], "scan_flow_scalar_spaces() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar_spaces", false]], "scan_line_break() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_line_break", false]], "scan_plain() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_plain", false]], "scan_plain_spaces() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_plain_spaces", false]], "scan_tag() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag", false]], "scan_tag_directive_handle() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_directive_handle", false]], "scan_tag_directive_prefix() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_directive_prefix", false]], "scan_tag_directive_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_directive_value", false]], "scan_tag_handle() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_handle", false]], "scan_tag_uri() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_uri", false]], "scan_to_next_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_to_next_token", false]], "scan_uri_escapes() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_uri_escapes", false]], "scan_yaml_directive_number() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_yaml_directive_number", false]], "scan_yaml_directive_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_yaml_directive_value", false]], "score() (cuvis_ai.distance.distance.abstractdistance method)": [[33, "cuvis_ai.distance.distance.AbstractDistance.score", false]], "score() (cuvis_ai.distance.distance.canberra static method)": [[34, "cuvis_ai.distance.distance.Canberra.score", false]], "score() (cuvis_ai.distance.distance.ecs method)": [[35, "cuvis_ai.distance.distance.ECS.score", false]], "score() (cuvis_ai.distance.distance.euclidean static method)": [[36, "cuvis_ai.distance.distance.Euclidean.score", false]], "score() (cuvis_ai.distance.distance.gfc method)": [[37, "cuvis_ai.distance.distance.GFC.score", false]], "score() (cuvis_ai.distance.distance.manhattan static method)": [[38, "cuvis_ai.distance.distance.Manhattan.score", false]], "score() (cuvis_ai.distance.distance.minkowski method)": [[39, "cuvis_ai.distance.distance.Minkowski.score", false]], "score() (cuvis_ai.distance.distance.spectralangle static method)": [[40, "cuvis_ai.distance.distance.SpectralAngle.score", false]], "serialize() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.serialize", false]], "serialize() (cuvis_ai.deciders.base_decider.basedecider method)": [[20, "cuvis_ai.deciders.base_decider.BaseDecider.serialize", false]], "serialize() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[22, "cuvis_ai.deciders.binary_decider.BinaryDecider.serialize", false]], "serialize() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[24, "cuvis_ai.deciders.cascaded_decider.Cascaded.serialize", false]], "serialize() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[26, "cuvis_ai.deciders.combining_decider.CombiningDecider.serialize", false]], "serialize() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[30, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.serialize", false]], "serialize() (cuvis_ai.distance.distance.abstractdistance method)": [[33, "cuvis_ai.distance.distance.AbstractDistance.serialize", false]], "serialize() (cuvis_ai.distance.distance.canberra method)": [[34, "cuvis_ai.distance.distance.Canberra.serialize", false]], "serialize() (cuvis_ai.distance.distance.ecs method)": [[35, "cuvis_ai.distance.distance.ECS.serialize", false]], "serialize() (cuvis_ai.distance.distance.euclidean method)": [[36, "cuvis_ai.distance.distance.Euclidean.serialize", false]], "serialize() (cuvis_ai.distance.distance.gfc method)": [[37, "cuvis_ai.distance.distance.GFC.serialize", false]], "serialize() (cuvis_ai.distance.distance.manhattan method)": [[38, "cuvis_ai.distance.distance.Manhattan.serialize", false]], "serialize() (cuvis_ai.distance.distance.minkowski method)": [[39, "cuvis_ai.distance.distance.Minkowski.serialize", false]], "serialize() (cuvis_ai.distance.distance.spectralangle method)": [[40, "cuvis_ai.distance.distance.SpectralAngle.serialize", false]], "serialize() (cuvis_ai.node.base.basetransformation method)": [[50, "cuvis_ai.node.base.BaseTransformation.serialize", false]], "serialize() (cuvis_ai.node.node.node method)": [[54, "cuvis_ai.node.node.Node.serialize", false]], "serialize() (cuvis_ai.pipeline.graph.graph method)": [[61, "cuvis_ai.pipeline.graph.Graph.serialize", false]], "serialize() (cuvis_ai.preprocessor.nmf.nmf method)": [[64, "cuvis_ai.preprocessor.nmf.NMF.serialize", false]], "serialize() (cuvis_ai.preprocessor.pca.pca method)": [[66, "cuvis_ai.preprocessor.pca.PCA.serialize", false]], "serialize() (cuvis_ai.supervised.lda.lda method)": [[69, "cuvis_ai.supervised.lda.LDA.serialize", false]], "serialize() (cuvis_ai.supervised.qda.qda method)": [[71, "cuvis_ai.supervised.qda.QDA.serialize", false]], "serialize() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[73, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.serialize", false]], "serialize() (cuvis_ai.supervised.svm.svm method)": [[75, "cuvis_ai.supervised.svm.SVM.serialize", false]], "serialize() (cuvis_ai.transformation.reflectance.reflectance method)": [[103, "cuvis_ai.transformation.reflectance.Reflectance.serialize", false]], "serialize() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[105, "cuvis_ai.transformation.torch_transformation.TorchTransformation.serialize", false]], "serialize() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[107, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.serialize", false]], "serialize() (cuvis_ai.unsupervised.gmm.gmm method)": [[128, "cuvis_ai.unsupervised.gmm.GMM.serialize", false]], "serialize() (cuvis_ai.unsupervised.kmeans.kmeans method)": [[130, "cuvis_ai.unsupervised.kmeans.KMeans.serialize", false]], "serialize() (cuvis_ai.unsupervised.mean_shift.meanshift method)": [[132, "cuvis_ai.unsupervised.mean_shift.MeanShift.serialize", false]], "serialize() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.serialize", false]], "serialize() (cuvis_ai.utils.serializer.yamlserializer method)": [[157, "cuvis_ai.utils.serializer.YamlSerializer.serialize", false]], "serialize_node() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.serialize_node", false]], "serialize_node() (cuvis_ai.utils.serializer.serializer method)": [[156, "cuvis_ai.utils.serializer.Serializer.serialize_node", false]], "serializer (class in cuvis_ai.utils.serializer)": [[156, "cuvis_ai.utils.serializer.Serializer", false]], "set_datatype() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.set_datatype", false]], "setup() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.setUp", false]], "setup() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[81, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.setUp", false]], "setup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.setUp", false]], "setup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.setUp", false]], "setup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.setUp", false]], "setup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.setUp", false]], "setup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[100, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.setUp", false]], "setupclass() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.setUpClass", false]], "setupclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.setUpClass", false]], "setupclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testpreprocessornmf class method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testpreprocessorpca class method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testsupervisedlda class method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testsupervisedqda class method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testsupervisedsvm class method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testtransformationreflectance class method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testtransformationtorch class method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testtransformationtorchvision class method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testunsupervisedgmm class method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testunsupervisedkmeans class method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift class method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.setUpClass", false]], "setupclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.setUpClass", false]], "setupclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.setUpClass", false]], "sgd (class in cuvis_ai.utils.nn_config)": [[139, "cuvis_ai.utils.nn_config.SGD", false]], "shortdescription() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.shortDescription", false]], "skiptest() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.skipTest", false]], "skiptest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.skipTest", false]], "skiptest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.skipTest", false]], "skiptest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.skipTest", false]], "skiptest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.skipTest", false]], "sklearn_args (cuvis_ai.utils.nn_config.adam property)": [[137, "cuvis_ai.utils.nn_config.Adam.sklearn_args", false]], "sklearn_args (cuvis_ai.utils.nn_config.optimizer property)": [[138, "cuvis_ai.utils.nn_config.Optimizer.sklearn_args", false]], "sklearn_args (cuvis_ai.utils.nn_config.sgd property)": [[139, "cuvis_ai.utils.nn_config.SGD.sklearn_args", false]], "skorchsupervised (class in cuvis_ai.supervised.skorch_supervised)": [[73, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised", false]], "solver (cuvis_ai.supervised.lda.lda attribute)": [[69, "cuvis_ai.supervised.lda.LDA.solver", false]], "spectra_to_array() (cuvis_ai.distance.distance.abstractdistance static method)": [[33, "cuvis_ai.distance.distance.AbstractDistance.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.canberra static method)": [[34, "cuvis_ai.distance.distance.Canberra.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.ecs static method)": [[35, "cuvis_ai.distance.distance.ECS.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.euclidean static method)": [[36, "cuvis_ai.distance.distance.Euclidean.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.gfc static method)": [[37, "cuvis_ai.distance.distance.GFC.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.manhattan static method)": [[38, "cuvis_ai.distance.distance.Manhattan.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.minkowski static method)": [[39, "cuvis_ai.distance.distance.Minkowski.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.spectralangle static method)": [[40, "cuvis_ai.distance.distance.SpectralAngle.spectra_to_array", false]], "spectralangle (class in cuvis_ai.distance.distance)": [[40, "cuvis_ai.distance.distance.SpectralAngle", false]], "stale_possible_simple_keys() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.stale_possible_simple_keys", false]], "subtest() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.subTest", false]], "subtest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.subTest", false]], "subtest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.subTest", false]], "subtest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.subTest", false]], "subtest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.subTest", false]], "svm (class in cuvis_ai.supervised.svm)": [[75, "cuvis_ai.supervised.svm.SVM", false]], "teardown() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.tearDown", false]], "teardown() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.tearDown", false]], "teardown() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.tearDown", false]], "teardown() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.tearDown", false]], "teardown() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.tearDown", false]], "teardownclass() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testpreprocessornmf class method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testpreprocessorpca class method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testsupervisedlda class method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testsupervisedqda class method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testsupervisedsvm class method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testtransformationreflectance class method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testtransformationtorch class method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testtransformationtorchvision class method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testunsupervisedgmm class method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testunsupervisedkmeans class method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift class method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.tearDownClass", false]], "test_correct_input_dim() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[81, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[100, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_correct_input_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[81, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[100, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_correct_output_dim", false]], "test_get_shape_without_batch() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.test_get_shape_without_batch", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[81, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[100, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_incorrect_input_dim", false]], "test_initialization() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[81, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[100, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_initialization", false]], "test_passthrough() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[81, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[100, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_passthrough", false]], "test_serialization() (cuvis_ai.test.test_serialization.testnodeserialization method)": [[85, "cuvis_ai.test.test_serialization.TestNodeSerialization.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testsupervisedqda method)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testsupervisedsvm method)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.test_serialization", false]], "testnodeserialization (class in cuvis_ai.test.test_serialization)": [[85, "cuvis_ai.test.test_serialization.TestNodeSerialization", false]], "testnumpyutils (class in cuvis_ai.test.test_numpy_utils)": [[78, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils", false]], "testpreprocessednode (class in cuvis_ai.test.test_preprocessor_structural)": [[81, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode", false]], "testpreprocessornmf (class in cuvis_ai.test.test_serialization)": [[86, "cuvis_ai.test.test_serialization.TestPreprocessorNMF", false]], "testpreprocessorpca (class in cuvis_ai.test.test_serialization)": [[87, "cuvis_ai.test.test_serialization.TestPreprocessorPCA", false]], "testsupervisedlda (class in cuvis_ai.test.test_serialization)": [[88, "cuvis_ai.test.test_serialization.TestSupervisedLDA", false]], "testsupervisedqda (class in cuvis_ai.test.test_serialization)": [[89, "cuvis_ai.test.test_serialization.TestSupervisedQDA", false]], "testsupervisedsvm (class in cuvis_ai.test.test_serialization)": [[90, "cuvis_ai.test.test_serialization.TestSupervisedSVM", false]], "testtransformationreflectance (class in cuvis_ai.test.test_serialization)": [[91, "cuvis_ai.test.test_serialization.TestTransformationReflectance", false]], "testtransformationtorch (class in cuvis_ai.test.test_serialization)": [[92, "cuvis_ai.test.test_serialization.TestTransformationTorch", false]], "testtransformationtorchvision (class in cuvis_ai.test.test_serialization)": [[93, "cuvis_ai.test.test_serialization.TestTransformationTorchVision", false]], "testunsupervisedgmm (class in cuvis_ai.test.test_serialization)": [[94, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM", false]], "testunsupervisedgmm (class in cuvis_ai.test.test_unsupervised_structural)": [[98, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM", false]], "testunsupervisedkmeans (class in cuvis_ai.test.test_serialization)": [[95, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans", false]], "testunsupervisedkmeans (class in cuvis_ai.test.test_unsupervised_structural)": [[99, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans", false]], "testunsupervisedmeanshift (class in cuvis_ai.test.test_serialization)": [[96, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift", false]], "testunsupervisednmf (class in cuvis_ai.test.test_preprocessor_structural)": [[82, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF", false]], "testunsupervisednode (class in cuvis_ai.test.test_unsupervised_structural)": [[100, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode", false]], "testunsupervisedpca (class in cuvis_ai.test.test_preprocessor_structural)": [[83, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA", false]], "timestamp_regexp (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.timestamp_regexp", false]], "torchtransformation (class in cuvis_ai.transformation.torch_transformation)": [[105, "cuvis_ai.transformation.torch_transformation.TorchTransformation", false]], "torchvisiontransformation (class in cuvis_ai.transformation.torchvision_transformation)": [[107, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation", false]], "train() (cuvis_ai.pipeline.graph.graph method)": [[61, "cuvis_ai.pipeline.graph.Graph.train", false]], "training (cuvis_ai.tv_transforms.bandpass attribute)": [[112, "cuvis_ai.tv_transforms.Bandpass.training", false]], "training (cuvis_ai.tv_transforms.multibandpass attribute)": [[116, "cuvis_ai.tv_transforms.MultiBandpass.training", false]], "training (cuvis_ai.tv_transforms.normalizestddev attribute)": [[120, "cuvis_ai.tv_transforms.NormalizeStdDev.training", false]], "training (cuvis_ai.tv_transforms.normalizetofloat attribute)": [[124, "cuvis_ai.tv_transforms.NormalizeToFloat.training", false]], "unflatten_batch_and_labels() (in module cuvis_ai.utils.numpy_utils)": [[149, "cuvis_ai.utils.numpy_utils.unflatten_batch_and_labels", false]], "unflatten_batch_and_spatial() (in module cuvis_ai.utils.numpy_utils)": [[150, "cuvis_ai.utils.numpy_utils.unflatten_batch_and_spatial", false]], "unflatten_labels() (in module cuvis_ai.utils.numpy_utils)": [[151, "cuvis_ai.utils.numpy_utils.unflatten_labels", false]], "unflatten_spatial() (in module cuvis_ai.utils.numpy_utils)": [[152, "cuvis_ai.utils.numpy_utils.unflatten_spatial", false]], "unwind_indent() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.unwind_indent", false]], "update() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.update", false]], "update_raw() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.update_raw", false]], "verbose (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[73, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.verbose", false]], "visualize_features() (in module cuvis_ai.utils.visualize)": [[165, "cuvis_ai.utils.visualize.visualize_features", false]], "visualize_image() (in module cuvis_ai.utils.visualize)": [[166, "cuvis_ai.utils.visualize.visualize_image", false]], "write_double_quoted() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_double_quoted", false]], "write_folded() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_folded", false]], "write_indent() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_indent", false]], "write_indicator() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_indicator", false]], "write_line_break() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_line_break", false]], "write_literal() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_literal", false]], "write_plain() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_plain", false]], "write_single_quoted() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_single_quoted", false]], "write_stream_end() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_stream_end", false]], "write_stream_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_stream_start", false]], "write_tag_directive() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_tag_directive", false]], "write_version_directive() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_version_directive", false]], "yaml_constructors (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_constructors", false]], "yaml_implicit_resolvers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_implicit_resolvers", false]], "yaml_implicit_resolvers (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_implicit_resolvers", false]], "yaml_multi_constructors (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_multi_constructors", false]], "yaml_multi_representers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_multi_representers", false]], "yaml_path_resolvers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_path_resolvers", false]], "yaml_path_resolvers (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[155, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_path_resolvers", false]], "yaml_representers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[154, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_representers", false]], "yamlserializer (class in cuvis_ai.utils.serializer)": [[157, "cuvis_ai.utils.serializer.YamlSerializer", false]]}, "objects": {"": [[0, 0, 0, "-", "cuvis_ai"]], "cuvis_ai": [[1, 0, 0, "-", "data"], [18, 0, 0, "-", "deciders"], [31, 0, 0, "-", "distance"], [41, 0, 0, "-", "node"], [59, 0, 0, "-", "pipeline"], [62, 0, 0, "-", "preprocessor"], [67, 0, 0, "-", "supervised"], [76, 0, 0, "-", "test"], [101, 0, 0, "-", "transformation"], [108, 0, 0, "-", "tv_transforms"], [126, 0, 0, "-", "unsupervised"], [133, 0, 0, "-", "utils"]], "cuvis_ai.data": [[2, 0, 0, "-", "BaseDataSet"], [4, 0, 0, "-", "CuvisDataSet"], [5, 0, 0, "-", "Labels2TV"], [8, 0, 0, "-", "LiveCuvisDataLoader"], [9, 0, 0, "-", "MetadataUtils"], [12, 0, 0, "-", "NumpyDataSet"], [13, 0, 0, "-", "OutputFormat"], [14, 0, 0, "-", "PublicDataSets"], [15, 0, 0, "-", "utils_dataloader"]], "cuvis_ai.data.BaseDataSet": [[3, 1, 1, "", "BaseDataSet"]], "cuvis_ai.data.BaseDataSet.BaseDataSet": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "check_input_dim"], [3, 2, 1, "", "check_output_dim"], [3, 2, 1, "", "extra_repr"], [3, 2, 1, "", "forward"], [3, 2, 1, "", "get_datatype"], [3, 3, 1, "", "input_dim"], [3, 2, 1, "", "load"], [3, 3, 1, "", "output_dim"], [3, 2, 1, "", "serialize"], [3, 2, 1, "", "set_datatype"]], "cuvis_ai.data.Labels2TV": [[6, 4, 1, "", "RLE2mask"], [7, 4, 1, "", "convert_COCO2TV"]], "cuvis_ai.data.MetadataUtils": [[10, 5, 1, "", "C_ATTRIB_LIST"], [11, 4, 1, "", "metadataInit"]], "cuvis_ai.data.utils_dataloader": [[16, 4, 1, "", "cuvis_collate"], [17, 4, 1, "", "get_dataloader_from_dataset"]], "cuvis_ai.deciders": [[19, 0, 0, "-", "base_decider"], [21, 0, 0, "-", "binary_decider"], [23, 0, 0, "-", "cascaded_decider"], [25, 0, 0, "-", "combining_decider"], [29, 0, 0, "-", "multiclass_decider"]], "cuvis_ai.deciders.base_decider": [[20, 1, 1, "", "BaseDecider"]], "cuvis_ai.deciders.base_decider.BaseDecider": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "check_input_dim"], [20, 2, 1, "", "check_output_dim"], [20, 2, 1, "", "fit"], [20, 2, 1, "", "forward"], [20, 3, 1, "", "input_dim"], [20, 2, 1, "", "load"], [20, 3, 1, "", "output_dim"], [20, 2, 1, "", "serialize"]], "cuvis_ai.deciders.binary_decider": [[22, 1, 1, "", "BinaryDecider"]], "cuvis_ai.deciders.binary_decider.BinaryDecider": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "check_input_dim"], [22, 2, 1, "", "check_output_dim"], [22, 2, 1, "", "fit"], [22, 2, 1, "", "forward"], [22, 3, 1, "", "input_dim"], [22, 2, 1, "", "load"], [22, 3, 1, "", "output_dim"], [22, 2, 1, "", "serialize"]], "cuvis_ai.deciders.cascaded_decider": [[24, 1, 1, "", "Cascaded"]], "cuvis_ai.deciders.cascaded_decider.Cascaded": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "check_input_dim"], [24, 2, 1, "", "check_output_dim"], [24, 2, 1, "", "fit"], [24, 2, 1, "", "forward"], [24, 3, 1, "", "input_dim"], [24, 2, 1, "", "load"], [24, 3, 1, "", "output_dim"], [24, 2, 1, "", "serialize"]], "cuvis_ai.deciders.combining_decider": [[26, 1, 1, "", "CombiningDecider"], [27, 4, 1, "", "all_agree"], [28, 4, 1, "", "at_least_n_agree"]], "cuvis_ai.deciders.combining_decider.CombiningDecider": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "check_input_dim"], [26, 2, 1, "", "check_output_dim"], [26, 2, 1, "", "fit"], [26, 2, 1, "", "forward"], [26, 3, 1, "", "input_dim"], [26, 2, 1, "", "load"], [26, 3, 1, "", "output_dim"], [26, 2, 1, "", "serialize"]], "cuvis_ai.deciders.multiclass_decider": [[30, 1, 1, "", "MultiClassDecider"]], "cuvis_ai.deciders.multiclass_decider.MultiClassDecider": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "check_input_dim"], [30, 2, 1, "", "check_output_dim"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "forward"], [30, 3, 1, "", "input_dim"], [30, 2, 1, "", "load"], [30, 3, 1, "", "output_dim"], [30, 2, 1, "", "serialize"]], "cuvis_ai.distance": [[32, 0, 0, "-", "distance"]], "cuvis_ai.distance.distance": [[33, 1, 1, "", "AbstractDistance"], [34, 1, 1, "", "Canberra"], [35, 1, 1, "", "ECS"], [36, 1, 1, "", "Euclidean"], [37, 1, 1, "", "GFC"], [38, 1, 1, "", "Manhattan"], [39, 1, 1, "", "Minkowski"], [40, 1, 1, "", "SpectralAngle"]], "cuvis_ai.distance.distance.AbstractDistance": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "check_input_dim"], [33, 2, 1, "", "check_output_dim"], [33, 2, 1, "", "fit"], [33, 2, 1, "", "forward"], [33, 3, 1, "", "input_dim"], [33, 2, 1, "", "load"], [33, 3, 1, "", "output_dim"], [33, 2, 1, "", "score"], [33, 2, 1, "", "serialize"], [33, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Canberra": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "check_input_dim"], [34, 2, 1, "", "check_output_dim"], [34, 2, 1, "", "fit"], [34, 2, 1, "", "forward"], [34, 3, 1, "", "input_dim"], [34, 2, 1, "", "load"], [34, 3, 1, "", "output_dim"], [34, 2, 1, "", "score"], [34, 2, 1, "", "serialize"], [34, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.ECS": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "check_input_dim"], [35, 2, 1, "", "check_output_dim"], [35, 2, 1, "", "fit"], [35, 2, 1, "", "forward"], [35, 3, 1, "", "input_dim"], [35, 2, 1, "", "load"], [35, 3, 1, "", "output_dim"], [35, 2, 1, "", "score"], [35, 2, 1, "", "serialize"], [35, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Euclidean": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "check_input_dim"], [36, 2, 1, "", "check_output_dim"], [36, 2, 1, "", "fit"], [36, 2, 1, "", "forward"], [36, 3, 1, "", "input_dim"], [36, 2, 1, "", "load"], [36, 3, 1, "", "output_dim"], [36, 2, 1, "", "score"], [36, 2, 1, "", "serialize"], [36, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.GFC": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "check_input_dim"], [37, 2, 1, "", "check_output_dim"], [37, 2, 1, "", "fit"], [37, 2, 1, "", "forward"], [37, 3, 1, "", "input_dim"], [37, 2, 1, "", "load"], [37, 3, 1, "", "output_dim"], [37, 2, 1, "", "score"], [37, 2, 1, "", "serialize"], [37, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Manhattan": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "check_input_dim"], [38, 2, 1, "", "check_output_dim"], [38, 2, 1, "", "fit"], [38, 2, 1, "", "forward"], [38, 3, 1, "", "input_dim"], [38, 2, 1, "", "load"], [38, 3, 1, "", "output_dim"], [38, 2, 1, "", "score"], [38, 2, 1, "", "serialize"], [38, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Minkowski": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "check_input_dim"], [39, 2, 1, "", "check_output_dim"], [39, 2, 1, "", "fit"], [39, 2, 1, "", "forward"], [39, 3, 1, "", "input_dim"], [39, 2, 1, "", "load"], [39, 3, 1, "", "output_dim"], [39, 2, 1, "", "score"], [39, 2, 1, "", "serialize"], [39, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.SpectralAngle": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "check_input_dim"], [40, 2, 1, "", "check_output_dim"], [40, 2, 1, "", "fit"], [40, 2, 1, "", "forward"], [40, 3, 1, "", "input_dim"], [40, 2, 1, "", "load"], [40, 3, 1, "", "output_dim"], [40, 2, 1, "", "score"], [40, 2, 1, "", "serialize"], [40, 2, 1, "", "spectra_to_array"]], "cuvis_ai.node": [[42, 0, 0, "-", "Consumers"], [48, 0, 0, "-", "base"], [53, 0, 0, "-", "node"], [55, 0, 0, "-", "sklearn"], [56, 0, 0, "-", "torch"], [57, 0, 0, "-", "wrap"]], "cuvis_ai.node.Consumers": [[43, 1, 1, "", "CubeConsumer"], [44, 1, 1, "", "LabelConsumer"], [45, 1, 1, "", "LabelConsumerInference"], [46, 1, 1, "", "MetadataConsumer"], [47, 1, 1, "", "MetadataConsumerInference"]], "cuvis_ai.node.Consumers.CubeConsumer": [[43, 2, 1, "", "__init__"]], "cuvis_ai.node.Consumers.LabelConsumer": [[44, 2, 1, "", "__init__"]], "cuvis_ai.node.Consumers.LabelConsumerInference": [[45, 2, 1, "", "__init__"]], "cuvis_ai.node.Consumers.MetadataConsumer": [[46, 2, 1, "", "__init__"]], "cuvis_ai.node.Consumers.MetadataConsumerInference": [[47, 2, 1, "", "__init__"]], "cuvis_ai.node.base": [[49, 1, 1, "", "BaseSupervised"], [50, 1, 1, "", "BaseTransformation"], [51, 1, 1, "", "BaseUnsupervised"], [52, 1, 1, "", "Preprocessor"]], "cuvis_ai.node.base.BaseSupervised": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "fit"], [49, 2, 1, "", "forward"]], "cuvis_ai.node.base.BaseTransformation": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "forward"], [50, 2, 1, "", "input_dim"], [50, 2, 1, "", "load"], [50, 2, 1, "", "output_dim"], [50, 2, 1, "", "serialize"]], "cuvis_ai.node.base.BaseUnsupervised": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "forward"]], "cuvis_ai.node.base.Preprocessor": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "fit"]], "cuvis_ai.node.node": [[54, 1, 1, "", "Node"]], "cuvis_ai.node.node.Node": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "check_input_dim"], [54, 2, 1, "", "check_output_dim"], [54, 2, 1, "", "forward"], [54, 3, 1, "", "input_dim"], [54, 2, 1, "", "load"], [54, 3, 1, "", "output_dim"], [54, 2, 1, "", "serialize"]], "cuvis_ai.node.wrap": [[58, 4, 1, "", "make_node"]], "cuvis_ai.pipeline": [[60, 0, 0, "-", "graph"]], "cuvis_ai.pipeline.graph": [[61, 1, 1, "", "Graph"]], "cuvis_ai.pipeline.graph.Graph": [[61, 2, 1, "", "__init__"], [61, 2, 1, "", "add_base_node"], [61, 2, 1, "", "add_edge"], [61, 2, 1, "", "add_node"], [61, 2, 1, "", "delete_node"], [61, 2, 1, "", "fit"], [61, 2, 1, "", "forward"], [61, 2, 1, "", "load"], [61, 2, 1, "", "load_from_file"], [61, 2, 1, "", "save_to_file"], [61, 2, 1, "", "serialize"], [61, 2, 1, "", "train"]], "cuvis_ai.preprocessor": [[63, 0, 0, "-", "nmf"], [65, 0, 0, "-", "pca"]], "cuvis_ai.preprocessor.nmf": [[64, 1, 1, "", "NMF"]], "cuvis_ai.preprocessor.nmf.NMF": [[64, 2, 1, "", "__init__"], [64, 2, 1, "", "check_input_dim"], [64, 2, 1, "", "check_output_dim"], [64, 2, 1, "", "fit"], [64, 2, 1, "", "forward"], [64, 3, 1, "", "input_dim"], [64, 2, 1, "", "load"], [64, 3, 1, "", "output_dim"], [64, 2, 1, "", "serialize"]], "cuvis_ai.preprocessor.pca": [[66, 1, 1, "", "PCA"]], "cuvis_ai.preprocessor.pca.PCA": [[66, 2, 1, "", "__init__"], [66, 2, 1, "", "check_input_dim"], [66, 2, 1, "", "check_output_dim"], [66, 2, 1, "", "fit"], [66, 2, 1, "", "forward"], [66, 3, 1, "", "input_dim"], [66, 2, 1, "", "load"], [66, 3, 1, "", "output_dim"], [66, 2, 1, "", "serialize"]], "cuvis_ai.supervised": [[68, 0, 0, "-", "lda"], [70, 0, 0, "-", "qda"], [72, 0, 0, "-", "skorch_supervised"], [74, 0, 0, "-", "svm"]], "cuvis_ai.supervised.lda": [[69, 1, 1, "", "LDA"]], "cuvis_ai.supervised.lda.LDA": [[69, 2, 1, "", "__init__"], [69, 2, 1, "", "check_input_dim"], [69, 2, 1, "", "check_output_dim"], [69, 2, 1, "", "fit"], [69, 2, 1, "", "forward"], [69, 3, 1, "", "input_dim"], [69, 2, 1, "", "load"], [69, 6, 1, "", "n_components"], [69, 3, 1, "", "output_dim"], [69, 2, 1, "", "serialize"], [69, 6, 1, "", "solver"]], "cuvis_ai.supervised.qda": [[71, 1, 1, "", "QDA"]], "cuvis_ai.supervised.qda.QDA": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "check_input_dim"], [71, 2, 1, "", "check_output_dim"], [71, 2, 1, "", "fit"], [71, 2, 1, "", "forward"], [71, 3, 1, "", "input_dim"], [71, 2, 1, "", "load"], [71, 3, 1, "", "output_dim"], [71, 2, 1, "", "serialize"]], "cuvis_ai.supervised.skorch_supervised": [[73, 1, 1, "", "SkorchSupervised"]], "cuvis_ai.supervised.skorch_supervised.SkorchSupervised": [[73, 2, 1, "", "__init__"], [73, 6, 1, "", "epochs"], [73, 2, 1, "", "fit"], [73, 2, 1, "", "forward"], [73, 2, 1, "", "load"], [73, 6, 1, "", "model"], [73, 6, 1, "", "model_args"], [73, 6, 1, "", "optimizer"], [73, 2, 1, "", "serialize"], [73, 6, 1, "", "verbose"]], "cuvis_ai.supervised.svm": [[75, 1, 1, "", "SVM"]], "cuvis_ai.supervised.svm.SVM": [[75, 2, 1, "", "__init__"], [75, 2, 1, "", "check_input_dim"], [75, 2, 1, "", "check_output_dim"], [75, 2, 1, "", "fit"], [75, 2, 1, "", "forward"], [75, 3, 1, "", "input_dim"], [75, 2, 1, "", "load"], [75, 3, 1, "", "output_dim"], [75, 2, 1, "", "serialize"]], "cuvis_ai.test": [[77, 0, 0, "-", "test_numpy_utils"], [79, 0, 0, "-", "test_pipeline_graph"], [80, 0, 0, "-", "test_preprocessor_structural"], [84, 0, 0, "-", "test_serialization"], [97, 0, 0, "-", "test_unsupervised_structural"]], "cuvis_ai.test.test_numpy_utils": [[78, 1, 1, "", "TestNumpyUtils"]], "cuvis_ai.test.test_numpy_utils.TestNumpyUtils": [[78, 2, 1, "", "__init__"], [78, 2, 1, "", "addClassCleanup"], [78, 2, 1, "", "addCleanup"], [78, 2, 1, "", "addTypeEqualityFunc"], [78, 2, 1, "", "assertAlmostEqual"], [78, 2, 1, "", "assertAlmostEquals"], [78, 2, 1, "", "assertCountEqual"], [78, 2, 1, "", "assertDictContainsSubset"], [78, 2, 1, "", "assertDictEqual"], [78, 2, 1, "", "assertEqual"], [78, 2, 1, "", "assertEquals"], [78, 2, 1, "", "assertFalse"], [78, 2, 1, "", "assertGreater"], [78, 2, 1, "", "assertGreaterEqual"], [78, 2, 1, "", "assertIn"], [78, 2, 1, "", "assertIs"], [78, 2, 1, "", "assertIsInstance"], [78, 2, 1, "", "assertIsNone"], [78, 2, 1, "", "assertIsNot"], [78, 2, 1, "", "assertIsNotNone"], [78, 2, 1, "", "assertLess"], [78, 2, 1, "", "assertLessEqual"], [78, 2, 1, "", "assertListEqual"], [78, 2, 1, "", "assertLogs"], [78, 2, 1, "", "assertMultiLineEqual"], [78, 2, 1, "", "assertNoLogs"], [78, 2, 1, "", "assertNotAlmostEqual"], [78, 2, 1, "", "assertNotAlmostEquals"], [78, 2, 1, "", "assertNotEqual"], [78, 2, 1, "", "assertNotEquals"], [78, 2, 1, "", "assertNotIn"], [78, 2, 1, "", "assertNotIsInstance"], [78, 2, 1, "", "assertNotRegex"], [78, 2, 1, "", "assertNotRegexpMatches"], [78, 2, 1, "", "assertRaises"], [78, 2, 1, "", "assertRaisesRegex"], [78, 2, 1, "", "assertRaisesRegexp"], [78, 2, 1, "", "assertRegex"], [78, 2, 1, "", "assertRegexpMatches"], [78, 2, 1, "", "assertSequenceEqual"], [78, 2, 1, "", "assertSetEqual"], [78, 2, 1, "", "assertTrue"], [78, 2, 1, "", "assertTupleEqual"], [78, 2, 1, "", "assertWarns"], [78, 2, 1, "", "assertWarnsRegex"], [78, 2, 1, "", "assert_"], [78, 2, 1, "", "countTestCases"], [78, 2, 1, "", "debug"], [78, 2, 1, "", "defaultTestResult"], [78, 2, 1, "", "doClassCleanups"], [78, 2, 1, "", "doCleanups"], [78, 2, 1, "", "fail"], [78, 2, 1, "", "failIf"], [78, 2, 1, "", "failIfAlmostEqual"], [78, 2, 1, "", "failIfEqual"], [78, 2, 1, "", "failUnless"], [78, 2, 1, "", "failUnlessAlmostEqual"], [78, 2, 1, "", "failUnlessEqual"], [78, 2, 1, "", "failUnlessRaises"], [78, 6, 1, "", "failureException"], [78, 2, 1, "", "id"], [78, 6, 1, "", "longMessage"], [78, 6, 1, "", "maxDiff"], [78, 2, 1, "", "run"], [78, 2, 1, "", "setUp"], [78, 2, 1, "", "setUpClass"], [78, 2, 1, "", "shortDescription"], [78, 2, 1, "", "skipTest"], [78, 2, 1, "", "subTest"], [78, 2, 1, "", "tearDown"], [78, 2, 1, "", "tearDownClass"], [78, 2, 1, "", "test_get_shape_without_batch"]], "cuvis_ai.test.test_preprocessor_structural": [[81, 1, 1, "", "TestPreprocessedNode"], [82, 1, 1, "", "TestUnsupervisedNMF"], [83, 1, 1, "", "TestUnsupervisedPCA"]], "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "setUp"], [81, 2, 1, "", "test_correct_input_dim"], [81, 2, 1, "", "test_correct_output_dim"], [81, 2, 1, "", "test_incorrect_input_dim"], [81, 2, 1, "", "test_initialization"], [81, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF": [[82, 2, 1, "", "__init__"], [82, 2, 1, "", "addClassCleanup"], [82, 2, 1, "", "addCleanup"], [82, 2, 1, "", "addTypeEqualityFunc"], [82, 2, 1, "", "assertAlmostEqual"], [82, 2, 1, "", "assertAlmostEquals"], [82, 2, 1, "", "assertCountEqual"], [82, 2, 1, "", "assertDictContainsSubset"], [82, 2, 1, "", "assertDictEqual"], [82, 2, 1, "", "assertEqual"], [82, 2, 1, "", "assertEquals"], [82, 2, 1, "", "assertFalse"], [82, 2, 1, "", "assertGreater"], [82, 2, 1, "", "assertGreaterEqual"], [82, 2, 1, "", "assertIn"], [82, 2, 1, "", "assertIs"], [82, 2, 1, "", "assertIsInstance"], [82, 2, 1, "", "assertIsNone"], [82, 2, 1, "", "assertIsNot"], [82, 2, 1, "", "assertIsNotNone"], [82, 2, 1, "", "assertLess"], [82, 2, 1, "", "assertLessEqual"], [82, 2, 1, "", "assertListEqual"], [82, 2, 1, "", "assertLogs"], [82, 2, 1, "", "assertMultiLineEqual"], [82, 2, 1, "", "assertNoLogs"], [82, 2, 1, "", "assertNotAlmostEqual"], [82, 2, 1, "", "assertNotAlmostEquals"], [82, 2, 1, "", "assertNotEqual"], [82, 2, 1, "", "assertNotEquals"], [82, 2, 1, "", "assertNotIn"], [82, 2, 1, "", "assertNotIsInstance"], [82, 2, 1, "", "assertNotRegex"], [82, 2, 1, "", "assertNotRegexpMatches"], [82, 2, 1, "", "assertRaises"], [82, 2, 1, "", "assertRaisesRegex"], [82, 2, 1, "", "assertRaisesRegexp"], [82, 2, 1, "", "assertRegex"], [82, 2, 1, "", "assertRegexpMatches"], [82, 2, 1, "", "assertSequenceEqual"], [82, 2, 1, "", "assertSetEqual"], [82, 2, 1, "", "assertTrue"], [82, 2, 1, "", "assertTupleEqual"], [82, 2, 1, "", "assertWarns"], [82, 2, 1, "", "assertWarnsRegex"], [82, 2, 1, "", "assert_"], [82, 2, 1, "", "countTestCases"], [82, 2, 1, "", "debug"], [82, 2, 1, "", "defaultTestResult"], [82, 2, 1, "", "doClassCleanups"], [82, 2, 1, "", "doCleanups"], [82, 2, 1, "", "fail"], [82, 2, 1, "", "failIf"], [82, 2, 1, "", "failIfAlmostEqual"], [82, 2, 1, "", "failIfEqual"], [82, 2, 1, "", "failUnless"], [82, 2, 1, "", "failUnlessAlmostEqual"], [82, 2, 1, "", "failUnlessEqual"], [82, 2, 1, "", "failUnlessRaises"], [82, 6, 1, "", "failureException"], [82, 2, 1, "", "id"], [82, 6, 1, "", "longMessage"], [82, 6, 1, "", "maxDiff"], [82, 2, 1, "", "run"], [82, 2, 1, "", "setUp"], [82, 2, 1, "", "setUpClass"], [82, 2, 1, "", "shortDescription"], [82, 2, 1, "", "skipTest"], [82, 2, 1, "", "subTest"], [82, 2, 1, "", "tearDown"], [82, 2, 1, "", "tearDownClass"], [82, 2, 1, "", "test_correct_input_dim"], [82, 2, 1, "", "test_correct_output_dim"], [82, 2, 1, "", "test_incorrect_input_dim"], [82, 2, 1, "", "test_initialization"], [82, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "addClassCleanup"], [83, 2, 1, "", "addCleanup"], [83, 2, 1, "", "addTypeEqualityFunc"], [83, 2, 1, "", "assertAlmostEqual"], [83, 2, 1, "", "assertAlmostEquals"], [83, 2, 1, "", "assertCountEqual"], [83, 2, 1, "", "assertDictContainsSubset"], [83, 2, 1, "", "assertDictEqual"], [83, 2, 1, "", "assertEqual"], [83, 2, 1, "", "assertEquals"], [83, 2, 1, "", "assertFalse"], [83, 2, 1, "", "assertGreater"], [83, 2, 1, "", "assertGreaterEqual"], [83, 2, 1, "", "assertIn"], [83, 2, 1, "", "assertIs"], [83, 2, 1, "", "assertIsInstance"], [83, 2, 1, "", "assertIsNone"], [83, 2, 1, "", "assertIsNot"], [83, 2, 1, "", "assertIsNotNone"], [83, 2, 1, "", "assertLess"], [83, 2, 1, "", "assertLessEqual"], [83, 2, 1, "", "assertListEqual"], [83, 2, 1, "", "assertLogs"], [83, 2, 1, "", "assertMultiLineEqual"], [83, 2, 1, "", "assertNoLogs"], [83, 2, 1, "", "assertNotAlmostEqual"], [83, 2, 1, "", "assertNotAlmostEquals"], [83, 2, 1, "", "assertNotEqual"], [83, 2, 1, "", "assertNotEquals"], [83, 2, 1, "", "assertNotIn"], [83, 2, 1, "", "assertNotIsInstance"], [83, 2, 1, "", "assertNotRegex"], [83, 2, 1, "", "assertNotRegexpMatches"], [83, 2, 1, "", "assertRaises"], [83, 2, 1, "", "assertRaisesRegex"], [83, 2, 1, "", "assertRaisesRegexp"], [83, 2, 1, "", "assertRegex"], [83, 2, 1, "", "assertRegexpMatches"], [83, 2, 1, "", "assertSequenceEqual"], [83, 2, 1, "", "assertSetEqual"], [83, 2, 1, "", "assertTrue"], [83, 2, 1, "", "assertTupleEqual"], [83, 2, 1, "", "assertWarns"], [83, 2, 1, "", "assertWarnsRegex"], [83, 2, 1, "", "assert_"], [83, 2, 1, "", "countTestCases"], [83, 2, 1, "", "debug"], [83, 2, 1, "", "defaultTestResult"], [83, 2, 1, "", "doClassCleanups"], [83, 2, 1, "", "doCleanups"], [83, 2, 1, "", "fail"], [83, 2, 1, "", "failIf"], [83, 2, 1, "", "failIfAlmostEqual"], [83, 2, 1, "", "failIfEqual"], [83, 2, 1, "", "failUnless"], [83, 2, 1, "", "failUnlessAlmostEqual"], [83, 2, 1, "", "failUnlessEqual"], [83, 2, 1, "", "failUnlessRaises"], [83, 6, 1, "", "failureException"], [83, 2, 1, "", "id"], [83, 6, 1, "", "longMessage"], [83, 6, 1, "", "maxDiff"], [83, 2, 1, "", "run"], [83, 2, 1, "", "setUp"], [83, 2, 1, "", "setUpClass"], [83, 2, 1, "", "shortDescription"], [83, 2, 1, "", "skipTest"], [83, 2, 1, "", "subTest"], [83, 2, 1, "", "tearDown"], [83, 2, 1, "", "tearDownClass"], [83, 2, 1, "", "test_correct_input_dim"], [83, 2, 1, "", "test_correct_output_dim"], [83, 2, 1, "", "test_incorrect_input_dim"], [83, 2, 1, "", "test_initialization"], [83, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_serialization": [[85, 1, 1, "", "TestNodeSerialization"], [86, 1, 1, "", "TestPreprocessorNMF"], [87, 1, 1, "", "TestPreprocessorPCA"], [88, 1, 1, "", "TestSupervisedLDA"], [89, 1, 1, "", "TestSupervisedQDA"], [90, 1, 1, "", "TestSupervisedSVM"], [91, 1, 1, "", "TestTransformationReflectance"], [92, 1, 1, "", "TestTransformationTorch"], [93, 1, 1, "", "TestTransformationTorchVision"], [94, 1, 1, "", "TestUnsupervisedGMM"], [95, 1, 1, "", "TestUnsupervisedKMeans"], [96, 1, 1, "", "TestUnsupervisedMeanShift"]], "cuvis_ai.test.test_serialization.TestNodeSerialization": [[85, 2, 1, "", "__init__"], [85, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestPreprocessorNMF": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "addClassCleanup"], [86, 2, 1, "", "addCleanup"], [86, 2, 1, "", "addTypeEqualityFunc"], [86, 2, 1, "", "assertAlmostEqual"], [86, 2, 1, "", "assertAlmostEquals"], [86, 2, 1, "", "assertCountEqual"], [86, 2, 1, "", "assertDictContainsSubset"], [86, 2, 1, "", "assertDictEqual"], [86, 2, 1, "", "assertEqual"], [86, 2, 1, "", "assertEquals"], [86, 2, 1, "", "assertFalse"], [86, 2, 1, "", "assertGreater"], [86, 2, 1, "", "assertGreaterEqual"], [86, 2, 1, "", "assertIn"], [86, 2, 1, "", "assertIs"], [86, 2, 1, "", "assertIsInstance"], [86, 2, 1, "", "assertIsNone"], [86, 2, 1, "", "assertIsNot"], [86, 2, 1, "", "assertIsNotNone"], [86, 2, 1, "", "assertLess"], [86, 2, 1, "", "assertLessEqual"], [86, 2, 1, "", "assertListEqual"], [86, 2, 1, "", "assertLogs"], [86, 2, 1, "", "assertMultiLineEqual"], [86, 2, 1, "", "assertNoLogs"], [86, 2, 1, "", "assertNotAlmostEqual"], [86, 2, 1, "", "assertNotAlmostEquals"], [86, 2, 1, "", "assertNotEqual"], [86, 2, 1, "", "assertNotEquals"], [86, 2, 1, "", "assertNotIn"], [86, 2, 1, "", "assertNotIsInstance"], [86, 2, 1, "", "assertNotRegex"], [86, 2, 1, "", "assertNotRegexpMatches"], [86, 2, 1, "", "assertRaises"], [86, 2, 1, "", "assertRaisesRegex"], [86, 2, 1, "", "assertRaisesRegexp"], [86, 2, 1, "", "assertRegex"], [86, 2, 1, "", "assertRegexpMatches"], [86, 2, 1, "", "assertSequenceEqual"], [86, 2, 1, "", "assertSetEqual"], [86, 2, 1, "", "assertTrue"], [86, 2, 1, "", "assertTupleEqual"], [86, 2, 1, "", "assertWarns"], [86, 2, 1, "", "assertWarnsRegex"], [86, 2, 1, "", "assert_"], [86, 2, 1, "", "countTestCases"], [86, 2, 1, "", "debug"], [86, 2, 1, "", "defaultTestResult"], [86, 2, 1, "", "doClassCleanups"], [86, 2, 1, "", "doCleanups"], [86, 2, 1, "", "fail"], [86, 2, 1, "", "failIf"], [86, 2, 1, "", "failIfAlmostEqual"], [86, 2, 1, "", "failIfEqual"], [86, 2, 1, "", "failUnless"], [86, 2, 1, "", "failUnlessAlmostEqual"], [86, 2, 1, "", "failUnlessEqual"], [86, 2, 1, "", "failUnlessRaises"], [86, 6, 1, "", "failureException"], [86, 2, 1, "", "id"], [86, 6, 1, "", "longMessage"], [86, 6, 1, "", "maxDiff"], [86, 2, 1, "", "run"], [86, 2, 1, "", "setUp"], [86, 2, 1, "", "setUpClass"], [86, 2, 1, "", "shortDescription"], [86, 2, 1, "", "skipTest"], [86, 2, 1, "", "subTest"], [86, 2, 1, "", "tearDown"], [86, 2, 1, "", "tearDownClass"], [86, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestPreprocessorPCA": [[87, 2, 1, "", "__init__"], [87, 2, 1, "", "addClassCleanup"], [87, 2, 1, "", "addCleanup"], [87, 2, 1, "", "addTypeEqualityFunc"], [87, 2, 1, "", "assertAlmostEqual"], [87, 2, 1, "", "assertAlmostEquals"], [87, 2, 1, "", "assertCountEqual"], [87, 2, 1, "", "assertDictContainsSubset"], [87, 2, 1, "", "assertDictEqual"], [87, 2, 1, "", "assertEqual"], [87, 2, 1, "", "assertEquals"], [87, 2, 1, "", "assertFalse"], [87, 2, 1, "", "assertGreater"], [87, 2, 1, "", "assertGreaterEqual"], [87, 2, 1, "", "assertIn"], [87, 2, 1, "", "assertIs"], [87, 2, 1, "", "assertIsInstance"], [87, 2, 1, "", "assertIsNone"], [87, 2, 1, "", "assertIsNot"], [87, 2, 1, "", "assertIsNotNone"], [87, 2, 1, "", "assertLess"], [87, 2, 1, "", "assertLessEqual"], [87, 2, 1, "", "assertListEqual"], [87, 2, 1, "", "assertLogs"], [87, 2, 1, "", "assertMultiLineEqual"], [87, 2, 1, "", "assertNoLogs"], [87, 2, 1, "", "assertNotAlmostEqual"], [87, 2, 1, "", "assertNotAlmostEquals"], [87, 2, 1, "", "assertNotEqual"], [87, 2, 1, "", "assertNotEquals"], [87, 2, 1, "", "assertNotIn"], [87, 2, 1, "", "assertNotIsInstance"], [87, 2, 1, "", "assertNotRegex"], [87, 2, 1, "", "assertNotRegexpMatches"], [87, 2, 1, "", "assertRaises"], [87, 2, 1, "", "assertRaisesRegex"], [87, 2, 1, "", "assertRaisesRegexp"], [87, 2, 1, "", "assertRegex"], [87, 2, 1, "", "assertRegexpMatches"], [87, 2, 1, "", "assertSequenceEqual"], [87, 2, 1, "", "assertSetEqual"], [87, 2, 1, "", "assertTrue"], [87, 2, 1, "", "assertTupleEqual"], [87, 2, 1, "", "assertWarns"], [87, 2, 1, "", "assertWarnsRegex"], [87, 2, 1, "", "assert_"], [87, 2, 1, "", "countTestCases"], [87, 2, 1, "", "debug"], [87, 2, 1, "", "defaultTestResult"], [87, 2, 1, "", "doClassCleanups"], [87, 2, 1, "", "doCleanups"], [87, 2, 1, "", "fail"], [87, 2, 1, "", "failIf"], [87, 2, 1, "", "failIfAlmostEqual"], [87, 2, 1, "", "failIfEqual"], [87, 2, 1, "", "failUnless"], [87, 2, 1, "", "failUnlessAlmostEqual"], [87, 2, 1, "", "failUnlessEqual"], [87, 2, 1, "", "failUnlessRaises"], [87, 6, 1, "", "failureException"], [87, 2, 1, "", "id"], [87, 6, 1, "", "longMessage"], [87, 6, 1, "", "maxDiff"], [87, 2, 1, "", "run"], [87, 2, 1, "", "setUp"], [87, 2, 1, "", "setUpClass"], [87, 2, 1, "", "shortDescription"], [87, 2, 1, "", "skipTest"], [87, 2, 1, "", "subTest"], [87, 2, 1, "", "tearDown"], [87, 2, 1, "", "tearDownClass"], [87, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestSupervisedLDA": [[88, 2, 1, "", "__init__"], [88, 2, 1, "", "addClassCleanup"], [88, 2, 1, "", "addCleanup"], [88, 2, 1, "", "addTypeEqualityFunc"], [88, 2, 1, "", "assertAlmostEqual"], [88, 2, 1, "", "assertAlmostEquals"], [88, 2, 1, "", "assertCountEqual"], [88, 2, 1, "", "assertDictContainsSubset"], [88, 2, 1, "", "assertDictEqual"], [88, 2, 1, "", "assertEqual"], [88, 2, 1, "", "assertEquals"], [88, 2, 1, "", "assertFalse"], [88, 2, 1, "", "assertGreater"], [88, 2, 1, "", "assertGreaterEqual"], [88, 2, 1, "", "assertIn"], [88, 2, 1, "", "assertIs"], [88, 2, 1, "", "assertIsInstance"], [88, 2, 1, "", "assertIsNone"], [88, 2, 1, "", "assertIsNot"], [88, 2, 1, "", "assertIsNotNone"], [88, 2, 1, "", "assertLess"], [88, 2, 1, "", "assertLessEqual"], [88, 2, 1, "", "assertListEqual"], [88, 2, 1, "", "assertLogs"], [88, 2, 1, "", "assertMultiLineEqual"], [88, 2, 1, "", "assertNoLogs"], [88, 2, 1, "", "assertNotAlmostEqual"], [88, 2, 1, "", "assertNotAlmostEquals"], [88, 2, 1, "", "assertNotEqual"], [88, 2, 1, "", "assertNotEquals"], [88, 2, 1, "", "assertNotIn"], [88, 2, 1, "", "assertNotIsInstance"], [88, 2, 1, "", "assertNotRegex"], [88, 2, 1, "", "assertNotRegexpMatches"], [88, 2, 1, "", "assertRaises"], [88, 2, 1, "", "assertRaisesRegex"], [88, 2, 1, "", "assertRaisesRegexp"], [88, 2, 1, "", "assertRegex"], [88, 2, 1, "", "assertRegexpMatches"], [88, 2, 1, "", "assertSequenceEqual"], [88, 2, 1, "", "assertSetEqual"], [88, 2, 1, "", "assertTrue"], [88, 2, 1, "", "assertTupleEqual"], [88, 2, 1, "", "assertWarns"], [88, 2, 1, "", "assertWarnsRegex"], [88, 2, 1, "", "assert_"], [88, 2, 1, "", "countTestCases"], [88, 2, 1, "", "debug"], [88, 2, 1, "", "defaultTestResult"], [88, 2, 1, "", "doClassCleanups"], [88, 2, 1, "", "doCleanups"], [88, 2, 1, "", "fail"], [88, 2, 1, "", "failIf"], [88, 2, 1, "", "failIfAlmostEqual"], [88, 2, 1, "", "failIfEqual"], [88, 2, 1, "", "failUnless"], [88, 2, 1, "", "failUnlessAlmostEqual"], [88, 2, 1, "", "failUnlessEqual"], [88, 2, 1, "", "failUnlessRaises"], [88, 6, 1, "", "failureException"], [88, 2, 1, "", "id"], [88, 6, 1, "", "longMessage"], [88, 6, 1, "", "maxDiff"], [88, 2, 1, "", "run"], [88, 2, 1, "", "setUp"], [88, 2, 1, "", "setUpClass"], [88, 2, 1, "", "shortDescription"], [88, 2, 1, "", "skipTest"], [88, 2, 1, "", "subTest"], [88, 2, 1, "", "tearDown"], [88, 2, 1, "", "tearDownClass"], [88, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestSupervisedQDA": [[89, 2, 1, "", "__init__"], [89, 2, 1, "", "addClassCleanup"], [89, 2, 1, "", "addCleanup"], [89, 2, 1, "", "addTypeEqualityFunc"], [89, 2, 1, "", "assertAlmostEqual"], [89, 2, 1, "", "assertAlmostEquals"], [89, 2, 1, "", "assertCountEqual"], [89, 2, 1, "", "assertDictContainsSubset"], [89, 2, 1, "", "assertDictEqual"], [89, 2, 1, "", "assertEqual"], [89, 2, 1, "", "assertEquals"], [89, 2, 1, "", "assertFalse"], [89, 2, 1, "", "assertGreater"], [89, 2, 1, "", "assertGreaterEqual"], [89, 2, 1, "", "assertIn"], [89, 2, 1, "", "assertIs"], [89, 2, 1, "", "assertIsInstance"], [89, 2, 1, "", "assertIsNone"], [89, 2, 1, "", "assertIsNot"], [89, 2, 1, "", "assertIsNotNone"], [89, 2, 1, "", "assertLess"], [89, 2, 1, "", "assertLessEqual"], [89, 2, 1, "", "assertListEqual"], [89, 2, 1, "", "assertLogs"], [89, 2, 1, "", "assertMultiLineEqual"], [89, 2, 1, "", "assertNoLogs"], [89, 2, 1, "", "assertNotAlmostEqual"], [89, 2, 1, "", "assertNotAlmostEquals"], [89, 2, 1, "", "assertNotEqual"], [89, 2, 1, "", "assertNotEquals"], [89, 2, 1, "", "assertNotIn"], [89, 2, 1, "", "assertNotIsInstance"], [89, 2, 1, "", "assertNotRegex"], [89, 2, 1, "", "assertNotRegexpMatches"], [89, 2, 1, "", "assertRaises"], [89, 2, 1, "", "assertRaisesRegex"], [89, 2, 1, "", "assertRaisesRegexp"], [89, 2, 1, "", "assertRegex"], [89, 2, 1, "", "assertRegexpMatches"], [89, 2, 1, "", "assertSequenceEqual"], [89, 2, 1, "", "assertSetEqual"], [89, 2, 1, "", "assertTrue"], [89, 2, 1, "", "assertTupleEqual"], [89, 2, 1, "", "assertWarns"], [89, 2, 1, "", "assertWarnsRegex"], [89, 2, 1, "", "assert_"], [89, 2, 1, "", "countTestCases"], [89, 2, 1, "", "debug"], [89, 2, 1, "", "defaultTestResult"], [89, 2, 1, "", "doClassCleanups"], [89, 2, 1, "", "doCleanups"], [89, 2, 1, "", "fail"], [89, 2, 1, "", "failIf"], [89, 2, 1, "", "failIfAlmostEqual"], [89, 2, 1, "", "failIfEqual"], [89, 2, 1, "", "failUnless"], [89, 2, 1, "", "failUnlessAlmostEqual"], [89, 2, 1, "", "failUnlessEqual"], [89, 2, 1, "", "failUnlessRaises"], [89, 6, 1, "", "failureException"], [89, 2, 1, "", "id"], [89, 6, 1, "", "longMessage"], [89, 6, 1, "", "maxDiff"], [89, 2, 1, "", "run"], [89, 2, 1, "", "setUp"], [89, 2, 1, "", "setUpClass"], [89, 2, 1, "", "shortDescription"], [89, 2, 1, "", "skipTest"], [89, 2, 1, "", "subTest"], [89, 2, 1, "", "tearDown"], [89, 2, 1, "", "tearDownClass"], [89, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestSupervisedSVM": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "addClassCleanup"], [90, 2, 1, "", "addCleanup"], [90, 2, 1, "", "addTypeEqualityFunc"], [90, 2, 1, "", "assertAlmostEqual"], [90, 2, 1, "", "assertAlmostEquals"], [90, 2, 1, "", "assertCountEqual"], [90, 2, 1, "", "assertDictContainsSubset"], [90, 2, 1, "", "assertDictEqual"], [90, 2, 1, "", "assertEqual"], [90, 2, 1, "", "assertEquals"], [90, 2, 1, "", "assertFalse"], [90, 2, 1, "", "assertGreater"], [90, 2, 1, "", "assertGreaterEqual"], [90, 2, 1, "", "assertIn"], [90, 2, 1, "", "assertIs"], [90, 2, 1, "", "assertIsInstance"], [90, 2, 1, "", "assertIsNone"], [90, 2, 1, "", "assertIsNot"], [90, 2, 1, "", "assertIsNotNone"], [90, 2, 1, "", "assertLess"], [90, 2, 1, "", "assertLessEqual"], [90, 2, 1, "", "assertListEqual"], [90, 2, 1, "", "assertLogs"], [90, 2, 1, "", "assertMultiLineEqual"], [90, 2, 1, "", "assertNoLogs"], [90, 2, 1, "", "assertNotAlmostEqual"], [90, 2, 1, "", "assertNotAlmostEquals"], [90, 2, 1, "", "assertNotEqual"], [90, 2, 1, "", "assertNotEquals"], [90, 2, 1, "", "assertNotIn"], [90, 2, 1, "", "assertNotIsInstance"], [90, 2, 1, "", "assertNotRegex"], [90, 2, 1, "", "assertNotRegexpMatches"], [90, 2, 1, "", "assertRaises"], [90, 2, 1, "", "assertRaisesRegex"], [90, 2, 1, "", "assertRaisesRegexp"], [90, 2, 1, "", "assertRegex"], [90, 2, 1, "", "assertRegexpMatches"], [90, 2, 1, "", "assertSequenceEqual"], [90, 2, 1, "", "assertSetEqual"], [90, 2, 1, "", "assertTrue"], [90, 2, 1, "", "assertTupleEqual"], [90, 2, 1, "", "assertWarns"], [90, 2, 1, "", "assertWarnsRegex"], [90, 2, 1, "", "assert_"], [90, 2, 1, "", "countTestCases"], [90, 2, 1, "", "debug"], [90, 2, 1, "", "defaultTestResult"], [90, 2, 1, "", "doClassCleanups"], [90, 2, 1, "", "doCleanups"], [90, 2, 1, "", "fail"], [90, 2, 1, "", "failIf"], [90, 2, 1, "", "failIfAlmostEqual"], [90, 2, 1, "", "failIfEqual"], [90, 2, 1, "", "failUnless"], [90, 2, 1, "", "failUnlessAlmostEqual"], [90, 2, 1, "", "failUnlessEqual"], [90, 2, 1, "", "failUnlessRaises"], [90, 6, 1, "", "failureException"], [90, 2, 1, "", "id"], [90, 6, 1, "", "longMessage"], [90, 6, 1, "", "maxDiff"], [90, 2, 1, "", "run"], [90, 2, 1, "", "setUp"], [90, 2, 1, "", "setUpClass"], [90, 2, 1, "", "shortDescription"], [90, 2, 1, "", "skipTest"], [90, 2, 1, "", "subTest"], [90, 2, 1, "", "tearDown"], [90, 2, 1, "", "tearDownClass"], [90, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestTransformationReflectance": [[91, 2, 1, "", "__init__"], [91, 2, 1, "", "addClassCleanup"], [91, 2, 1, "", "addCleanup"], [91, 2, 1, "", "addTypeEqualityFunc"], [91, 2, 1, "", "assertAlmostEqual"], [91, 2, 1, "", "assertAlmostEquals"], [91, 2, 1, "", "assertCountEqual"], [91, 2, 1, "", "assertDictContainsSubset"], [91, 2, 1, "", "assertDictEqual"], [91, 2, 1, "", "assertEqual"], [91, 2, 1, "", "assertEquals"], [91, 2, 1, "", "assertFalse"], [91, 2, 1, "", "assertGreater"], [91, 2, 1, "", "assertGreaterEqual"], [91, 2, 1, "", "assertIn"], [91, 2, 1, "", "assertIs"], [91, 2, 1, "", "assertIsInstance"], [91, 2, 1, "", "assertIsNone"], [91, 2, 1, "", "assertIsNot"], [91, 2, 1, "", "assertIsNotNone"], [91, 2, 1, "", "assertLess"], [91, 2, 1, "", "assertLessEqual"], [91, 2, 1, "", "assertListEqual"], [91, 2, 1, "", "assertLogs"], [91, 2, 1, "", "assertMultiLineEqual"], [91, 2, 1, "", "assertNoLogs"], [91, 2, 1, "", "assertNotAlmostEqual"], [91, 2, 1, "", "assertNotAlmostEquals"], [91, 2, 1, "", "assertNotEqual"], [91, 2, 1, "", "assertNotEquals"], [91, 2, 1, "", "assertNotIn"], [91, 2, 1, "", "assertNotIsInstance"], [91, 2, 1, "", "assertNotRegex"], [91, 2, 1, "", "assertNotRegexpMatches"], [91, 2, 1, "", "assertRaises"], [91, 2, 1, "", "assertRaisesRegex"], [91, 2, 1, "", "assertRaisesRegexp"], [91, 2, 1, "", "assertRegex"], [91, 2, 1, "", "assertRegexpMatches"], [91, 2, 1, "", "assertSequenceEqual"], [91, 2, 1, "", "assertSetEqual"], [91, 2, 1, "", "assertTrue"], [91, 2, 1, "", "assertTupleEqual"], [91, 2, 1, "", "assertWarns"], [91, 2, 1, "", "assertWarnsRegex"], [91, 2, 1, "", "assert_"], [91, 2, 1, "", "countTestCases"], [91, 2, 1, "", "debug"], [91, 2, 1, "", "defaultTestResult"], [91, 2, 1, "", "doClassCleanups"], [91, 2, 1, "", "doCleanups"], [91, 2, 1, "", "fail"], [91, 2, 1, "", "failIf"], [91, 2, 1, "", "failIfAlmostEqual"], [91, 2, 1, "", "failIfEqual"], [91, 2, 1, "", "failUnless"], [91, 2, 1, "", "failUnlessAlmostEqual"], [91, 2, 1, "", "failUnlessEqual"], [91, 2, 1, "", "failUnlessRaises"], [91, 6, 1, "", "failureException"], [91, 2, 1, "", "id"], [91, 6, 1, "", "longMessage"], [91, 6, 1, "", "maxDiff"], [91, 2, 1, "", "run"], [91, 2, 1, "", "setUp"], [91, 2, 1, "", "setUpClass"], [91, 2, 1, "", "shortDescription"], [91, 2, 1, "", "skipTest"], [91, 2, 1, "", "subTest"], [91, 2, 1, "", "tearDown"], [91, 2, 1, "", "tearDownClass"], [91, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestTransformationTorch": [[92, 2, 1, "", "__init__"], [92, 2, 1, "", "addClassCleanup"], [92, 2, 1, "", "addCleanup"], [92, 2, 1, "", "addTypeEqualityFunc"], [92, 2, 1, "", "assertAlmostEqual"], [92, 2, 1, "", "assertAlmostEquals"], [92, 2, 1, "", "assertCountEqual"], [92, 2, 1, "", "assertDictContainsSubset"], [92, 2, 1, "", "assertDictEqual"], [92, 2, 1, "", "assertEqual"], [92, 2, 1, "", "assertEquals"], [92, 2, 1, "", "assertFalse"], [92, 2, 1, "", "assertGreater"], [92, 2, 1, "", "assertGreaterEqual"], [92, 2, 1, "", "assertIn"], [92, 2, 1, "", "assertIs"], [92, 2, 1, "", "assertIsInstance"], [92, 2, 1, "", "assertIsNone"], [92, 2, 1, "", "assertIsNot"], [92, 2, 1, "", "assertIsNotNone"], [92, 2, 1, "", "assertLess"], [92, 2, 1, "", "assertLessEqual"], [92, 2, 1, "", "assertListEqual"], [92, 2, 1, "", "assertLogs"], [92, 2, 1, "", "assertMultiLineEqual"], [92, 2, 1, "", "assertNoLogs"], [92, 2, 1, "", "assertNotAlmostEqual"], [92, 2, 1, "", "assertNotAlmostEquals"], [92, 2, 1, "", "assertNotEqual"], [92, 2, 1, "", "assertNotEquals"], [92, 2, 1, "", "assertNotIn"], [92, 2, 1, "", "assertNotIsInstance"], [92, 2, 1, "", "assertNotRegex"], [92, 2, 1, "", "assertNotRegexpMatches"], [92, 2, 1, "", "assertRaises"], [92, 2, 1, "", "assertRaisesRegex"], [92, 2, 1, "", "assertRaisesRegexp"], [92, 2, 1, "", "assertRegex"], [92, 2, 1, "", "assertRegexpMatches"], [92, 2, 1, "", "assertSequenceEqual"], [92, 2, 1, "", "assertSetEqual"], [92, 2, 1, "", "assertTrue"], [92, 2, 1, "", "assertTupleEqual"], [92, 2, 1, "", "assertWarns"], [92, 2, 1, "", "assertWarnsRegex"], [92, 2, 1, "", "assert_"], [92, 2, 1, "", "countTestCases"], [92, 2, 1, "", "debug"], [92, 2, 1, "", "defaultTestResult"], [92, 2, 1, "", "doClassCleanups"], [92, 2, 1, "", "doCleanups"], [92, 2, 1, "", "fail"], [92, 2, 1, "", "failIf"], [92, 2, 1, "", "failIfAlmostEqual"], [92, 2, 1, "", "failIfEqual"], [92, 2, 1, "", "failUnless"], [92, 2, 1, "", "failUnlessAlmostEqual"], [92, 2, 1, "", "failUnlessEqual"], [92, 2, 1, "", "failUnlessRaises"], [92, 6, 1, "", "failureException"], [92, 2, 1, "", "id"], [92, 6, 1, "", "longMessage"], [92, 6, 1, "", "maxDiff"], [92, 2, 1, "", "run"], [92, 2, 1, "", "setUp"], [92, 2, 1, "", "setUpClass"], [92, 2, 1, "", "shortDescription"], [92, 2, 1, "", "skipTest"], [92, 2, 1, "", "subTest"], [92, 2, 1, "", "tearDown"], [92, 2, 1, "", "tearDownClass"], [92, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestTransformationTorchVision": [[93, 2, 1, "", "__init__"], [93, 2, 1, "", "addClassCleanup"], [93, 2, 1, "", "addCleanup"], [93, 2, 1, "", "addTypeEqualityFunc"], [93, 2, 1, "", "assertAlmostEqual"], [93, 2, 1, "", "assertAlmostEquals"], [93, 2, 1, "", "assertCountEqual"], [93, 2, 1, "", "assertDictContainsSubset"], [93, 2, 1, "", "assertDictEqual"], [93, 2, 1, "", "assertEqual"], [93, 2, 1, "", "assertEquals"], [93, 2, 1, "", "assertFalse"], [93, 2, 1, "", "assertGreater"], [93, 2, 1, "", "assertGreaterEqual"], [93, 2, 1, "", "assertIn"], [93, 2, 1, "", "assertIs"], [93, 2, 1, "", "assertIsInstance"], [93, 2, 1, "", "assertIsNone"], [93, 2, 1, "", "assertIsNot"], [93, 2, 1, "", "assertIsNotNone"], [93, 2, 1, "", "assertLess"], [93, 2, 1, "", "assertLessEqual"], [93, 2, 1, "", "assertListEqual"], [93, 2, 1, "", "assertLogs"], [93, 2, 1, "", "assertMultiLineEqual"], [93, 2, 1, "", "assertNoLogs"], [93, 2, 1, "", "assertNotAlmostEqual"], [93, 2, 1, "", "assertNotAlmostEquals"], [93, 2, 1, "", "assertNotEqual"], [93, 2, 1, "", "assertNotEquals"], [93, 2, 1, "", "assertNotIn"], [93, 2, 1, "", "assertNotIsInstance"], [93, 2, 1, "", "assertNotRegex"], [93, 2, 1, "", "assertNotRegexpMatches"], [93, 2, 1, "", "assertRaises"], [93, 2, 1, "", "assertRaisesRegex"], [93, 2, 1, "", "assertRaisesRegexp"], [93, 2, 1, "", "assertRegex"], [93, 2, 1, "", "assertRegexpMatches"], [93, 2, 1, "", "assertSequenceEqual"], [93, 2, 1, "", "assertSetEqual"], [93, 2, 1, "", "assertTrue"], [93, 2, 1, "", "assertTupleEqual"], [93, 2, 1, "", "assertWarns"], [93, 2, 1, "", "assertWarnsRegex"], [93, 2, 1, "", "assert_"], [93, 2, 1, "", "countTestCases"], [93, 2, 1, "", "debug"], [93, 2, 1, "", "defaultTestResult"], [93, 2, 1, "", "doClassCleanups"], [93, 2, 1, "", "doCleanups"], [93, 2, 1, "", "fail"], [93, 2, 1, "", "failIf"], [93, 2, 1, "", "failIfAlmostEqual"], [93, 2, 1, "", "failIfEqual"], [93, 2, 1, "", "failUnless"], [93, 2, 1, "", "failUnlessAlmostEqual"], [93, 2, 1, "", "failUnlessEqual"], [93, 2, 1, "", "failUnlessRaises"], [93, 6, 1, "", "failureException"], [93, 2, 1, "", "id"], [93, 6, 1, "", "longMessage"], [93, 6, 1, "", "maxDiff"], [93, 2, 1, "", "run"], [93, 2, 1, "", "setUp"], [93, 2, 1, "", "setUpClass"], [93, 2, 1, "", "shortDescription"], [93, 2, 1, "", "skipTest"], [93, 2, 1, "", "subTest"], [93, 2, 1, "", "tearDown"], [93, 2, 1, "", "tearDownClass"], [93, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestUnsupervisedGMM": [[94, 2, 1, "", "__init__"], [94, 2, 1, "", "addClassCleanup"], [94, 2, 1, "", "addCleanup"], [94, 2, 1, "", "addTypeEqualityFunc"], [94, 2, 1, "", "assertAlmostEqual"], [94, 2, 1, "", "assertAlmostEquals"], [94, 2, 1, "", "assertCountEqual"], [94, 2, 1, "", "assertDictContainsSubset"], [94, 2, 1, "", "assertDictEqual"], [94, 2, 1, "", "assertEqual"], [94, 2, 1, "", "assertEquals"], [94, 2, 1, "", "assertFalse"], [94, 2, 1, "", "assertGreater"], [94, 2, 1, "", "assertGreaterEqual"], [94, 2, 1, "", "assertIn"], [94, 2, 1, "", "assertIs"], [94, 2, 1, "", "assertIsInstance"], [94, 2, 1, "", "assertIsNone"], [94, 2, 1, "", "assertIsNot"], [94, 2, 1, "", "assertIsNotNone"], [94, 2, 1, "", "assertLess"], [94, 2, 1, "", "assertLessEqual"], [94, 2, 1, "", "assertListEqual"], [94, 2, 1, "", "assertLogs"], [94, 2, 1, "", "assertMultiLineEqual"], [94, 2, 1, "", "assertNoLogs"], [94, 2, 1, "", "assertNotAlmostEqual"], [94, 2, 1, "", "assertNotAlmostEquals"], [94, 2, 1, "", "assertNotEqual"], [94, 2, 1, "", "assertNotEquals"], [94, 2, 1, "", "assertNotIn"], [94, 2, 1, "", "assertNotIsInstance"], [94, 2, 1, "", "assertNotRegex"], [94, 2, 1, "", "assertNotRegexpMatches"], [94, 2, 1, "", "assertRaises"], [94, 2, 1, "", "assertRaisesRegex"], [94, 2, 1, "", "assertRaisesRegexp"], [94, 2, 1, "", "assertRegex"], [94, 2, 1, "", "assertRegexpMatches"], [94, 2, 1, "", "assertSequenceEqual"], [94, 2, 1, "", "assertSetEqual"], [94, 2, 1, "", "assertTrue"], [94, 2, 1, "", "assertTupleEqual"], [94, 2, 1, "", "assertWarns"], [94, 2, 1, "", "assertWarnsRegex"], [94, 2, 1, "", "assert_"], [94, 2, 1, "", "countTestCases"], [94, 2, 1, "", "debug"], [94, 2, 1, "", "defaultTestResult"], [94, 2, 1, "", "doClassCleanups"], [94, 2, 1, "", "doCleanups"], [94, 2, 1, "", "fail"], [94, 2, 1, "", "failIf"], [94, 2, 1, "", "failIfAlmostEqual"], [94, 2, 1, "", "failIfEqual"], [94, 2, 1, "", "failUnless"], [94, 2, 1, "", "failUnlessAlmostEqual"], [94, 2, 1, "", "failUnlessEqual"], [94, 2, 1, "", "failUnlessRaises"], [94, 6, 1, "", "failureException"], [94, 2, 1, "", "id"], [94, 6, 1, "", "longMessage"], [94, 6, 1, "", "maxDiff"], [94, 2, 1, "", "run"], [94, 2, 1, "", "setUp"], [94, 2, 1, "", "setUpClass"], [94, 2, 1, "", "shortDescription"], [94, 2, 1, "", "skipTest"], [94, 2, 1, "", "subTest"], [94, 2, 1, "", "tearDown"], [94, 2, 1, "", "tearDownClass"], [94, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans": [[95, 2, 1, "", "__init__"], [95, 2, 1, "", "addClassCleanup"], [95, 2, 1, "", "addCleanup"], [95, 2, 1, "", "addTypeEqualityFunc"], [95, 2, 1, "", "assertAlmostEqual"], [95, 2, 1, "", "assertAlmostEquals"], [95, 2, 1, "", "assertCountEqual"], [95, 2, 1, "", "assertDictContainsSubset"], [95, 2, 1, "", "assertDictEqual"], [95, 2, 1, "", "assertEqual"], [95, 2, 1, "", "assertEquals"], [95, 2, 1, "", "assertFalse"], [95, 2, 1, "", "assertGreater"], [95, 2, 1, "", "assertGreaterEqual"], [95, 2, 1, "", "assertIn"], [95, 2, 1, "", "assertIs"], [95, 2, 1, "", "assertIsInstance"], [95, 2, 1, "", "assertIsNone"], [95, 2, 1, "", "assertIsNot"], [95, 2, 1, "", "assertIsNotNone"], [95, 2, 1, "", "assertLess"], [95, 2, 1, "", "assertLessEqual"], [95, 2, 1, "", "assertListEqual"], [95, 2, 1, "", "assertLogs"], [95, 2, 1, "", "assertMultiLineEqual"], [95, 2, 1, "", "assertNoLogs"], [95, 2, 1, "", "assertNotAlmostEqual"], [95, 2, 1, "", "assertNotAlmostEquals"], [95, 2, 1, "", "assertNotEqual"], [95, 2, 1, "", "assertNotEquals"], [95, 2, 1, "", "assertNotIn"], [95, 2, 1, "", "assertNotIsInstance"], [95, 2, 1, "", "assertNotRegex"], [95, 2, 1, "", "assertNotRegexpMatches"], [95, 2, 1, "", "assertRaises"], [95, 2, 1, "", "assertRaisesRegex"], [95, 2, 1, "", "assertRaisesRegexp"], [95, 2, 1, "", "assertRegex"], [95, 2, 1, "", "assertRegexpMatches"], [95, 2, 1, "", "assertSequenceEqual"], [95, 2, 1, "", "assertSetEqual"], [95, 2, 1, "", "assertTrue"], [95, 2, 1, "", "assertTupleEqual"], [95, 2, 1, "", "assertWarns"], [95, 2, 1, "", "assertWarnsRegex"], [95, 2, 1, "", "assert_"], [95, 2, 1, "", "countTestCases"], [95, 2, 1, "", "debug"], [95, 2, 1, "", "defaultTestResult"], [95, 2, 1, "", "doClassCleanups"], [95, 2, 1, "", "doCleanups"], [95, 2, 1, "", "fail"], [95, 2, 1, "", "failIf"], [95, 2, 1, "", "failIfAlmostEqual"], [95, 2, 1, "", "failIfEqual"], [95, 2, 1, "", "failUnless"], [95, 2, 1, "", "failUnlessAlmostEqual"], [95, 2, 1, "", "failUnlessEqual"], [95, 2, 1, "", "failUnlessRaises"], [95, 6, 1, "", "failureException"], [95, 2, 1, "", "id"], [95, 6, 1, "", "longMessage"], [95, 6, 1, "", "maxDiff"], [95, 2, 1, "", "run"], [95, 2, 1, "", "setUp"], [95, 2, 1, "", "setUpClass"], [95, 2, 1, "", "shortDescription"], [95, 2, 1, "", "skipTest"], [95, 2, 1, "", "subTest"], [95, 2, 1, "", "tearDown"], [95, 2, 1, "", "tearDownClass"], [95, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift": [[96, 2, 1, "", "__init__"], [96, 2, 1, "", "addClassCleanup"], [96, 2, 1, "", "addCleanup"], [96, 2, 1, "", "addTypeEqualityFunc"], [96, 2, 1, "", "assertAlmostEqual"], [96, 2, 1, "", "assertAlmostEquals"], [96, 2, 1, "", "assertCountEqual"], [96, 2, 1, "", "assertDictContainsSubset"], [96, 2, 1, "", "assertDictEqual"], [96, 2, 1, "", "assertEqual"], [96, 2, 1, "", "assertEquals"], [96, 2, 1, "", "assertFalse"], [96, 2, 1, "", "assertGreater"], [96, 2, 1, "", "assertGreaterEqual"], [96, 2, 1, "", "assertIn"], [96, 2, 1, "", "assertIs"], [96, 2, 1, "", "assertIsInstance"], [96, 2, 1, "", "assertIsNone"], [96, 2, 1, "", "assertIsNot"], [96, 2, 1, "", "assertIsNotNone"], [96, 2, 1, "", "assertLess"], [96, 2, 1, "", "assertLessEqual"], [96, 2, 1, "", "assertListEqual"], [96, 2, 1, "", "assertLogs"], [96, 2, 1, "", "assertMultiLineEqual"], [96, 2, 1, "", "assertNoLogs"], [96, 2, 1, "", "assertNotAlmostEqual"], [96, 2, 1, "", "assertNotAlmostEquals"], [96, 2, 1, "", "assertNotEqual"], [96, 2, 1, "", "assertNotEquals"], [96, 2, 1, "", "assertNotIn"], [96, 2, 1, "", "assertNotIsInstance"], [96, 2, 1, "", "assertNotRegex"], [96, 2, 1, "", "assertNotRegexpMatches"], [96, 2, 1, "", "assertRaises"], [96, 2, 1, "", "assertRaisesRegex"], [96, 2, 1, "", "assertRaisesRegexp"], [96, 2, 1, "", "assertRegex"], [96, 2, 1, "", "assertRegexpMatches"], [96, 2, 1, "", "assertSequenceEqual"], [96, 2, 1, "", "assertSetEqual"], [96, 2, 1, "", "assertTrue"], [96, 2, 1, "", "assertTupleEqual"], [96, 2, 1, "", "assertWarns"], [96, 2, 1, "", "assertWarnsRegex"], [96, 2, 1, "", "assert_"], [96, 2, 1, "", "countTestCases"], [96, 2, 1, "", "debug"], [96, 2, 1, "", "defaultTestResult"], [96, 2, 1, "", "doClassCleanups"], [96, 2, 1, "", "doCleanups"], [96, 2, 1, "", "fail"], [96, 2, 1, "", "failIf"], [96, 2, 1, "", "failIfAlmostEqual"], [96, 2, 1, "", "failIfEqual"], [96, 2, 1, "", "failUnless"], [96, 2, 1, "", "failUnlessAlmostEqual"], [96, 2, 1, "", "failUnlessEqual"], [96, 2, 1, "", "failUnlessRaises"], [96, 6, 1, "", "failureException"], [96, 2, 1, "", "id"], [96, 6, 1, "", "longMessage"], [96, 6, 1, "", "maxDiff"], [96, 2, 1, "", "run"], [96, 2, 1, "", "setUp"], [96, 2, 1, "", "setUpClass"], [96, 2, 1, "", "shortDescription"], [96, 2, 1, "", "skipTest"], [96, 2, 1, "", "subTest"], [96, 2, 1, "", "tearDown"], [96, 2, 1, "", "tearDownClass"], [96, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_unsupervised_structural": [[98, 1, 1, "", "TestUnsupervisedGMM"], [99, 1, 1, "", "TestUnsupervisedKMeans"], [100, 1, 1, "", "TestUnsupervisedNode"]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM": [[98, 2, 1, "", "__init__"], [98, 2, 1, "", "addClassCleanup"], [98, 2, 1, "", "addCleanup"], [98, 2, 1, "", "addTypeEqualityFunc"], [98, 2, 1, "", "assertAlmostEqual"], [98, 2, 1, "", "assertAlmostEquals"], [98, 2, 1, "", "assertCountEqual"], [98, 2, 1, "", "assertDictContainsSubset"], [98, 2, 1, "", "assertDictEqual"], [98, 2, 1, "", "assertEqual"], [98, 2, 1, "", "assertEquals"], [98, 2, 1, "", "assertFalse"], [98, 2, 1, "", "assertGreater"], [98, 2, 1, "", "assertGreaterEqual"], [98, 2, 1, "", "assertIn"], [98, 2, 1, "", "assertIs"], [98, 2, 1, "", "assertIsInstance"], [98, 2, 1, "", "assertIsNone"], [98, 2, 1, "", "assertIsNot"], [98, 2, 1, "", "assertIsNotNone"], [98, 2, 1, "", "assertLess"], [98, 2, 1, "", "assertLessEqual"], [98, 2, 1, "", "assertListEqual"], [98, 2, 1, "", "assertLogs"], [98, 2, 1, "", "assertMultiLineEqual"], [98, 2, 1, "", "assertNoLogs"], [98, 2, 1, "", "assertNotAlmostEqual"], [98, 2, 1, "", "assertNotAlmostEquals"], [98, 2, 1, "", "assertNotEqual"], [98, 2, 1, "", "assertNotEquals"], [98, 2, 1, "", "assertNotIn"], [98, 2, 1, "", "assertNotIsInstance"], [98, 2, 1, "", "assertNotRegex"], [98, 2, 1, "", "assertNotRegexpMatches"], [98, 2, 1, "", "assertRaises"], [98, 2, 1, "", "assertRaisesRegex"], [98, 2, 1, "", "assertRaisesRegexp"], [98, 2, 1, "", "assertRegex"], [98, 2, 1, "", "assertRegexpMatches"], [98, 2, 1, "", "assertSequenceEqual"], [98, 2, 1, "", "assertSetEqual"], [98, 2, 1, "", "assertTrue"], [98, 2, 1, "", "assertTupleEqual"], [98, 2, 1, "", "assertWarns"], [98, 2, 1, "", "assertWarnsRegex"], [98, 2, 1, "", "assert_"], [98, 2, 1, "", "countTestCases"], [98, 2, 1, "", "debug"], [98, 2, 1, "", "defaultTestResult"], [98, 2, 1, "", "doClassCleanups"], [98, 2, 1, "", "doCleanups"], [98, 2, 1, "", "fail"], [98, 2, 1, "", "failIf"], [98, 2, 1, "", "failIfAlmostEqual"], [98, 2, 1, "", "failIfEqual"], [98, 2, 1, "", "failUnless"], [98, 2, 1, "", "failUnlessAlmostEqual"], [98, 2, 1, "", "failUnlessEqual"], [98, 2, 1, "", "failUnlessRaises"], [98, 6, 1, "", "failureException"], [98, 2, 1, "", "id"], [98, 6, 1, "", "longMessage"], [98, 6, 1, "", "maxDiff"], [98, 2, 1, "", "run"], [98, 2, 1, "", "setUp"], [98, 2, 1, "", "setUpClass"], [98, 2, 1, "", "shortDescription"], [98, 2, 1, "", "skipTest"], [98, 2, 1, "", "subTest"], [98, 2, 1, "", "tearDown"], [98, 2, 1, "", "tearDownClass"], [98, 2, 1, "", "test_correct_input_dim"], [98, 2, 1, "", "test_correct_output_dim"], [98, 2, 1, "", "test_incorrect_input_dim"], [98, 2, 1, "", "test_initialization"], [98, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans": [[99, 2, 1, "", "__init__"], [99, 2, 1, "", "addClassCleanup"], [99, 2, 1, "", "addCleanup"], [99, 2, 1, "", "addTypeEqualityFunc"], [99, 2, 1, "", "assertAlmostEqual"], [99, 2, 1, "", "assertAlmostEquals"], [99, 2, 1, "", "assertCountEqual"], [99, 2, 1, "", "assertDictContainsSubset"], [99, 2, 1, "", "assertDictEqual"], [99, 2, 1, "", "assertEqual"], [99, 2, 1, "", "assertEquals"], [99, 2, 1, "", "assertFalse"], [99, 2, 1, "", "assertGreater"], [99, 2, 1, "", "assertGreaterEqual"], [99, 2, 1, "", "assertIn"], [99, 2, 1, "", "assertIs"], [99, 2, 1, "", "assertIsInstance"], [99, 2, 1, "", "assertIsNone"], [99, 2, 1, "", "assertIsNot"], [99, 2, 1, "", "assertIsNotNone"], [99, 2, 1, "", "assertLess"], [99, 2, 1, "", "assertLessEqual"], [99, 2, 1, "", "assertListEqual"], [99, 2, 1, "", "assertLogs"], [99, 2, 1, "", "assertMultiLineEqual"], [99, 2, 1, "", "assertNoLogs"], [99, 2, 1, "", "assertNotAlmostEqual"], [99, 2, 1, "", "assertNotAlmostEquals"], [99, 2, 1, "", "assertNotEqual"], [99, 2, 1, "", "assertNotEquals"], [99, 2, 1, "", "assertNotIn"], [99, 2, 1, "", "assertNotIsInstance"], [99, 2, 1, "", "assertNotRegex"], [99, 2, 1, "", "assertNotRegexpMatches"], [99, 2, 1, "", "assertRaises"], [99, 2, 1, "", "assertRaisesRegex"], [99, 2, 1, "", "assertRaisesRegexp"], [99, 2, 1, "", "assertRegex"], [99, 2, 1, "", "assertRegexpMatches"], [99, 2, 1, "", "assertSequenceEqual"], [99, 2, 1, "", "assertSetEqual"], [99, 2, 1, "", "assertTrue"], [99, 2, 1, "", "assertTupleEqual"], [99, 2, 1, "", "assertWarns"], [99, 2, 1, "", "assertWarnsRegex"], [99, 2, 1, "", "assert_"], [99, 2, 1, "", "countTestCases"], [99, 2, 1, "", "debug"], [99, 2, 1, "", "defaultTestResult"], [99, 2, 1, "", "doClassCleanups"], [99, 2, 1, "", "doCleanups"], [99, 2, 1, "", "fail"], [99, 2, 1, "", "failIf"], [99, 2, 1, "", "failIfAlmostEqual"], [99, 2, 1, "", "failIfEqual"], [99, 2, 1, "", "failUnless"], [99, 2, 1, "", "failUnlessAlmostEqual"], [99, 2, 1, "", "failUnlessEqual"], [99, 2, 1, "", "failUnlessRaises"], [99, 6, 1, "", "failureException"], [99, 2, 1, "", "id"], [99, 6, 1, "", "longMessage"], [99, 6, 1, "", "maxDiff"], [99, 2, 1, "", "run"], [99, 2, 1, "", "setUp"], [99, 2, 1, "", "setUpClass"], [99, 2, 1, "", "shortDescription"], [99, 2, 1, "", "skipTest"], [99, 2, 1, "", "subTest"], [99, 2, 1, "", "tearDown"], [99, 2, 1, "", "tearDownClass"], [99, 2, 1, "", "test_correct_input_dim"], [99, 2, 1, "", "test_correct_output_dim"], [99, 2, 1, "", "test_incorrect_input_dim"], [99, 2, 1, "", "test_initialization"], [99, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode": [[100, 2, 1, "", "__init__"], [100, 2, 1, "", "setUp"], [100, 2, 1, "", "test_correct_input_dim"], [100, 2, 1, "", "test_correct_output_dim"], [100, 2, 1, "", "test_incorrect_input_dim"], [100, 2, 1, "", "test_initialization"], [100, 2, 1, "", "test_passthrough"]], "cuvis_ai.transformation": [[102, 0, 0, "-", "reflectance"], [104, 0, 0, "-", "torch_transformation"], [106, 0, 0, "-", "torchvision_transformation"]], "cuvis_ai.transformation.reflectance": [[103, 1, 1, "", "Reflectance"]], "cuvis_ai.transformation.reflectance.Reflectance": [[103, 2, 1, "", "__init__"], [103, 2, 1, "", "check_input_dim"], [103, 2, 1, "", "check_output_dim"], [103, 2, 1, "", "fit"], [103, 2, 1, "", "forward"], [103, 3, 1, "", "input_dim"], [103, 2, 1, "", "load"], [103, 3, 1, "", "output_dim"], [103, 2, 1, "", "serialize"]], "cuvis_ai.transformation.torch_transformation": [[105, 1, 1, "", "TorchTransformation"]], "cuvis_ai.transformation.torch_transformation.TorchTransformation": [[105, 2, 1, "", "__init__"], [105, 2, 1, "", "check_input_dim"], [105, 2, 1, "", "check_output_dim"], [105, 2, 1, "", "fit"], [105, 2, 1, "", "forward"], [105, 3, 1, "", "input_dim"], [105, 2, 1, "", "load"], [105, 3, 1, "", "output_dim"], [105, 2, 1, "", "serialize"]], "cuvis_ai.transformation.torchvision_transformation": [[107, 1, 1, "", "TorchVisionTransformation"]], "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation": [[107, 2, 1, "", "__init__"], [107, 2, 1, "", "check_input_dim"], [107, 2, 1, "", "check_output_dim"], [107, 2, 1, "", "fit"], [107, 2, 1, "", "forward"], [107, 3, 1, "", "input_dim"], [107, 2, 1, "", "load"], [107, 3, 1, "", "output_dim"], [107, 2, 1, "", "serialize"]], "cuvis_ai.tv_transforms": [[109, 0, 0, "-", "Bandpass"], [113, 0, 0, "-", "MultiBandpass"], [117, 0, 0, "-", "NormalizeStdDev"], [121, 0, 0, "-", "NormalizeToFloat"], [125, 0, 0, "-", "WavelengthList"]], "cuvis_ai.tv_transforms.Bandpass": [[110, 6, 1, "", "call_super_init"], [111, 6, 1, "", "dump_patches"], [112, 6, 1, "", "training"]], "cuvis_ai.tv_transforms.MultiBandpass": [[114, 6, 1, "", "call_super_init"], [115, 6, 1, "", "dump_patches"], [116, 6, 1, "", "training"]], "cuvis_ai.tv_transforms.NormalizeStdDev": [[118, 6, 1, "", "call_super_init"], [119, 6, 1, "", "dump_patches"], [120, 6, 1, "", "training"]], "cuvis_ai.tv_transforms.NormalizeToFloat": [[122, 6, 1, "", "call_super_init"], [123, 6, 1, "", "dump_patches"], [124, 6, 1, "", "training"]], "cuvis_ai.unsupervised": [[127, 0, 0, "-", "gmm"], [129, 0, 0, "-", "kmeans"], [131, 0, 0, "-", "mean_shift"]], "cuvis_ai.unsupervised.gmm": [[128, 1, 1, "", "GMM"]], "cuvis_ai.unsupervised.gmm.GMM": [[128, 2, 1, "", "__init__"], [128, 2, 1, "", "check_input_dim"], [128, 2, 1, "", "check_output_dim"], [128, 2, 1, "", "fit"], [128, 2, 1, "", "forward"], [128, 3, 1, "", "input_dim"], [128, 2, 1, "", "load"], [128, 3, 1, "", "output_dim"], [128, 2, 1, "", "serialize"]], "cuvis_ai.unsupervised.kmeans": [[130, 1, 1, "", "KMeans"]], "cuvis_ai.unsupervised.kmeans.KMeans": [[130, 2, 1, "", "__init__"], [130, 2, 1, "", "check_input_dim"], [130, 2, 1, "", "check_output_dim"], [130, 2, 1, "", "fit"], [130, 2, 1, "", "forward"], [130, 3, 1, "", "input_dim"], [130, 2, 1, "", "load"], [130, 3, 1, "", "output_dim"], [130, 2, 1, "", "serialize"]], "cuvis_ai.unsupervised.mean_shift": [[132, 1, 1, "", "MeanShift"]], "cuvis_ai.unsupervised.mean_shift.MeanShift": [[132, 2, 1, "", "__init__"], [132, 2, 1, "", "check_input_dim"], [132, 2, 1, "", "check_output_dim"], [132, 2, 1, "", "fit"], [132, 2, 1, "", "forward"], [132, 3, 1, "", "input_dim"], [132, 2, 1, "", "load"], [132, 3, 1, "", "output_dim"], [132, 2, 1, "", "serialize"]], "cuvis_ai.utils": [[134, 0, 0, "-", "filesystem"], [136, 0, 0, "-", "nn_config"], [140, 0, 0, "-", "numpy_utils"], [153, 0, 0, "-", "serializer"], [162, 0, 0, "-", "test"], [164, 0, 0, "-", "visualize"]], "cuvis_ai.utils.filesystem": [[135, 4, 1, "", "change_working_dir"]], "cuvis_ai.utils.nn_config": [[137, 1, 1, "", "Adam"], [138, 1, 1, "", "Optimizer"], [139, 1, 1, "", "SGD"]], "cuvis_ai.utils.nn_config.Adam": [[137, 2, 1, "", "__init__"], [137, 6, 1, "", "alpha"], [137, 3, 1, "", "args"], [137, 6, 1, "", "beta_1"], [137, 6, 1, "", "beta_2"], [137, 6, 1, "", "epsilon"], [137, 6, 1, "", "lr"], [137, 3, 1, "", "name"], [137, 3, 1, "", "pytorch_args"], [137, 3, 1, "", "sklearn_args"]], "cuvis_ai.utils.nn_config.Optimizer": [[138, 2, 1, "", "__init__"], [138, 3, 1, "", "args"], [138, 3, 1, "", "name"], [138, 3, 1, "", "pytorch_args"], [138, 3, 1, "", "sklearn_args"]], "cuvis_ai.utils.nn_config.SGD": [[139, 2, 1, "", "__init__"], [139, 6, 1, "", "alpha"], [139, 3, 1, "", "args"], [139, 6, 1, "", "lr"], [139, 6, 1, "", "momentum"], [139, 3, 1, "", "name"], [139, 6, 1, "", "nesterov"], [139, 6, 1, "", "power_t"], [139, 3, 1, "", "pytorch_args"], [139, 3, 1, "", "sklearn_args"]], "cuvis_ai.utils.numpy_utils": [[141, 4, 1, "", "binary_mask_to_rle"], [142, 4, 1, "", "check_array_shape"], [143, 4, 1, "", "flatten_batch_and_labels"], [144, 4, 1, "", "flatten_batch_and_spatial"], [145, 4, 1, "", "flatten_labels"], [146, 4, 1, "", "flatten_spatial"], [147, 4, 1, "", "gen_coco_labels"], [148, 4, 1, "", "get_shape_without_batch"], [149, 4, 1, "", "unflatten_batch_and_labels"], [150, 4, 1, "", "unflatten_batch_and_spatial"], [151, 4, 1, "", "unflatten_labels"], [152, 4, 1, "", "unflatten_spatial"]], "cuvis_ai.utils.serializer": [[154, 1, 1, "", "CuvisYamlDumper"], [155, 1, 1, "", "CuvisYamlLoader"], [156, 1, 1, "", "Serializer"], [157, 1, 1, "", "YamlSerializer"], [158, 4, 1, "", "numpy_array_representer"], [159, 4, 1, "", "numpy_arrray_constructor"], [160, 4, 1, "", "numpy_float32_constructor"], [161, 4, 1, "", "numpy_float32_representer"]], "cuvis_ai.utils.serializer.CuvisYamlDumper": [[154, 6, 1, "", "ANCHOR_TEMPLATE"], [154, 6, 1, "", "DEFAULT_MAPPING_TAG"], [154, 6, 1, "", "DEFAULT_SCALAR_TAG"], [154, 6, 1, "", "DEFAULT_SEQUENCE_TAG"], [154, 6, 1, "", "DEFAULT_TAG_PREFIXES"], [154, 6, 1, "", "ESCAPE_REPLACEMENTS"], [154, 2, 1, "", "__init__"], [154, 2, 1, "", "add_implicit_resolver"], [154, 2, 1, "", "add_multi_representer"], [154, 2, 1, "", "add_path_resolver"], [154, 2, 1, "", "add_representer"], [154, 2, 1, "", "analyze_scalar"], [154, 2, 1, "", "anchor_node"], [154, 2, 1, "", "ascend_resolver"], [154, 2, 1, "", "check_empty_document"], [154, 2, 1, "", "check_empty_mapping"], [154, 2, 1, "", "check_empty_sequence"], [154, 2, 1, "", "check_resolver_prefix"], [154, 2, 1, "", "check_simple_key"], [154, 2, 1, "", "choose_scalar_style"], [154, 2, 1, "", "close"], [154, 2, 1, "", "descend_resolver"], [154, 2, 1, "", "determine_block_hints"], [154, 2, 1, "", "dispose"], [154, 2, 1, "", "emit"], [154, 2, 1, "", "expect_alias"], [154, 2, 1, "", "expect_block_mapping"], [154, 2, 1, "", "expect_block_mapping_key"], [154, 2, 1, "", "expect_block_mapping_simple_value"], [154, 2, 1, "", "expect_block_mapping_value"], [154, 2, 1, "", "expect_block_sequence"], [154, 2, 1, "", "expect_block_sequence_item"], [154, 2, 1, "", "expect_document_end"], [154, 2, 1, "", "expect_document_root"], [154, 2, 1, "", "expect_document_start"], [154, 2, 1, "", "expect_first_block_mapping_key"], [154, 2, 1, "", "expect_first_block_sequence_item"], [154, 2, 1, "", "expect_first_document_start"], [154, 2, 1, "", "expect_first_flow_mapping_key"], [154, 2, 1, "", "expect_first_flow_sequence_item"], [154, 2, 1, "", "expect_flow_mapping"], [154, 2, 1, "", "expect_flow_mapping_key"], [154, 2, 1, "", "expect_flow_mapping_simple_value"], [154, 2, 1, "", "expect_flow_mapping_value"], [154, 2, 1, "", "expect_flow_sequence"], [154, 2, 1, "", "expect_flow_sequence_item"], [154, 2, 1, "", "expect_node"], [154, 2, 1, "", "expect_nothing"], [154, 2, 1, "", "expect_scalar"], [154, 2, 1, "", "expect_stream_start"], [154, 2, 1, "", "flush_stream"], [154, 2, 1, "", "generate_anchor"], [154, 2, 1, "", "ignore_aliases"], [154, 2, 1, "", "increase_indent"], [154, 6, 1, "", "inf_value"], [154, 2, 1, "", "need_events"], [154, 2, 1, "", "need_more_events"], [154, 2, 1, "", "open"], [154, 2, 1, "", "prepare_anchor"], [154, 2, 1, "", "prepare_tag"], [154, 2, 1, "", "prepare_tag_handle"], [154, 2, 1, "", "prepare_tag_prefix"], [154, 2, 1, "", "prepare_version"], [154, 2, 1, "", "process_anchor"], [154, 2, 1, "", "process_scalar"], [154, 2, 1, "", "process_tag"], [154, 2, 1, "", "represent"], [154, 2, 1, "", "represent_binary"], [154, 2, 1, "", "represent_bool"], [154, 2, 1, "", "represent_data"], [154, 2, 1, "", "represent_date"], [154, 2, 1, "", "represent_datetime"], [154, 2, 1, "", "represent_dict"], [154, 2, 1, "", "represent_float"], [154, 2, 1, "", "represent_int"], [154, 2, 1, "", "represent_list"], [154, 2, 1, "", "represent_mapping"], [154, 2, 1, "", "represent_none"], [154, 2, 1, "", "represent_scalar"], [154, 2, 1, "", "represent_sequence"], [154, 2, 1, "", "represent_set"], [154, 2, 1, "", "represent_str"], [154, 2, 1, "", "represent_undefined"], [154, 2, 1, "", "represent_yaml_object"], [154, 2, 1, "", "resolve"], [154, 2, 1, "", "serialize"], [154, 2, 1, "", "serialize_node"], [154, 2, 1, "", "write_double_quoted"], [154, 2, 1, "", "write_folded"], [154, 2, 1, "", "write_indent"], [154, 2, 1, "", "write_indicator"], [154, 2, 1, "", "write_line_break"], [154, 2, 1, "", "write_literal"], [154, 2, 1, "", "write_plain"], [154, 2, 1, "", "write_single_quoted"], [154, 2, 1, "", "write_stream_end"], [154, 2, 1, "", "write_stream_start"], [154, 2, 1, "", "write_tag_directive"], [154, 2, 1, "", "write_version_directive"], [154, 6, 1, "", "yaml_implicit_resolvers"], [154, 6, 1, "", "yaml_multi_representers"], [154, 6, 1, "", "yaml_path_resolvers"], [154, 6, 1, "", "yaml_representers"]], "cuvis_ai.utils.serializer.CuvisYamlLoader": [[155, 6, 1, "", "DEFAULT_MAPPING_TAG"], [155, 6, 1, "", "DEFAULT_SCALAR_TAG"], [155, 6, 1, "", "DEFAULT_SEQUENCE_TAG"], [155, 6, 1, "", "DEFAULT_TAGS"], [155, 6, 1, "", "ESCAPE_CODES"], [155, 6, 1, "", "ESCAPE_REPLACEMENTS"], [155, 6, 1, "", "NON_PRINTABLE"], [155, 2, 1, "", "__init__"], [155, 2, 1, "", "add_constructor"], [155, 2, 1, "", "add_implicit_resolver"], [155, 2, 1, "", "add_indent"], [155, 2, 1, "", "add_multi_constructor"], [155, 2, 1, "", "add_path_resolver"], [155, 2, 1, "", "ascend_resolver"], [155, 6, 1, "", "bool_values"], [155, 2, 1, "", "check_block_entry"], [155, 2, 1, "", "check_data"], [155, 2, 1, "", "check_directive"], [155, 2, 1, "", "check_document_end"], [155, 2, 1, "", "check_document_start"], [155, 2, 1, "", "check_event"], [155, 2, 1, "", "check_key"], [155, 2, 1, "", "check_node"], [155, 2, 1, "", "check_plain"], [155, 2, 1, "", "check_printable"], [155, 2, 1, "", "check_resolver_prefix"], [155, 2, 1, "", "check_state_key"], [155, 2, 1, "", "check_token"], [155, 2, 1, "", "check_value"], [155, 2, 1, "", "compose_document"], [155, 2, 1, "", "compose_mapping_node"], [155, 2, 1, "", "compose_node"], [155, 2, 1, "", "compose_scalar_node"], [155, 2, 1, "", "compose_sequence_node"], [155, 2, 1, "", "construct_document"], [155, 2, 1, "", "construct_mapping"], [155, 2, 1, "", "construct_object"], [155, 2, 1, "", "construct_pairs"], [155, 2, 1, "", "construct_scalar"], [155, 2, 1, "", "construct_sequence"], [155, 2, 1, "", "construct_undefined"], [155, 2, 1, "", "construct_yaml_binary"], [155, 2, 1, "", "construct_yaml_bool"], [155, 2, 1, "", "construct_yaml_float"], [155, 2, 1, "", "construct_yaml_int"], [155, 2, 1, "", "construct_yaml_map"], [155, 2, 1, "", "construct_yaml_null"], [155, 2, 1, "", "construct_yaml_object"], [155, 2, 1, "", "construct_yaml_omap"], [155, 2, 1, "", "construct_yaml_pairs"], [155, 2, 1, "", "construct_yaml_seq"], [155, 2, 1, "", "construct_yaml_set"], [155, 2, 1, "", "construct_yaml_str"], [155, 2, 1, "", "construct_yaml_timestamp"], [155, 2, 1, "", "descend_resolver"], [155, 2, 1, "", "determine_encoding"], [155, 2, 1, "", "dispose"], [155, 2, 1, "", "fetch_alias"], [155, 2, 1, "", "fetch_anchor"], [155, 2, 1, "", "fetch_block_entry"], [155, 2, 1, "", "fetch_block_scalar"], [155, 2, 1, "", "fetch_directive"], [155, 2, 1, "", "fetch_document_end"], [155, 2, 1, "", "fetch_document_indicator"], [155, 2, 1, "", "fetch_document_start"], [155, 2, 1, "", "fetch_double"], [155, 2, 1, "", "fetch_flow_collection_end"], [155, 2, 1, "", "fetch_flow_collection_start"], [155, 2, 1, "", "fetch_flow_entry"], [155, 2, 1, "", "fetch_flow_mapping_end"], [155, 2, 1, "", "fetch_flow_mapping_start"], [155, 2, 1, "", "fetch_flow_scalar"], [155, 2, 1, "", "fetch_flow_sequence_end"], [155, 2, 1, "", "fetch_flow_sequence_start"], [155, 2, 1, "", "fetch_folded"], [155, 2, 1, "", "fetch_key"], [155, 2, 1, "", "fetch_literal"], [155, 2, 1, "", "fetch_more_tokens"], [155, 2, 1, "", "fetch_plain"], [155, 2, 1, "", "fetch_single"], [155, 2, 1, "", "fetch_stream_end"], [155, 2, 1, "", "fetch_stream_start"], [155, 2, 1, "", "fetch_tag"], [155, 2, 1, "", "fetch_value"], [155, 2, 1, "", "flatten_mapping"], [155, 2, 1, "", "forward"], [155, 2, 1, "", "get_data"], [155, 2, 1, "", "get_event"], [155, 2, 1, "", "get_mark"], [155, 2, 1, "", "get_node"], [155, 2, 1, "", "get_single_data"], [155, 2, 1, "", "get_single_node"], [155, 2, 1, "", "get_token"], [155, 6, 1, "", "inf_value"], [155, 6, 1, "", "nan_value"], [155, 2, 1, "", "need_more_tokens"], [155, 2, 1, "", "next_possible_simple_key"], [155, 2, 1, "", "parse_block_mapping_first_key"], [155, 2, 1, "", "parse_block_mapping_key"], [155, 2, 1, "", "parse_block_mapping_value"], [155, 2, 1, "", "parse_block_node"], [155, 2, 1, "", "parse_block_node_or_indentless_sequence"], [155, 2, 1, "", "parse_block_sequence_entry"], [155, 2, 1, "", "parse_block_sequence_first_entry"], [155, 2, 1, "", "parse_document_content"], [155, 2, 1, "", "parse_document_end"], [155, 2, 1, "", "parse_document_start"], [155, 2, 1, "", "parse_flow_mapping_empty_value"], [155, 2, 1, "", "parse_flow_mapping_first_key"], [155, 2, 1, "", "parse_flow_mapping_key"], [155, 2, 1, "", "parse_flow_mapping_value"], [155, 2, 1, "", "parse_flow_node"], [155, 2, 1, "", "parse_flow_sequence_entry"], [155, 2, 1, "", "parse_flow_sequence_entry_mapping_end"], [155, 2, 1, "", "parse_flow_sequence_entry_mapping_key"], [155, 2, 1, "", "parse_flow_sequence_entry_mapping_value"], [155, 2, 1, "", "parse_flow_sequence_first_entry"], [155, 2, 1, "", "parse_implicit_document_start"], [155, 2, 1, "", "parse_indentless_sequence_entry"], [155, 2, 1, "", "parse_node"], [155, 2, 1, "", "parse_stream_start"], [155, 2, 1, "", "peek"], [155, 2, 1, "", "peek_event"], [155, 2, 1, "", "peek_token"], [155, 2, 1, "", "prefix"], [155, 2, 1, "", "process_directives"], [155, 2, 1, "", "process_empty_scalar"], [155, 2, 1, "", "remove_possible_simple_key"], [155, 2, 1, "", "resolve"], [155, 2, 1, "", "save_possible_simple_key"], [155, 2, 1, "", "scan_anchor"], [155, 2, 1, "", "scan_block_scalar"], [155, 2, 1, "", "scan_block_scalar_breaks"], [155, 2, 1, "", "scan_block_scalar_ignored_line"], [155, 2, 1, "", "scan_block_scalar_indentation"], [155, 2, 1, "", "scan_block_scalar_indicators"], [155, 2, 1, "", "scan_directive"], [155, 2, 1, "", "scan_directive_ignored_line"], [155, 2, 1, "", "scan_directive_name"], [155, 2, 1, "", "scan_flow_scalar"], [155, 2, 1, "", "scan_flow_scalar_breaks"], [155, 2, 1, "", "scan_flow_scalar_non_spaces"], [155, 2, 1, "", "scan_flow_scalar_spaces"], [155, 2, 1, "", "scan_line_break"], [155, 2, 1, "", "scan_plain"], [155, 2, 1, "", "scan_plain_spaces"], [155, 2, 1, "", "scan_tag"], [155, 2, 1, "", "scan_tag_directive_handle"], [155, 2, 1, "", "scan_tag_directive_prefix"], [155, 2, 1, "", "scan_tag_directive_value"], [155, 2, 1, "", "scan_tag_handle"], [155, 2, 1, "", "scan_tag_uri"], [155, 2, 1, "", "scan_to_next_token"], [155, 2, 1, "", "scan_uri_escapes"], [155, 2, 1, "", "scan_yaml_directive_number"], [155, 2, 1, "", "scan_yaml_directive_value"], [155, 2, 1, "", "stale_possible_simple_keys"], [155, 6, 1, "", "timestamp_regexp"], [155, 2, 1, "", "unwind_indent"], [155, 2, 1, "", "update"], [155, 2, 1, "", "update_raw"], [155, 6, 1, "", "yaml_constructors"], [155, 6, 1, "", "yaml_implicit_resolvers"], [155, 6, 1, "", "yaml_multi_constructors"], [155, 6, 1, "", "yaml_path_resolvers"]], "cuvis_ai.utils.serializer.Serializer": [[156, 2, 1, "", "__init__"], [156, 2, 1, "", "load_node"], [156, 2, 1, "", "serialize_node"]], "cuvis_ai.utils.serializer.YamlSerializer": [[157, 2, 1, "", "__init__"], [157, 2, 1, "", "load"], [157, 2, 1, "", "serialize"]], "cuvis_ai.utils.test": [[163, 4, 1, "", "get_np_dummy_data"]], "cuvis_ai.utils.visualize": [[165, 4, 1, "", "visualize_features"], [166, 4, 1, "", "visualize_image"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:data", "6": "py:attribute"}, "terms": {"": [61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "0": [17, 22, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 137, 139, 154, 155], "0001": [137, 139], "001": [137, 139], "03d": 154, "08": 137, "0b": [154, 155], "0x": [154, 155], "1": [3, 17, 20, 22, 24, 26, 30, 54, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 154, 155], "10": 73, "147": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "1998": 37, "1_": [154, 155], "1e": 137, "2": [33, 40, 103, 154, 155], "20": 103, "2002": [154, 155], "3": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154, 155], "37": 37, "4": [154, 155], "4096": 155, "5": [103, 139, 154, 155], "50": 103, "6": [37, 154, 155], "640": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "7": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154, 155], "76990451": 141, "7_": [154, 155], "8": [154, 155], "9": [137, 139, 154, 155], "971": 37, "977": 37, "999": 137, "9_": [154, 155], "9a": [154, 155], "A": [10, 37, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105], "At": [61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 168], "For": [10, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 107, 168, 170], "If": [3, 20, 22, 24, 26, 30, 33, 54, 61, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 167], "In": [10, 168], "NO": [154, 155], "No": [33, 34, 35, 36, 37, 38, 39, 40, 154, 155], "ON": [154, 155], "On": [154, 155], "The": [10, 20, 22, 26, 30, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 167], "There": 33, "To": [61, 169], "_": [154, 155], "__init__": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 61, 64, 66, 69, 71, 73, 75, 78, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 103, 105, 107, 128, 130, 132, 137, 138, 139, 154, 155, 156, 157], "_description_": [128, 130, 132], "_summary_": [51, 128, 130, 132], "_type_": [128, 130, 132], "abc": [20, 49, 51, 52, 54, 138], "about": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "abstract": [3, 20, 33, 49, 50, 51, 52, 54, 128, 130, 132, 138], "abstractdist": [34, 35, 36, 37, 38, 39, 40], "accomplish": 20, "accord": [40, 107], "ad": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 107], "add": [61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "add_base_nod": 61, "add_constructor": 155, "add_edg": 61, "add_implicit_resolv": [154, 155], "add_ind": 155, "add_multi_constructor": 155, "add_multi_represent": 154, "add_nod": 61, "add_path_resolv": [154, 155], "add_represent": 154, "addclasscleanup": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "addcleanup": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "addit": [10, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105], "addtypeequalityfunc": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "after": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 168], "against": [33, 34, 35, 36, 37, 38, 39, 40], "ai": [61, 128, 130, 132, 168, 170], "algorithm": [33, 132, 167], "alia": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "all": [3, 10, 26, 51, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 128, 130, 132, 168], "all_agre": 26, "allow": [33, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 167, 168], "allow_unicod": 154, "almost": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105], "along": [103, 105], "alongsid": 105, "alpha": [137, 139], "alreadi": [61, 147, 167], "also": [10, 26, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 107], "an": [3, 20, 33, 35, 54, 61, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "analysi": 66, "analyze_scalar": 154, "anchor": [154, 155], "anchor_nod": 154, "anchor_templ": 154, "andr\u00e9": 37, "angl": 40, "ani": [3, 10, 20, 22, 24, 51, 103, 105, 107], "anoth": 168, "anytim": 105, "append": 147, "appli": [22, 26, 30, 37, 103, 105, 107, 128, 130, 132, 147], "applic": 167, "ar": [3, 22, 26, 33, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 167, 168], "archiv": 61, "arg": [26, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105, 137, 138, 139], "argument": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105], "arrai": [3, 16, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 52, 54, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152], "ascend_resolv": [154, 155], "assert": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assert_": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertalmostequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertcountequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertdictcontainssubset": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertdictequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertfals": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertgreat": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertgreaterequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "asserti": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertin": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertionerror": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertisinst": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertisnon": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertisnot": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertisnotnon": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertless": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertlessequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertlistequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertlog": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertmultilineequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertnolog": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertnotalmostequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertnotequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertnotin": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertnotisinst": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertnotregex": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertnotregexpmatch": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertrais": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertraisesregex": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertraisesregexp": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertregex": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertregexpmatch": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertsequenceequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertsetequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "asserttru": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "asserttupleequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertwarn": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "assertwarnsregex": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "associ": 10, "assum": 61, "at_least_n_agre": 26, "attribut": [3, 4, 8, 9, 10, 12, 13, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 64, 66, 69, 71, 73, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 109, 113, 117, 121, 125, 128, 130, 132, 137, 138, 139, 154, 155], "automat": [10, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "avail": 105, "b": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154, 155], "background": 147, "bad": 10, "bar": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "base": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 54, 61, 64, 66, 69, 71, 73, 75, 78, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 103, 105, 107, 128, 130, 132, 137, 138, 139, 154, 155, 156, 157], "basedataset": 17, "basedecid": [22, 24, 26, 30], "basesupervis": [69, 71, 73, 75], "basetransform": [103, 105, 107], "baseunsupervis": [128, 130, 132], "basi": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "basic": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105], "batch": 16, "batch_sampl": 17, "batch_siz": 17, "been": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "befor": [3, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "behavior": 33, "being": [61, 155], "belong": 61, "beltr\u00e1n": 37, "bene": 40, "beta_1": 137, "beta_2": 137, "between": [40, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103], "binari": [22, 141, 155], "binary_mask": 141, "bit": 10, "bit_depth": 10, "block": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 155], "bool": [3, 20, 22, 24, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 64, 66, 69, 71, 73, 75, 103, 105, 107, 110, 111, 112, 114, 115, 116, 118, 119, 120, 122, 123, 124, 128, 130, 132, 139, 147, 154, 155], "bool_": 3, "bool_valu": 155, "boolean": 26, "both": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 168], "bound": 7, "box": 7, "break": 33, "bright": 103, "brighter": 103, "byte": 154, "c": [128, 130, 132], "calcul": [10, 34, 36, 38, 40], "calculu": 103, "call": [33, 34, 35, 36, 37, 38, 39, 40, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105, 155], "callabl": [3, 26, 28, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 107], "can": [10, 33, 35, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 132, 147, 168], "canon": 154, "case": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "caught": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "channel": [10, 26, 30, 35, 128, 130, 132], "channel_count": 26, "check": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 132], "check_block_entri": 155, "check_data": 155, "check_direct": 155, "check_document_end": 155, "check_document_start": 155, "check_empty_docu": 154, "check_empty_map": 154, "check_empty_sequ": 154, "check_ev": 155, "check_input_dim": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132], "check_kei": 155, "check_nod": 155, "check_output_dim": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132], "check_plain": 155, "check_print": 155, "check_resolver_prefix": [154, 155], "check_simple_kei": 154, "check_state_kei": 155, "check_token": 155, "check_valu": 155, "child": [51, 61], "children": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "choic": 155, "choos": 30, "choose_scalar_styl": 154, "chosen": [26, 30], "citat": 37, "cl": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154, 155], "clamp": 103, "clarifi": 147, "class": [2, 3, 10, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 153, 154, 155, 156, 157, 167, 168], "classif": [22, 30], "classifi": [22, 26, 30, 51, 128, 130, 132], "classmethod": [61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154, 155], "cleanup": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "close": 154, "cluster": [128, 130, 132], "cm": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "coco": [7, 147], "code": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "coeffici": 37, "collate_fn": 17, "collect": [10, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "column": [10, 155], "com": 141, "compar": [33, 34, 35, 36, 37, 38, 39, 40, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "compat": 107, "compil": [154, 155], "complet": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "complex128": 3, "complex64": 3, "compon": 66, "compose_docu": 155, "compose_mapping_nod": 155, "compose_nod": 155, "compose_scalar_nod": 155, "compose_sequence_nod": 155, "composit": 107, "compris": 30, "comput": [10, 103], "concept": 167, "connect": 61, "consid": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "consist": 35, "constant": 105, "construct": [34, 36, 37, 38, 39, 40], "construct_docu": 155, "construct_map": 155, "construct_object": 155, "construct_pair": 155, "construct_scalar": 155, "construct_sequ": 155, "construct_undefin": 155, "construct_yaml_binari": 155, "construct_yaml_bool": 155, "construct_yaml_float": 155, "construct_yaml_int": 155, "construct_yaml_map": 155, "construct_yaml_nul": 155, "construct_yaml_object": 155, "construct_yaml_omap": 155, "construct_yaml_pair": 155, "construct_yaml_seq": 155, "construct_yaml_set": 155, "construct_yaml_str": 155, "construct_yaml_timestamp": 155, "constructor": 155, "contain": [10, 33, 34, 35, 36, 37, 38, 39, 40, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 128, 130, 132, 147], "context": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "control": 155, "convert": [3, 7, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 61, 69, 71, 75, 141], "copi": [61, 141], "correctli": 147, "correspond": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "cosin": 40, "count": 154, "counter": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "counttestcas": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "creat": [30, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 155, 167], "cu3": 10, "cube": [3, 10, 107], "cubeconsum": [20, 33, 49, 50, 51, 52], "cumul": 35, "current": [3, 33, 61], "current_index": [154, 155], "current_nod": [154, 155], "custom": 26, "cuvi": [61, 128, 130, 132, 168, 170], "cuvis_ai": 169, "cuvis_col": 17, "d1": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "d2": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "dai": 155, "dark": [10, 103], "darker": 103, "data": [20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 51, 52, 54, 61, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 132, 154, 155, 157, 158, 161, 165, 168], "data_dir": [61, 157], "data_typ": 154, "datacub": [34, 35, 36, 37, 38, 39, 40, 128, 130, 132], "dataload": [61, 107], "datapoint": 22, "dataset": [10, 17], "datatyp": [3, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "date": 154, "datetim": 154, "daylight": 37, "dead": 10, "debug": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "decid": 33, "decim": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "decis": [20, 22, 26, 27], "deconstruct": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "decor": 58, "deem": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "deep": [155, 168], "default": [33, 34, 35, 36, 37, 38, 39, 40, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 128, 130, 147], "default_flow_styl": 154, "default_mapping_tag": [154, 155], "default_scalar_tag": [154, 155], "default_sequence_tag": [154, 155], "default_styl": 154, "default_tag": 155, "default_tag_prefix": 154, "defaulttestresult": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "defin": [33, 34, 35, 36, 37, 38, 39, 40, 51, 61, 128, 130, 132], "definit": 168, "degre": 39, "delet": 61, "delete_nod": 61, "delta": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "depend": [3, 20, 54, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107], "dependend": 10, "depth": [10, 154, 155], "descend_resolv": [154, 155], "describ": 10, "descript": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "deseri": 155, "determin": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "determine_block_hint": 154, "determine_encod": 155, "dict": [3, 10, 11, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 61, 64, 66, 69, 71, 73, 75, 103, 105, 107, 128, 130, 132, 154, 156, 157], "dictionari": [10, 33, 34, 35, 36, 37, 38, 39, 40, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "differ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 168], "digit": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "dimens": [3, 16, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132], "dimension": 168, "dir_path": 135, "direct": 61, "directli": 10, "directori": [22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 61, 128, 130, 132], "dispos": [154, 155], "do": [61, 168], "do_someth": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "doclasscleanup": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "docleanup": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "docstr": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "doe": [61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 167], "doubl": 155, "drop_last": 17, "dtype": 3, "ducktyp": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "dump": [33, 34, 35, 36, 37, 38, 39, 40, 64, 66], "dumper": [158, 161], "dure": 155, "e": [10, 103, 154, 155, 168], "each": [10, 16, 26, 33, 34, 35, 36, 37, 38, 39, 40], "easi": [167, 168], "edg": 61, "ee": [154, 155], "effect": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "either": 10, "element": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "emit": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154], "empti": [165, 166], "enclos": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "encod": 154, "end": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "enforc": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "entri": 61, "environ": 169, "epoch": 73, "epsilon": 137, "equal": [22, 35, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "error": [61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "error_cod": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "escape_cod": 155, "escape_replac": [154, 155], "etc": 10, "euclidean": 35, "even": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "event": [61, 154], "everi": [33, 147], "everyth": 103, "exactli": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "exampl": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 170], "except": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "execut": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 168], "exercis": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "exist": [61, 147, 167], "expect": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 61, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 132], "expect_alia": 154, "expect_block_map": 154, "expect_block_mapping_kei": 154, "expect_block_mapping_simple_valu": 154, "expect_block_mapping_valu": 154, "expect_block_sequ": 154, "expect_block_sequence_item": 154, "expect_document_end": 154, "expect_document_root": 154, "expect_document_start": 154, "expect_first_block_mapping_kei": 154, "expect_first_block_sequence_item": 154, "expect_first_document_start": 154, "expect_first_flow_mapping_kei": 154, "expect_first_flow_sequence_item": 154, "expect_flow_map": 154, "expect_flow_mapping_kei": 154, "expect_flow_mapping_simple_valu": 154, "expect_flow_mapping_valu": 154, "expect_flow_sequ": 154, "expect_flow_sequence_item": 154, "expect_nod": 154, "expect_noth": 154, "expect_scalar": 154, "expect_stream_start": 154, "expected_except": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "expected_regex": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "expected_warn": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "explicit_end": 154, "explicit_start": 154, "exposur": 10, "expr": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "expr1": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "expr2": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "express": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "extra": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "extra_repr": 3, "extract": 10, "f": [154, 155], "f_": [154, 155], "fa": [154, 155], "factor": 64, "factori": 73, "fail": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "failif": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "failifalmostequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "failifequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "failunless": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "failunlessalmostequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "failunlessequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "failunlessrais": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "failur": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "failureexcept": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "fals": [17, 22, 73, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 110, 111, 114, 115, 118, 119, 122, 123, 147, 154, 155], "fetch_alia": 155, "fetch_anchor": 155, "fetch_block_entri": 155, "fetch_block_scalar": 155, "fetch_direct": 155, "fetch_document_end": 155, "fetch_document_ind": 155, "fetch_document_start": 155, "fetch_doubl": 155, "fetch_flow_collection_end": 155, "fetch_flow_collection_start": 155, "fetch_flow_entri": 155, "fetch_flow_mapping_end": 155, "fetch_flow_mapping_start": 155, "fetch_flow_scalar": 155, "fetch_flow_sequence_end": 155, "fetch_flow_sequence_start": 155, "fetch_fold": 155, "fetch_kei": 155, "fetch_liter": 155, "fetch_more_token": 155, "fetch_plain": 155, "fetch_singl": 155, "fetch_stream_end": 155, "fetch_stream_start": 155, "fetch_tag": 155, "fetch_valu": 155, "field": 16, "file": [10, 61, 64, 66, 128, 130, 132, 147], "filenam": [10, 11, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 157], "filepath": [10, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 61, 128, 130, 132], "fileset": 10, "fileset_metadata": 11, "filter": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "final": 20, "first": [61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105, 154, 155], "fit": [20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 52, 61, 64, 66, 69, 71, 73, 75, 103, 105, 107, 128, 130, 132], "fixtur": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "flag": 10, "flatten_map": 155, "float": [10, 22, 103, 137, 139, 154, 155], "float16": 3, "float32": [3, 154, 155], "float64": 3, "flow": [61, 154], "flow_styl": 154, "flush_stream": 154, "follow": 51, "foo": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "form": [128, 130, 132, 168], "format": [3, 10, 20, 33, 34, 35, 36, 37, 38, 39, 40, 54, 61, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 128, 130, 132], "formula": 40, "forward": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 54, 61, 64, 66, 69, 71, 73, 75, 103, 105, 107, 128, 130, 132, 155], "found": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "frame": 10, "framer": 10, "framework": [167, 168], "from": [3, 10, 20, 22, 24, 26, 30, 54, 61, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 141, 147, 155, 167], "full": 3, "function": [5, 7, 9, 15, 17, 25, 33, 34, 35, 36, 37, 38, 39, 40, 57, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105, 107, 134, 140, 153, 154, 155, 162, 164, 167], "function_nam": 105, "further": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "g": [10, 103, 168], "garc\u00eda": 37, "gaussian": 128, "gener": [51, 103, 147], "generate_anchor": 154, "get": [3, 33, 34, 35, 36, 37, 38, 39, 40, 128, 130, 132, 167, 170], "get_data": 155, "get_datatyp": 3, "get_ev": 155, "get_mark": 155, "get_nod": 155, "get_single_data": 155, "get_single_nod": 155, "get_token": 155, "getlogg": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "give": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "given": [30, 35, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 128, 130, 132], "goal": 167, "good": 37, "graph": [22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 103, 105, 107], "h": [128, 130, 132], "ha": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 147], "handl": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154], "handle_text": 154, "have": [61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "hearth": 168, "height": 35, "helper": 7, "here": 26, "hern\u00e1ndez": 37, "higher": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103], "highest": 30, "hook": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "hour": 155, "how": 170, "hsi": 107, "http": 141, "hyperspectr": [128, 130, 132], "i": [3, 10, 20, 22, 24, 26, 30, 54, 61, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 167, 168], "id": [61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154], "identifi": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "ignor": 148, "ignore_alias": 154, "imag": [33, 147], "img": 147, "img_nam": 147, "immedi": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "implement": [33, 51, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "implicit": [154, 155], "import": [3, 20, 22, 24, 26, 30, 54, 64, 66, 69, 71, 75, 103, 105, 107], "includ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 107], "increase_ind": 154, "indent": [154, 155], "indentless": 154, "indentless_sequ": 155, "index": [33, 34, 35, 36, 37, 38, 39, 40, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154, 155], "indic": [30, 154], "inf": [154, 155], "inf_valu": [154, 155], "info": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "inform": [10, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 167], "inherit": [128, 130, 132], "init": [33, 34, 35, 36, 37, 38, 39, 40], "initi": [33, 34, 35, 36, 37, 38, 39, 40, 51, 128, 130, 132, 155], "inner_modul": 156, "input": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 52, 54, 61, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132, 168], "input_dim": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 50, 54, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132], "inspect": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "instal": 167, "instanc": [30, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "instead": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 167], "int": [3, 10, 20, 26, 28, 30, 39, 50, 54, 64, 66, 69, 73, 103, 105, 107, 128, 130, 132, 142, 154, 155], "int16": 3, "int32": 3, "int64": 3, "int8": 3, "integ": 147, "integr": 10, "integration_time_u": 10, "interfac": 167, "intermediari": 61, "introduct": 170, "invent": 167, "invok": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "isinst": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "item": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "iter": [61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105], "its": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 147, 168], "itself": 61, "j": 37, "json": 147, "just": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 107], "k": 130, "keep": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "kei": [10, 155], "keyword": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105], "kind": [154, 155], "known": 33, "kwarg": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105], "l": [37, 154, 155], "l1": [34, 38], "l2": 36, "label": [20, 24, 61, 105, 107, 147, 165, 168], "label_nam": 147, "labelconsum": 49, "larg": 40, "larger": 22, "largest": 103, "learn": 168, "least": 61, "length": [35, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 155], "less": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "level": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "lifo": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "like": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 52, 54, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 132, 167, 168], "line": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "line_break": 154, "linear": 37, "lineno": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "link": 10, "list": [6, 10, 16, 33, 34, 35, 36, 37, 38, 39, 40, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 147, 154, 156, 168], "list1": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "list2": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "load": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 50, 54, 61, 64, 66, 69, 71, 73, 75, 103, 105, 107, 128, 130, 132, 157], "load_from_fil": 61, "load_nod": 156, "loader": [159, 160], "locat": [26, 30, 61], "log": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "logger": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "logger_nam": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "logrecord": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "longmessag": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "look": [167, 170], "lower": 103, "lower_bond": 103, "lower_bound": 103, "lr": [137, 139], "m": [61, 169], "machin": 168, "mai": 26, "main": [61, 157], "make": 20, "manag": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "map": [33, 34, 35, 36, 37, 38, 39, 40, 154, 155], "mapper": 40, "mark": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 155], "mask": [141, 147], "mask_siz": 6, "match": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 132], "matric": [128, 130, 132], "matrix": [26, 30, 64], "maxdiff": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "maximum": 30, "mean": [103, 130, 132], "measur": [10, 33, 37, 40, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "member": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "merg": [154, 155], "messag": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "meta": [10, 103, 107], "metadata": [10, 33, 34, 35, 36, 37, 38, 39, 40, 61, 103, 105, 107], "metadataconsum": 103, "metadataconsumerinfer": 103, "method": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 61, 64, 66, 69, 71, 73, 75, 78, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 103, 105, 107, 128, 130, 132, 137, 138, 139, 154, 155, 156, 157, 167], "methodnam": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "metric": 33, "microsecond": 10, "might": [33, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "mismatch": [33, 34, 35, 36, 37, 38, 39, 40, 61], "miss": 10, "mixtur": 128, "mode": 10, "model": [37, 61, 73, 128, 130, 132], "model_arg": 73, "modul": [0, 1, 4, 8, 9, 12, 13, 18, 31, 41, 58, 59, 62, 67, 73, 76, 101, 105, 108, 109, 113, 117, 121, 125, 126, 133, 168], "moment": 147, "momentum": 139, "month": 155, "more": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "most": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "msg": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "much": 167, "multi": [30, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "multi_constructor": 155, "multipl": [10, 26, 33, 147], "must": [10, 35, 51, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "n": [28, 30, 39, 154, 155], "n_cluster": [128, 130], "n_compon": [64, 66, 69], "name": [10, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105, 137, 138, 139, 147, 155, 156], "nan": 155, "nan_valu": 155, "ndarrai": [6, 22, 24, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 40, 61, 64, 66, 69, 71, 73, 75, 103, 105, 107, 128, 130, 132, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 165, 166], "need": [3, 20, 22, 24, 26, 30, 54, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 168], "need_ev": 154, "need_more_ev": 154, "need_more_token": 155, "need_whitespac": 154, "neg": 64, "nesterov": 139, "new": [34, 35, 36, 37, 38, 39, 40, 51, 61, 128, 130, 132], "newli": 155, "next_possible_simple_kei": 155, "nicer": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "niev": 37, "nm": 35, "nn": 73, "nn_config": 73, "node": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 61, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132, 154, 155, 156, 159, 160, 167], "node2": 61, "non": 64, "non_print": 155, "none": [3, 17, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 61, 64, 66, 69, 73, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 137, 139, 147, 154, 155, 156, 157, 165], "nonetyp": 154, "norm": 39, "normal": [40, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "nota": 40, "note": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 107], "notion": 33, "np": [3, 22, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 61, 103, 105, 107, 128, 130, 132], "null": [154, 155], "num_work": 17, "number": [10, 26, 30, 35, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 128, 130, 132], "numer": 61, "numpi": [3, 10, 16, 22, 33, 34, 35, 36, 37, 38, 39, 40, 107, 147, 154, 155], "numpy_array_represent": 154, "numpy_arrray_constructor": 155, "numpy_float32_constructor": 155, "numpy_float32_represent": 154, "o": [154, 155], "obj": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "object": [3, 10, 20, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 54, 61, 64, 66, 69, 71, 75, 78, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 147, 155, 156], "occlud": 147, "off": [154, 155], "often": 168, "omap": 155, "omit": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "one": [10, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 168], "onli": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 107], "open": 154, "oper": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "operand": 105, "operand_b": 105, "optic": 37, "optim": [73, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 137, 139], "option": [33, 34, 35, 36, 37, 38, 39, 40, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130], "order": [10, 39, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "org": [154, 155], "orig_shap": [149, 150, 151, 152], "other": [10, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 167], "out": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "outer": 16, "output": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 61, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 132, 147], "output_dim": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 50, 54, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132], "output_dir": 147, "output_format": 3, "output_lambda": 3, "outputformat": 3, "overillumin": 10, "overwritten": 61, "own": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 147, 167], "p": [154, 155], "pair": 155, "param": [3, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 132, 141, 147, 156], "paramet": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 51, 52, 54, 61, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 132], "parameter": [33, 34, 35, 36, 37, 38, 39, 40], "params_list": 156, "parent": [61, 154, 155], "parse_block_mapping_first_kei": 155, "parse_block_mapping_kei": 155, "parse_block_mapping_valu": 155, "parse_block_nod": 155, "parse_block_node_or_indentless_sequ": 155, "parse_block_sequence_entri": 155, "parse_block_sequence_first_entri": 155, "parse_document_cont": 155, "parse_document_end": 155, "parse_document_start": 155, "parse_flow_mapping_empty_valu": 155, "parse_flow_mapping_first_kei": 155, "parse_flow_mapping_kei": 155, "parse_flow_mapping_valu": 155, "parse_flow_nod": 155, "parse_flow_sequence_entri": 155, "parse_flow_sequence_entry_mapping_end": 155, "parse_flow_sequence_entry_mapping_kei": 155, "parse_flow_sequence_entry_mapping_valu": 155, "parse_flow_sequence_first_entri": 155, "parse_implicit_document_start": 155, "parse_indentless_sequence_entri": 155, "parse_nod": 155, "parse_stream_start": 155, "part": 167, "pass": [33, 34, 35, 36, 37, 38, 39, 40, 51, 61, 103, 105, 107], "path": [10, 61, 128, 130, 132, 147, 154, 155, 157], "pattern": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "pca": 168, "peek": 155, "peek_ev": 155, "peek_token": 155, "per": [10, 30], "percentag": 103, "pickle_inn": 156, "pip": 167, "pipelin": [107, 167], "pixel": [10, 103], "place": [10, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "point": [26, 61], "polygon": 7, "posit": [3, 20, 22, 24, 26, 30, 35, 54, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107], "possibl": 167, "power_t": 139, "pred": 166, "predict": [20, 24, 128, 130, 132], "prefix": [154, 155], "prefix_text": 154, "prepare_anchor": 154, "prepare_tag": 154, "prepare_tag_handl": 154, "prepare_tag_prefix": 154, "prepare_vers": 154, "preprocess": [33, 52, 54], "preprocessor": 167, "present": 107, "prevent": [61, 155], "princip": 66, "print": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "process": [10, 61, 168], "process_anchor": 154, "process_direct": 155, "process_empty_scalar": 155, "process_scalar": 154, "process_tag": 154, "processing_mod": 10, "proper": 107, "properti": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132, 137, 138, 139], "provid": [10, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 167], "purpos": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "put": 16, "python": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 169], "pytorch": [61, 105, 167], "pytorch_arg": [137, 138, 139], "quickli": 167, "quickstart": 167, "r": [154, 155], "rais": [33, 34, 35, 36, 37, 38, 39, 40, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "rather": 168, "re": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154, 155, 167], "reason": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "recommend": 169, "reconstruct": 61, "record": [10, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "recreat": [33, 34, 35, 36, 37, 38, 39, 40, 64, 66], "reduct": 168, "ref_spectra": [33, 34, 35, 36, 37, 38, 39, 40], "refer": [10, 33, 34, 35, 36, 37, 38, 39, 40, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103], "reflect": 10, "regard": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "regex": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "regexp": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154, 155], "regist": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "regular": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105], "rel": 33, "remain": 103, "remov": 61, "remove_possible_simple_kei": 155, "repositori": 170, "repres": [105, 107, 154, 168], "represent": [3, 20, 22, 24, 26, 30, 54, 69, 71, 75, 154], "represent_binari": 154, "represent_bool": 154, "represent_d": 154, "represent_data": 154, "represent_datetim": 154, "represent_dict": 154, "represent_float": 154, "represent_int": 154, "represent_list": 154, "represent_map": 154, "represent_non": 154, "represent_scalar": 154, "represent_sequ": 154, "represent_set": 154, "represent_str": 154, "represent_undefin": 154, "represent_yaml_object": 154, "requir": [33, 34, 35, 36, 37, 38, 39, 40, 103, 128, 130, 132], "residu": 61, "resolv": [154, 155], "result": [22, 26, 30, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105], "resum": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "return": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 51, 52, 54, 61, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 132, 141, 147], "rle": [6, 141], "romero": 37, "root": [3, 10, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154], "round": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "row": 10, "rtype": 22, "rule": [26, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "run": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105, 169], "runtest": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "safe": [128, 130, 132], "safeconstructor": 155, "safedump": 154, "safeload": 155, "saferepresent": 154, "sam": 40, "same": [10, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 147], "sampl": [128, 130, 132], "sampler": 17, "save": [33, 34, 35, 36, 37, 38, 39, 40, 105, 128, 130, 132, 147], "save_possible_simple_kei": 155, "save_to_fil": 61, "scalar": 154, "scan_anchor": 155, "scan_block_scalar": 155, "scan_block_scalar_break": 155, "scan_block_scalar_ignored_lin": 155, "scan_block_scalar_ind": 155, "scan_block_scalar_indent": 155, "scan_direct": 155, "scan_directive_ignored_lin": 155, "scan_directive_nam": 155, "scan_flow_scalar": 155, "scan_flow_scalar_break": 155, "scan_flow_scalar_non_spac": 155, "scan_flow_scalar_spac": 155, "scan_line_break": 155, "scan_plain": 155, "scan_plain_spac": 155, "scan_tag": 155, "scan_tag_directive_handl": 155, "scan_tag_directive_prefix": 155, "scan_tag_directive_valu": 155, "scan_tag_handl": 155, "scan_tag_uri": 155, "scan_to_next_token": 155, "scan_uri_escap": 155, "scan_yaml_directive_numb": 155, "scan_yaml_directive_valu": 155, "scanner": 155, "score": [33, 34, 35, 36, 37, 38, 39, 40], "second": [10, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105], "secondari": [128, 130, 132], "seed": [128, 130], "segment": 7, "self": [52, 64, 66, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "seq": [154, 155], "seq1": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "seq2": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "seq_typ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "sequenc": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154], "sequenti": [33, 34, 35, 36, 37, 38, 39, 40, 61], "serial": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 50, 54, 61, 64, 66, 69, 71, 73, 75, 103, 105, 107, 128, 130, 132], "serial_dir": [3, 54, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132, 156], "serializ": [33, 34, 35, 36, 37, 38, 39, 40, 61], "serialize_nod": [154, 156], "set": [3, 10, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 154, 155], "set1": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "set2": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "set_datatyp": 3, "setup": [78, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100], "setupclass": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "shallow": 168, "shamelessli": 141, "shape": [3, 10, 20, 22, 24, 26, 30, 35, 51, 54, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132, 163], "share": [128, 130, 132, 147], "shift": 132, "shortdescript": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "should": [33, 34, 35, 36, 37, 38, 39, 40, 61, 64, 66, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 107, 128, 130, 132, 147], "shuffl": 17, "signific": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "silenc": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "similar": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 168], "similarli": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "simpl": [22, 30, 168, 170], "simple_kei": 154, "singl": [26, 30, 33, 107], "single_object_per_label": 147, "singular": [33, 34, 35, 36, 37, 38, 39, 40], "size": [7, 10, 16, 35, 61, 155], "skew": 40, "skip": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "skiptest": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "sklearn": 167, "sklearn_arg": [137, 138, 139], "smaller": 22, "smallest": 103, "solver": 69, "some_attribut": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "someexcept": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "somewarn": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "sort_kei": 154, "sourc": [3, 6, 7, 10, 11, 16, 17, 20, 22, 24, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 58, 61, 64, 66, 69, 71, 73, 75, 78, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 103, 105, 107, 128, 130, 132, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166], "space": 39, "spatial": [26, 30], "special": 155, "specif": [3, 20, 22, 24, 26, 30, 54, 58, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 167], "specifi": [3, 10, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "spectra": [33, 34, 35, 36, 37, 38, 39, 40], "spectra_to_arrai": [33, 34, 35, 36, 37, 38, 39, 40], "spectral": [33, 37, 40], "spectrum": 35, "split": 154, "stackoverflow": 141, "stage": 61, "stale_possible_simple_kei": 155, "start": [61, 167, 170], "start_mark": 155, "state": 20, "static": [22, 33, 34, 35, 36, 37, 38, 39, 40], "staticmethod": 17, "store": [10, 33, 34, 35, 36, 37, 38, 39, 40, 61, 128, 130, 132], "str": [3, 10, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 61, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132, 147, 154, 155, 156, 157], "strategi": 26, "stream": [154, 155], "string": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 128, 130, 132], "structur": 61, "style": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154, 155], "subclass": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "subset": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "subtest": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "success": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "successfulli": 61, "successor": 61, "suffer": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "superset": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "supervis": 168, "support": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "svd": 69, "symmetri": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "t": [154, 155], "tag": [154, 155], "tag_prefix": 155, "take": [61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 170], "taken": 10, "target": 61, "target_transform": 3, "task": [20, 168], "teardown": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "teardownclass": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "tensor": [7, 107], "test": [37, 61], "test_correct_input_dim": [81, 82, 83, 98, 99, 100], "test_correct_output_dim": [81, 82, 83, 98, 99, 100], "test_dataload": 61, "test_get_shape_without_batch": 78, "test_incorrect_input_dim": [81, 82, 83, 98, 99, 100], "test_initi": [81, 82, 83, 98, 99, 100], "test_passthrough": [81, 82, 83, 98, 99, 100], "testcas": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "testnodeseri": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "testpreprocessednod": [82, 83], "testresult": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "testunsupervisednod": [98, 99], "text": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 154], "th": 39, "than": [22, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103], "the_except": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "the_warn": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "thei": [33, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "themselv": 168, "thi": [10, 22, 24, 26, 30, 33, 35, 40, 61, 64, 66, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 167, 168, 169], "thing": 168, "those": 168, "threshold": [22, 103], "through": [33, 34, 35, 36, 37, 38, 39, 40, 51, 61], "time": [10, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "timeout": 17, "timestamp": [154, 155], "timestamp_regexp": 155, "titl": [165, 166], "todo": 33, "tokenclass": 155, "torch": [61, 73, 105, 107], "torchvis": [7, 107], "toward": 40, "train": [61, 128, 130, 132, 168], "train_dataload": 61, "transform": [3, 20, 24, 51, 54, 64, 66, 69, 71, 75], "tree": 167, "tri": 167, "trigger": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "true": [22, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 139, 154, 155, 156], "tt": [154, 155], "tupl": [3, 6, 10, 20, 22, 24, 26, 30, 50, 54, 61, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 142, 154], "tuple1": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "tuple2": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "tutori": 167, "tv_transform": 107, "two": [33, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "type": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 51, 52, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 132, 168], "typeerror": 61, "typeobj": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "typic": 35, "u": 155, "u0010ffff": 155, "u2028": [154, 155], "u2029": [154, 155], "ud7ff": 155, "ue000": 155, "uint8": 3, "unequ": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "unexpect": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "unexpected_regex": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "uniform": 167, "uniniti": 61, "union": [61, 73], "unless": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "unlik": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "unsupervis": [51, 168], "unwind_ind": 155, "unzip": [128, 130, 132], "up": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "updat": 155, "update_raw": 155, "upper_bound": 103, "us": [10, 22, 26, 33, 58, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 105, 107, 167, 168, 169], "user": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 64, 66, 69, 71, 75, 103, 105, 107, 128, 130, 132, 155], "usual": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "util": [26, 61, 73], "uuid": 61, "v": [154, 155], "v2": 107, "valid": [3, 10, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 54, 64, 66, 69, 71, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 107, 128, 130, 132], "valu": [26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 105, 154, 155], "valueerror": [33, 34, 35, 36, 37, 38, 39, 40, 61, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "vari": 35, "vector": [35, 39], "verbos": [73, 154, 155], "version": 154, "version_text": 154, "video": 10, "virtual": 169, "visiondataset": 3, "w": [128, 130, 132], "wa": [10, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "wai": 33, "wanted_shap": 142, "warn": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "warnclass": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "wavelength": [10, 35], "wavelengths_nm": 10, "we": 169, "weight": [34, 128, 130, 132], "well": 107, "wheel": 167, "when": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "where": [22, 33, 34, 35, 36, 37, 38, 39, 40, 128, 130, 132, 147], "whether": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "which": [33, 34, 35, 36, 37, 38, 39, 40, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 128, 130, 132, 147], "white": [10, 103], "whitespac": 154, "whose": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "width": [35, 154], "within": 107, "without": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "worker_init_fn": 17, "working_dir": [33, 34, 35, 36, 37, 38, 39, 40], "wrapper": 58, "write": [128, 130, 132], "write_double_quot": 154, "write_fold": 154, "write_ind": 154, "write_line_break": 154, "write_liter": 154, "write_plain": 154, "write_single_quot": 154, "write_stream_end": 154, "write_stream_start": 154, "write_tag_direct": 154, "write_version_direct": 154, "written": [128, 130, 132], "x": [3, 20, 22, 24, 26, 30, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 52, 54, 61, 64, 66, 69, 71, 73, 75, 103, 105, 107, 128, 130, 132, 155], "x00": [154, 155], "x07": [154, 155], "x08": [154, 155], "x0b": [154, 155], "x0c": [154, 155], "x1b": [154, 155], "x85": [154, 155], "xa0": [154, 155], "y": [49, 61, 69, 71, 73, 75, 105, 154, 155], "yaml": [10, 33, 34, 35, 36, 37, 38, 39, 40, 61, 64, 66, 128, 130, 132, 154, 155], "yaml_constructor": 155, "yaml_implicit_resolv": [154, 155], "yaml_multi_constructor": 155, "yaml_multi_represent": 154, "yaml_path_resolv": [154, 155], "yaml_represent": 154, "ye": [154, 155], "year": 155, "yield": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], "you": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 167], "your": 167, "zero": [78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 147], "zip": 61, "\u03c0": 40, "\ud800\udc00": 155}, "titles": ["cuvis_ai", "cuvis_ai.data", "cuvis_ai.data.BaseDataSet", "cuvis_ai.data.BaseDataSet.BaseDataSet", "cuvis_ai.data.CuvisDataSet", "cuvis_ai.data.Labels2TV", "cuvis_ai.data.Labels2TV.RLE2mask", "cuvis_ai.data.Labels2TV.convert_COCO2TV", "cuvis_ai.data.LiveCuvisDataLoader", "cuvis_ai.data.MetadataUtils", "cuvis_ai.data.MetadataUtils.C_ATTRIB_LIST", "cuvis_ai.data.MetadataUtils.metadataInit", "cuvis_ai.data.NumpyDataSet", "cuvis_ai.data.OutputFormat", "cuvis_ai.data.PublicDataSets", "cuvis_ai.data.utils_dataloader", "cuvis_ai.data.utils_dataloader.cuvis_collate", "cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset", "cuvis_ai.deciders", "cuvis_ai.deciders.base_decider", "cuvis_ai.deciders.base_decider.BaseDecider", "cuvis_ai.deciders.binary_decider", "cuvis_ai.deciders.binary_decider.BinaryDecider", "cuvis_ai.deciders.cascaded_decider", "cuvis_ai.deciders.cascaded_decider.Cascaded", "cuvis_ai.deciders.combining_decider", "cuvis_ai.deciders.combining_decider.CombiningDecider", "cuvis_ai.deciders.combining_decider.all_agree", "cuvis_ai.deciders.combining_decider.at_least_n_agree", "cuvis_ai.deciders.multiclass_decider", "cuvis_ai.deciders.multiclass_decider.MultiClassDecider", "cuvis_ai.distance", "cuvis_ai.distance.distance", "cuvis_ai.distance.distance.AbstractDistance", "cuvis_ai.distance.distance.Canberra", "cuvis_ai.distance.distance.ECS", "cuvis_ai.distance.distance.Euclidean", "cuvis_ai.distance.distance.GFC", "cuvis_ai.distance.distance.Manhattan", "cuvis_ai.distance.distance.Minkowski", "cuvis_ai.distance.distance.SpectralAngle", "cuvis_ai.node", "cuvis_ai.node.Consumers", "cuvis_ai.node.Consumers.CubeConsumer", "cuvis_ai.node.Consumers.LabelConsumer", "cuvis_ai.node.Consumers.LabelConsumerInference", "cuvis_ai.node.Consumers.MetadataConsumer", "cuvis_ai.node.Consumers.MetadataConsumerInference", "cuvis_ai.node.base", "cuvis_ai.node.base.BaseSupervised", "cuvis_ai.node.base.BaseTransformation", "cuvis_ai.node.base.BaseUnsupervised", "cuvis_ai.node.base.Preprocessor", "cuvis_ai.node.node", "cuvis_ai.node.node.Node", "cuvis_ai.node.sklearn", "cuvis_ai.node.torch", "cuvis_ai.node.wrap", "cuvis_ai.node.wrap.make_node", "cuvis_ai.pipeline", "cuvis_ai.pipeline.graph", "cuvis_ai.pipeline.graph.Graph", "cuvis_ai.preprocessor", "cuvis_ai.preprocessor.nmf", "cuvis_ai.preprocessor.nmf.NMF", "cuvis_ai.preprocessor.pca", "cuvis_ai.preprocessor.pca.PCA", "cuvis_ai.supervised", "cuvis_ai.supervised.lda", "cuvis_ai.supervised.lda.LDA", "cuvis_ai.supervised.qda", "cuvis_ai.supervised.qda.QDA", "cuvis_ai.supervised.skorch_supervised", "cuvis_ai.supervised.skorch_supervised.SkorchSupervised", "cuvis_ai.supervised.svm", "cuvis_ai.supervised.svm.SVM", "cuvis_ai.test", "cuvis_ai.test.test_numpy_utils", "cuvis_ai.test.test_numpy_utils.TestNumpyUtils", "cuvis_ai.test.test_pipeline_graph", "cuvis_ai.test.test_preprocessor_structural", "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode", "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF", "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA", "cuvis_ai.test.test_serialization", "cuvis_ai.test.test_serialization.TestNodeSerialization", "cuvis_ai.test.test_serialization.TestPreprocessorNMF", "cuvis_ai.test.test_serialization.TestPreprocessorPCA", "cuvis_ai.test.test_serialization.TestSupervisedLDA", "cuvis_ai.test.test_serialization.TestSupervisedQDA", "cuvis_ai.test.test_serialization.TestSupervisedSVM", "cuvis_ai.test.test_serialization.TestTransformationReflectance", "cuvis_ai.test.test_serialization.TestTransformationTorch", "cuvis_ai.test.test_serialization.TestTransformationTorchVision", "cuvis_ai.test.test_serialization.TestUnsupervisedGMM", "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans", "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift", "cuvis_ai.test.test_unsupervised_structural", "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM", "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans", "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode", "cuvis_ai.transformation", "cuvis_ai.transformation.reflectance", "cuvis_ai.transformation.reflectance.Reflectance", "cuvis_ai.transformation.torch_transformation", "cuvis_ai.transformation.torch_transformation.TorchTransformation", "cuvis_ai.transformation.torchvision_transformation", "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation", "cuvis_ai.tv_transforms", "cuvis_ai.tv_transforms.Bandpass", "cuvis_ai.tv_transforms.Bandpass.call_super_init", "cuvis_ai.tv_transforms.Bandpass.dump_patches", "cuvis_ai.tv_transforms.Bandpass.training", "cuvis_ai.tv_transforms.MultiBandpass", "cuvis_ai.tv_transforms.MultiBandpass.call_super_init", "cuvis_ai.tv_transforms.MultiBandpass.dump_patches", "cuvis_ai.tv_transforms.MultiBandpass.training", "cuvis_ai.tv_transforms.NormalizeStdDev", "cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init", "cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches", "cuvis_ai.tv_transforms.NormalizeStdDev.training", "cuvis_ai.tv_transforms.NormalizeToFloat", "cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init", "cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches", "cuvis_ai.tv_transforms.NormalizeToFloat.training", "cuvis_ai.tv_transforms.WavelengthList", "cuvis_ai.unsupervised", "cuvis_ai.unsupervised.gmm", "cuvis_ai.unsupervised.gmm.GMM", "cuvis_ai.unsupervised.kmeans", "cuvis_ai.unsupervised.kmeans.KMeans", "cuvis_ai.unsupervised.mean_shift", "cuvis_ai.unsupervised.mean_shift.MeanShift", "cuvis_ai.utils", "cuvis_ai.utils.filesystem", "cuvis_ai.utils.filesystem.change_working_dir", "cuvis_ai.utils.nn_config", "cuvis_ai.utils.nn_config.Adam", "cuvis_ai.utils.nn_config.Optimizer", "cuvis_ai.utils.nn_config.SGD", "cuvis_ai.utils.numpy_utils", "cuvis_ai.utils.numpy_utils.binary_mask_to_rle", "cuvis_ai.utils.numpy_utils.check_array_shape", "cuvis_ai.utils.numpy_utils.flatten_batch_and_labels", "cuvis_ai.utils.numpy_utils.flatten_batch_and_spatial", "cuvis_ai.utils.numpy_utils.flatten_labels", "cuvis_ai.utils.numpy_utils.flatten_spatial", "cuvis_ai.utils.numpy_utils.gen_coco_labels", "cuvis_ai.utils.numpy_utils.get_shape_without_batch", "cuvis_ai.utils.numpy_utils.unflatten_batch_and_labels", "cuvis_ai.utils.numpy_utils.unflatten_batch_and_spatial", "cuvis_ai.utils.numpy_utils.unflatten_labels", "cuvis_ai.utils.numpy_utils.unflatten_spatial", "cuvis_ai.utils.serializer", "cuvis_ai.utils.serializer.CuvisYamlDumper", "cuvis_ai.utils.serializer.CuvisYamlLoader", "cuvis_ai.utils.serializer.Serializer", "cuvis_ai.utils.serializer.YamlSerializer", "cuvis_ai.utils.serializer.numpy_array_representer", "cuvis_ai.utils.serializer.numpy_arrray_constructor", "cuvis_ai.utils.serializer.numpy_float32_constructor", "cuvis_ai.utils.serializer.numpy_float32_representer", "cuvis_ai.utils.test", "cuvis_ai.utils.test.get_np_dummy_data", "cuvis_ai.utils.visualize", "cuvis_ai.utils.visualize.visualize_features", "cuvis_ai.utils.visualize.visualize_image", "Welcome to Cuvis AI\u2019s documentation!", "Concepts", "Installation", "Quickstart", "Tutorials"], "titleterms": {"": 167, "The": 168, "abstractdist": 33, "adam": 137, "ai": 167, "algorithm": 168, "all_agre": 27, "api": 167, "at_least_n_agre": 28, "bandpass": [109, 110, 111, 112], "base": [48, 49, 50, 51, 52], "base_decid": [19, 20], "basedataset": [2, 3], "basedecid": 20, "basesupervis": 49, "basetransform": 50, "baseunsupervis": 51, "binary_decid": [21, 22], "binary_mask_to_rl": 141, "binarydecid": 22, "c_attrib_list": 10, "call_super_init": [110, 114, 118, 122], "canberra": 34, "cascad": 24, "cascaded_decid": [23, 24], "change_working_dir": 135, "check_array_shap": 142, "combining_decid": [25, 26, 27, 28], "combiningdecid": 26, "concept": 168, "consum": [42, 43, 44, 45, 46, 47], "convert_coco2tv": 7, "cubeconsum": 43, "cuvi": 167, "cuvis_ai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], "cuvis_col": 16, "cuvisdataset": 4, "cuvisyamldump": 154, "cuvisyamlload": 155, "data": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "decid": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "distanc": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "document": 167, "dump_patch": [111, 115, 119, 123], "ec": 35, "entri": 10, "euclidean": 36, "filesystem": [134, 135], "flatten_batch_and_label": 143, "flatten_batch_and_spati": 144, "flatten_label": 145, "flatten_spati": 146, "gen_coco_label": 147, "get_dataloader_from_dataset": 17, "get_np_dummy_data": 163, "get_shape_without_batch": 148, "gfc": 37, "gmm": [127, 128], "graph": [60, 61], "guid": 167, "instal": 169, "introduct": 167, "kmean": [129, 130], "labelconsum": 44, "labelconsumerinfer": 45, "labels2tv": [5, 6, 7], "lda": [68, 69], "livecuvisdataload": 8, "make_nod": 58, "manhattan": 38, "mean_shift": [131, 132], "meanshift": 132, "metadataconsum": 46, "metadataconsumerinfer": 47, "metadatainit": 11, "metadatautil": [9, 10, 11], "minkowski": 39, "multibandpass": [113, 114, 115, 116], "multiclass_decid": [29, 30], "multiclassdecid": 30, "nmf": [63, 64], "nn_config": [136, 137, 138, 139], "node": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 168], "normalizestddev": [117, 118, 119, 120], "normalizetofloat": [121, 122, 123, 124], "numpy_array_represent": 158, "numpy_arrray_constructor": 159, "numpy_float32_constructor": 160, "numpy_float32_represent": 161, "numpy_util": [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152], "numpydataset": 12, "optim": 138, "outputformat": 13, "paramat": 22, "pca": [65, 66], "pip": 169, "pipelin": [59, 60, 61, 168], "possibl": 10, "preprocessor": [52, 62, 63, 64, 65, 66, 168], "publicdataset": 14, "qda": [70, 71], "quickstart": 170, "refer": 167, "reflect": [102, 103], "rle2mask": 6, "serial": [153, 154, 155, 156, 157, 158, 159, 160, 161], "sgd": 139, "sklearn": 55, "skorch_supervis": [72, 73], "skorchsupervis": 73, "spectralangl": 40, "supervis": [67, 68, 69, 70, 71, 72, 73, 74, 75], "svm": [74, 75], "test": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 162, 163], "test_numpy_util": [77, 78], "test_pipeline_graph": 79, "test_preprocessor_structur": [80, 81, 82, 83], "test_seri": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "test_unsupervised_structur": [97, 98, 99, 100], "testnodeseri": 85, "testnumpyutil": 78, "testpreprocessednod": 81, "testpreprocessornmf": 86, "testpreprocessorpca": 87, "testsupervisedlda": 88, "testsupervisedqda": 89, "testsupervisedsvm": 90, "testtransformationreflect": 91, "testtransformationtorch": 92, "testtransformationtorchvis": 93, "testunsupervisedgmm": [94, 98], "testunsupervisedkmean": [95, 99], "testunsupervisedmeanshift": 96, "testunsupervisednmf": 82, "testunsupervisednod": 100, "testunsupervisedpca": 83, "torch": 56, "torch_transform": [104, 105], "torchtransform": 105, "torchvision_transform": [106, 107], "torchvisiontransform": 107, "train": [112, 116, 120, 124], "transform": [101, 102, 103, 104, 105, 106, 107], "tree": 168, "tutori": 171, "tv_transform": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "unflatten_batch_and_label": 149, "unflatten_batch_and_spati": 150, "unflatten_label": 151, "unflatten_spati": 152, "unsupervis": [126, 127, 128, 129, 130, 131, 132], "user": 167, "util": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], "utils_dataload": [15, 16, 17], "visual": [164, 165, 166], "visualize_featur": 165, "visualize_imag": 166, "wavelengthlist": 125, "welcom": 167, "wrap": [57, 58], "yamlseri": 157}})
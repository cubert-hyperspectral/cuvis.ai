Search.setIndex({"alltitles": {"API Reference": [[190, "api-reference"]], "Concepts": [[191, null]], "Decider Nodes": [[191, "decider-nodes"]], "Distance Nodes": [[191, "distance-nodes"]], "Installation": [[192, null]], "Introduction": [[190, "introduction"]], "Paramaters": [[30, "paramaters"]], "Possible entries": [[19, "possible-entries"]], "Preprocessor Nodes": [[191, "preprocessor-nodes"]], "Quickstart": [[193, null]], "Supervised Nodes": [[191, "supervised-nodes"]], "The Pipeline or Algorithm Tree": [[191, "the-pipeline-or-algorithm-tree"]], "Transformation Nodes": [[191, "transformation-nodes"]], "Tutorials": [[194, null]], "Unsupervised Nodes": [[191, "unsupervised-nodes"]], "Users\u2019s Guide": [[190, "users-s-guide"]], "Welcome to Cuvis AI\u2019s documentation!": [[190, null]], "cuvis_ai": [[0, null]], "cuvis_ai.data": [[1, null]], "cuvis_ai.data.BaseDataSet": [[2, null]], "cuvis_ai.data.BaseDataSet.BaseDataSet": [[3, null]], "cuvis_ai.data.CuvisDataSet": [[4, null]], "cuvis_ai.data.LiveCuvisDataLoader": [[5, null]], "cuvis_ai.data.NumpyDataSet": [[6, null]], "cuvis_ai.data.OutputFormat": [[7, null]], "cuvis_ai.data.PublicDataSets": [[8, null]], "cuvis_ai.data.cocolabels": [[9, null]], "cuvis_ai.data.cocolabels.Annotation": [[10, null]], "cuvis_ai.data.cocolabels.COCOData": [[11, null]], "cuvis_ai.data.cocolabels.Category": [[12, null]], "cuvis_ai.data.cocolabels.Image": [[13, null]], "cuvis_ai.data.cocolabels.Info": [[14, null]], "cuvis_ai.data.cocolabels.License": [[15, null]], "cuvis_ai.data.cocolabels.QueryableList": [[16, null]], "cuvis_ai.data.cocolabels.RLE2mask": [[17, null]], "cuvis_ai.data.metadata": [[18, null]], "cuvis_ai.data.metadata.Metadata": [[19, null]], "cuvis_ai.data.metadata.get_meta_from_mesu": [[20, null]], "cuvis_ai.data.metadata.get_meta_from_path": [[21, null]], "cuvis_ai.data.metadata.get_meta_from_session": [[22, null]], "cuvis_ai.data.utils_dataloader": [[23, null]], "cuvis_ai.data.utils_dataloader.cuvis_collate": [[24, null]], "cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset": [[25, null]], "cuvis_ai.deciders": [[26, null]], "cuvis_ai.deciders.base_decider": [[27, null]], "cuvis_ai.deciders.base_decider.BaseDecider": [[28, null]], "cuvis_ai.deciders.binary_decider": [[29, null]], "cuvis_ai.deciders.binary_decider.BinaryDecider": [[30, null]], "cuvis_ai.deciders.cascaded_decider": [[31, null]], "cuvis_ai.deciders.cascaded_decider.Cascaded": [[32, null]], "cuvis_ai.deciders.combining_decider": [[33, null]], "cuvis_ai.deciders.combining_decider.CombiningDecider": [[34, null]], "cuvis_ai.deciders.combining_decider.all_agree": [[35, null]], "cuvis_ai.deciders.combining_decider.at_least_n_agree": [[36, null]], "cuvis_ai.deciders.multiclass_decider": [[37, null]], "cuvis_ai.deciders.multiclass_decider.MultiClassDecider": [[38, null]], "cuvis_ai.distance": [[39, null]], "cuvis_ai.distance.distance": [[40, null]], "cuvis_ai.distance.distance.AbstractDistance": [[41, null]], "cuvis_ai.distance.distance.Canberra": [[42, null]], "cuvis_ai.distance.distance.ECS": [[43, null]], "cuvis_ai.distance.distance.Euclidean": [[44, null]], "cuvis_ai.distance.distance.GFC": [[45, null]], "cuvis_ai.distance.distance.Manhattan": [[46, null]], "cuvis_ai.distance.distance.Minkowski": [[47, null]], "cuvis_ai.distance.distance.SpectralAngle": [[48, null]], "cuvis_ai.node": [[49, null]], "cuvis_ai.node.Consumers": [[50, null]], "cuvis_ai.node.Consumers.CubeConsumer": [[51, null]], "cuvis_ai.node.Consumers.LabelConsumer": [[52, null]], "cuvis_ai.node.base": [[53, null]], "cuvis_ai.node.base.BaseSupervised": [[54, null]], "cuvis_ai.node.base.BaseTransformation": [[55, null]], "cuvis_ai.node.base.BaseUnsupervised": [[56, null]], "cuvis_ai.node.base.Preprocessor": [[57, null]], "cuvis_ai.node.node": [[58, null]], "cuvis_ai.node.node.Node": [[59, null]], "cuvis_ai.node.sklearn": [[60, null]], "cuvis_ai.node.sklearn.SklearnWrapped": [[61, null]], "cuvis_ai.node.skorch": [[62, null]], "cuvis_ai.node.skorch.SkorchWrapped": [[63, null]], "cuvis_ai.node.torch": [[64, null]], "cuvis_ai.node.torchvision": [[65, null]], "cuvis_ai.node.wrap": [[66, null]], "cuvis_ai.node.wrap.make_node": [[67, null]], "cuvis_ai.pipeline": [[68, null]], "cuvis_ai.pipeline.executor": [[69, null]], "cuvis_ai.pipeline.executor.HummingBirdExecutor": [[70, null]], "cuvis_ai.pipeline.executor.MemoryExecutor": [[71, null]], "cuvis_ai.pipeline.graph": [[72, null]], "cuvis_ai.pipeline.graph.Graph": [[73, null]], "cuvis_ai.pipeline.graph.maybe_wrap_node": [[74, null]], "cuvis_ai.pipeline.meta_routing": [[75, null]], "cuvis_ai.pipeline.meta_routing.get_fit_metadata": [[76, null]], "cuvis_ai.pipeline.meta_routing.get_forward_metadata": [[77, null]], "cuvis_ai.pipeline.meta_routing.get_requested_metadata": [[78, null]], "cuvis_ai.pipeline.meta_routing.get_route": [[79, null]], "cuvis_ai.pipeline.meta_routing.traverse": [[80, null]], "cuvis_ai.pipeline.validator": [[81, null]], "cuvis_ai.pipeline.validator.GraphValidator": [[82, null]], "cuvis_ai.pipeline.validator.ShapeValidator": [[83, null]], "cuvis_ai.preprocessor": [[84, null]], "cuvis_ai.preprocessor.sklearn_wrapped": [[85, null]], "cuvis_ai.preprocessor.sklearn_wrapped.NMF": [[86, null]], "cuvis_ai.preprocessor.sklearn_wrapped.PCA": [[87, null]], "cuvis_ai.supervised": [[88, null]], "cuvis_ai.supervised.sklearn_wrapped": [[89, null]], "cuvis_ai.supervised.sklearn_wrapped.LDA": [[90, null]], "cuvis_ai.supervised.sklearn_wrapped.MLP": [[91, null]], "cuvis_ai.supervised.sklearn_wrapped.QDA": [[92, null]], "cuvis_ai.supervised.sklearn_wrapped.SVM": [[93, null]], "cuvis_ai.supervised.skorch_supervised": [[94, null]], "cuvis_ai.supervised.skorch_supervised.SkorchSupervised": [[95, null]], "cuvis_ai.test": [[96, null]], "cuvis_ai.test.test_numpy_utils": [[97, null]], "cuvis_ai.test.test_numpy_utils.TestNumpyUtils": [[98, null]], "cuvis_ai.test.test_pipeline_graph": [[99, null]], "cuvis_ai.test.test_preprocessor_structural": [[100, null]], "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode": [[101, null]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF": [[102, null]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA": [[103, null]], "cuvis_ai.test.test_unsupervised_structural": [[104, null]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM": [[105, null]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans": [[106, null]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode": [[107, null]], "cuvis_ai.tv_transforms": [[108, null]], "cuvis_ai.tv_transforms.Bandpass": [[109, null]], "cuvis_ai.tv_transforms.Bandpass.call_super_init": [[110, null]], "cuvis_ai.tv_transforms.Bandpass.dump_patches": [[111, null]], "cuvis_ai.tv_transforms.Bandpass.training": [[112, null]], "cuvis_ai.tv_transforms.MultiBandpass": [[113, null]], "cuvis_ai.tv_transforms.MultiBandpass.call_super_init": [[114, null]], "cuvis_ai.tv_transforms.MultiBandpass.dump_patches": [[115, null]], "cuvis_ai.tv_transforms.MultiBandpass.training": [[116, null]], "cuvis_ai.tv_transforms.NormalizeStdDev": [[117, null]], "cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init": [[118, null]], "cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches": [[119, null]], "cuvis_ai.tv_transforms.NormalizeStdDev.training": [[120, null]], "cuvis_ai.tv_transforms.NormalizeToFloat": [[121, null]], "cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init": [[122, null]], "cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches": [[123, null]], "cuvis_ai.tv_transforms.NormalizeToFloat.training": [[124, null]], "cuvis_ai.tv_transforms.WavelengthList": [[125, null]], "cuvis_ai.unsupervised": [[126, null]], "cuvis_ai.unsupervised.sklearn_wrapped": [[127, null]], "cuvis_ai.unsupervised.sklearn_wrapped.GMM": [[128, null]], "cuvis_ai.unsupervised.sklearn_wrapped.KMeans": [[129, null]], "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift": [[130, null]], "cuvis_ai.utils": [[131, null]], "cuvis_ai.utils.dependencies": [[132, null]], "cuvis_ai.utils.dependencies.get_installed_packages": [[133, null]], "cuvis_ai.utils.dependencies.get_installed_packages_str": [[134, null]], "cuvis_ai.utils.dict": [[135, null]], "cuvis_ai.utils.dict.add_prefix": [[136, null]], "cuvis_ai.utils.dict.remove_prefix": [[137, null]], "cuvis_ai.utils.dict.remove_prefix_str": [[138, null]], "cuvis_ai.utils.filesystem": [[139, null]], "cuvis_ai.utils.filesystem.change_working_dir": [[140, null]], "cuvis_ai.utils.inspect": [[141, null]], "cuvis_ai.utils.inspect.get_imports": [[142, null]], "cuvis_ai.utils.inspect.get_members": [[143, null]], "cuvis_ai.utils.inspect.get_referenced": [[144, null]], "cuvis_ai.utils.inspect.get_source_file": [[145, null]], "cuvis_ai.utils.inspect.get_src": [[146, null]], "cuvis_ai.utils.nn_config": [[147, null]], "cuvis_ai.utils.nn_config.Adam": [[148, null]], "cuvis_ai.utils.nn_config.Optimizer": [[149, null]], "cuvis_ai.utils.nn_config.SGD": [[150, null]], "cuvis_ai.utils.numpy": [[151, null]], "cuvis_ai.utils.numpy.binary_mask_to_rle": [[152, null]], "cuvis_ai.utils.numpy.check_array_shape": [[153, null]], "cuvis_ai.utils.numpy.flatten_batch_and_labels": [[154, null]], "cuvis_ai.utils.numpy.flatten_batch_and_spatial": [[155, null]], "cuvis_ai.utils.numpy.flatten_labels": [[156, null]], "cuvis_ai.utils.numpy.flatten_spatial": [[157, null]], "cuvis_ai.utils.numpy.gen_coco_labels": [[158, null]], "cuvis_ai.utils.numpy.get_shape_without_batch": [[159, null]], "cuvis_ai.utils.numpy.unflatten_batch_and_labels": [[160, null]], "cuvis_ai.utils.numpy.unflatten_batch_and_spatial": [[161, null]], "cuvis_ai.utils.numpy.unflatten_labels": [[162, null]], "cuvis_ai.utils.numpy.unflatten_spatial": [[163, null]], "cuvis_ai.utils.serializer": [[164, null]], "cuvis_ai.utils.serializer.CuvisYamlDumper": [[165, null]], "cuvis_ai.utils.serializer.CuvisYamlLoader": [[166, null]], "cuvis_ai.utils.serializer.OldSerializer": [[167, null]], "cuvis_ai.utils.serializer.Serializer": [[168, null]], "cuvis_ai.utils.serializer.YamlSerializer": [[169, null]], "cuvis_ai.utils.serializer.numpy_array_binary_representer": [[170, null]], "cuvis_ai.utils.serializer.numpy_array_file_representer": [[171, null]], "cuvis_ai.utils.serializer.numpy_array_string_representer": [[172, null]], "cuvis_ai.utils.serializer.numpy_arrray_file_constructor": [[173, null]], "cuvis_ai.utils.serializer.numpy_arrray_string_constructor": [[174, null]], "cuvis_ai.utils.serializer.numpy_float32_constructor": [[175, null]], "cuvis_ai.utils.serializer.numpy_float32_representer": [[176, null]], "cuvis_ai.utils.serializer.numpy_float64_constructor": [[177, null]], "cuvis_ai.utils.serializer.numpy_float64_representer": [[178, null]], "cuvis_ai.utils.test": [[179, null]], "cuvis_ai.utils.test.get_np_dummy_data": [[180, null]], "cuvis_ai.utils.torch": [[181, null]], "cuvis_ai.utils.torch.InputDimension": [[182, null]], "cuvis_ai.utils.torch.extract_state_dict": [[183, null]], "cuvis_ai.utils.torch.get_output_shape": [[184, null]], "cuvis_ai.utils.torch.guess_input_dimensionalty": [[185, null]], "cuvis_ai.utils.torch.guess_state_dict_format": [[186, null]], "cuvis_ai.utils.visualize": [[187, null]], "cuvis_ai.utils.visualize.visualize_features": [[188, null]], "cuvis_ai.utils.visualize.visualize_image": [[189, null]], "pip installation (Comming Soon)": [[192, "pip-installation-comming-soon"]]}, "docnames": ["_autosummary/cuvis_ai", "_autosummary/cuvis_ai.data", "_autosummary/cuvis_ai.data.BaseDataSet", "_autosummary/cuvis_ai.data.BaseDataSet.BaseDataSet", "_autosummary/cuvis_ai.data.CuvisDataSet", "_autosummary/cuvis_ai.data.LiveCuvisDataLoader", "_autosummary/cuvis_ai.data.NumpyDataSet", "_autosummary/cuvis_ai.data.OutputFormat", "_autosummary/cuvis_ai.data.PublicDataSets", "_autosummary/cuvis_ai.data.cocolabels", "_autosummary/cuvis_ai.data.cocolabels.Annotation", "_autosummary/cuvis_ai.data.cocolabels.COCOData", "_autosummary/cuvis_ai.data.cocolabels.Category", "_autosummary/cuvis_ai.data.cocolabels.Image", "_autosummary/cuvis_ai.data.cocolabels.Info", "_autosummary/cuvis_ai.data.cocolabels.License", "_autosummary/cuvis_ai.data.cocolabels.QueryableList", "_autosummary/cuvis_ai.data.cocolabels.RLE2mask", "_autosummary/cuvis_ai.data.metadata", "_autosummary/cuvis_ai.data.metadata.Metadata", "_autosummary/cuvis_ai.data.metadata.get_meta_from_mesu", "_autosummary/cuvis_ai.data.metadata.get_meta_from_path", "_autosummary/cuvis_ai.data.metadata.get_meta_from_session", "_autosummary/cuvis_ai.data.utils_dataloader", "_autosummary/cuvis_ai.data.utils_dataloader.cuvis_collate", "_autosummary/cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset", "_autosummary/cuvis_ai.deciders", "_autosummary/cuvis_ai.deciders.base_decider", "_autosummary/cuvis_ai.deciders.base_decider.BaseDecider", "_autosummary/cuvis_ai.deciders.binary_decider", "_autosummary/cuvis_ai.deciders.binary_decider.BinaryDecider", "_autosummary/cuvis_ai.deciders.cascaded_decider", "_autosummary/cuvis_ai.deciders.cascaded_decider.Cascaded", "_autosummary/cuvis_ai.deciders.combining_decider", "_autosummary/cuvis_ai.deciders.combining_decider.CombiningDecider", "_autosummary/cuvis_ai.deciders.combining_decider.all_agree", "_autosummary/cuvis_ai.deciders.combining_decider.at_least_n_agree", "_autosummary/cuvis_ai.deciders.multiclass_decider", "_autosummary/cuvis_ai.deciders.multiclass_decider.MultiClassDecider", "_autosummary/cuvis_ai.distance", "_autosummary/cuvis_ai.distance.distance", "_autosummary/cuvis_ai.distance.distance.AbstractDistance", "_autosummary/cuvis_ai.distance.distance.Canberra", "_autosummary/cuvis_ai.distance.distance.ECS", "_autosummary/cuvis_ai.distance.distance.Euclidean", "_autosummary/cuvis_ai.distance.distance.GFC", "_autosummary/cuvis_ai.distance.distance.Manhattan", "_autosummary/cuvis_ai.distance.distance.Minkowski", "_autosummary/cuvis_ai.distance.distance.SpectralAngle", "_autosummary/cuvis_ai.node", "_autosummary/cuvis_ai.node.Consumers", "_autosummary/cuvis_ai.node.Consumers.CubeConsumer", "_autosummary/cuvis_ai.node.Consumers.LabelConsumer", "_autosummary/cuvis_ai.node.base", "_autosummary/cuvis_ai.node.base.BaseSupervised", "_autosummary/cuvis_ai.node.base.BaseTransformation", "_autosummary/cuvis_ai.node.base.BaseUnsupervised", "_autosummary/cuvis_ai.node.base.Preprocessor", "_autosummary/cuvis_ai.node.node", "_autosummary/cuvis_ai.node.node.Node", "_autosummary/cuvis_ai.node.sklearn", "_autosummary/cuvis_ai.node.sklearn.SklearnWrapped", "_autosummary/cuvis_ai.node.skorch", "_autosummary/cuvis_ai.node.skorch.SkorchWrapped", "_autosummary/cuvis_ai.node.torch", "_autosummary/cuvis_ai.node.torchvision", "_autosummary/cuvis_ai.node.wrap", "_autosummary/cuvis_ai.node.wrap.make_node", "_autosummary/cuvis_ai.pipeline", "_autosummary/cuvis_ai.pipeline.executor", "_autosummary/cuvis_ai.pipeline.executor.HummingBirdExecutor", "_autosummary/cuvis_ai.pipeline.executor.MemoryExecutor", "_autosummary/cuvis_ai.pipeline.graph", "_autosummary/cuvis_ai.pipeline.graph.Graph", "_autosummary/cuvis_ai.pipeline.graph.maybe_wrap_node", "_autosummary/cuvis_ai.pipeline.meta_routing", "_autosummary/cuvis_ai.pipeline.meta_routing.get_fit_metadata", "_autosummary/cuvis_ai.pipeline.meta_routing.get_forward_metadata", "_autosummary/cuvis_ai.pipeline.meta_routing.get_requested_metadata", "_autosummary/cuvis_ai.pipeline.meta_routing.get_route", "_autosummary/cuvis_ai.pipeline.meta_routing.traverse", "_autosummary/cuvis_ai.pipeline.validator", "_autosummary/cuvis_ai.pipeline.validator.GraphValidator", "_autosummary/cuvis_ai.pipeline.validator.ShapeValidator", "_autosummary/cuvis_ai.preprocessor", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.NMF", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.PCA", "_autosummary/cuvis_ai.supervised", "_autosummary/cuvis_ai.supervised.sklearn_wrapped", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.LDA", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.MLP", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.QDA", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.SVM", "_autosummary/cuvis_ai.supervised.skorch_supervised", "_autosummary/cuvis_ai.supervised.skorch_supervised.SkorchSupervised", "_autosummary/cuvis_ai.test", "_autosummary/cuvis_ai.test.test_numpy_utils", "_autosummary/cuvis_ai.test.test_numpy_utils.TestNumpyUtils", "_autosummary/cuvis_ai.test.test_pipeline_graph", "_autosummary/cuvis_ai.test.test_preprocessor_structural", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA", "_autosummary/cuvis_ai.test.test_unsupervised_structural", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode", "_autosummary/cuvis_ai.tv_transforms", "_autosummary/cuvis_ai.tv_transforms.Bandpass", "_autosummary/cuvis_ai.tv_transforms.Bandpass.call_super_init", "_autosummary/cuvis_ai.tv_transforms.Bandpass.dump_patches", "_autosummary/cuvis_ai.tv_transforms.Bandpass.training", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.call_super_init", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.dump_patches", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.training", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.training", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.training", "_autosummary/cuvis_ai.tv_transforms.WavelengthList", "_autosummary/cuvis_ai.unsupervised", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.GMM", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.KMeans", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.MeanShift", "_autosummary/cuvis_ai.utils", "_autosummary/cuvis_ai.utils.dependencies", "_autosummary/cuvis_ai.utils.dependencies.get_installed_packages", "_autosummary/cuvis_ai.utils.dependencies.get_installed_packages_str", "_autosummary/cuvis_ai.utils.dict", "_autosummary/cuvis_ai.utils.dict.add_prefix", "_autosummary/cuvis_ai.utils.dict.remove_prefix", "_autosummary/cuvis_ai.utils.dict.remove_prefix_str", "_autosummary/cuvis_ai.utils.filesystem", "_autosummary/cuvis_ai.utils.filesystem.change_working_dir", "_autosummary/cuvis_ai.utils.inspect", "_autosummary/cuvis_ai.utils.inspect.get_imports", "_autosummary/cuvis_ai.utils.inspect.get_members", "_autosummary/cuvis_ai.utils.inspect.get_referenced", "_autosummary/cuvis_ai.utils.inspect.get_source_file", "_autosummary/cuvis_ai.utils.inspect.get_src", "_autosummary/cuvis_ai.utils.nn_config", "_autosummary/cuvis_ai.utils.nn_config.Adam", "_autosummary/cuvis_ai.utils.nn_config.Optimizer", "_autosummary/cuvis_ai.utils.nn_config.SGD", "_autosummary/cuvis_ai.utils.numpy", "_autosummary/cuvis_ai.utils.numpy.binary_mask_to_rle", "_autosummary/cuvis_ai.utils.numpy.check_array_shape", "_autosummary/cuvis_ai.utils.numpy.flatten_batch_and_labels", "_autosummary/cuvis_ai.utils.numpy.flatten_batch_and_spatial", "_autosummary/cuvis_ai.utils.numpy.flatten_labels", "_autosummary/cuvis_ai.utils.numpy.flatten_spatial", "_autosummary/cuvis_ai.utils.numpy.gen_coco_labels", "_autosummary/cuvis_ai.utils.numpy.get_shape_without_batch", "_autosummary/cuvis_ai.utils.numpy.unflatten_batch_and_labels", "_autosummary/cuvis_ai.utils.numpy.unflatten_batch_and_spatial", "_autosummary/cuvis_ai.utils.numpy.unflatten_labels", "_autosummary/cuvis_ai.utils.numpy.unflatten_spatial", "_autosummary/cuvis_ai.utils.serializer", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlDumper", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlLoader", "_autosummary/cuvis_ai.utils.serializer.OldSerializer", "_autosummary/cuvis_ai.utils.serializer.Serializer", "_autosummary/cuvis_ai.utils.serializer.YamlSerializer", "_autosummary/cuvis_ai.utils.serializer.numpy_array_binary_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_array_file_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_array_string_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_file_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_string_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_float64_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_float64_representer", "_autosummary/cuvis_ai.utils.test", "_autosummary/cuvis_ai.utils.test.get_np_dummy_data", "_autosummary/cuvis_ai.utils.torch", "_autosummary/cuvis_ai.utils.torch.InputDimension", "_autosummary/cuvis_ai.utils.torch.extract_state_dict", "_autosummary/cuvis_ai.utils.torch.get_output_shape", "_autosummary/cuvis_ai.utils.torch.guess_input_dimensionalty", "_autosummary/cuvis_ai.utils.torch.guess_state_dict_format", "_autosummary/cuvis_ai.utils.visualize", "_autosummary/cuvis_ai.utils.visualize.visualize_features", "_autosummary/cuvis_ai.utils.visualize.visualize_image", "index", "user/concepts", "user/installation", "user/quickstart", "user/tutorials"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["_autosummary/cuvis_ai.rst", "_autosummary/cuvis_ai.data.rst", "_autosummary/cuvis_ai.data.BaseDataSet.rst", "_autosummary/cuvis_ai.data.BaseDataSet.BaseDataSet.rst", "_autosummary/cuvis_ai.data.CuvisDataSet.rst", "_autosummary/cuvis_ai.data.LiveCuvisDataLoader.rst", "_autosummary/cuvis_ai.data.NumpyDataSet.rst", "_autosummary/cuvis_ai.data.OutputFormat.rst", "_autosummary/cuvis_ai.data.PublicDataSets.rst", "_autosummary/cuvis_ai.data.cocolabels.rst", "_autosummary/cuvis_ai.data.cocolabels.Annotation.rst", "_autosummary/cuvis_ai.data.cocolabels.COCOData.rst", "_autosummary/cuvis_ai.data.cocolabels.Category.rst", "_autosummary/cuvis_ai.data.cocolabels.Image.rst", "_autosummary/cuvis_ai.data.cocolabels.Info.rst", "_autosummary/cuvis_ai.data.cocolabels.License.rst", "_autosummary/cuvis_ai.data.cocolabels.QueryableList.rst", "_autosummary/cuvis_ai.data.cocolabels.RLE2mask.rst", "_autosummary/cuvis_ai.data.metadata.rst", "_autosummary/cuvis_ai.data.metadata.Metadata.rst", "_autosummary/cuvis_ai.data.metadata.get_meta_from_mesu.rst", "_autosummary/cuvis_ai.data.metadata.get_meta_from_path.rst", "_autosummary/cuvis_ai.data.metadata.get_meta_from_session.rst", "_autosummary/cuvis_ai.data.utils_dataloader.rst", "_autosummary/cuvis_ai.data.utils_dataloader.cuvis_collate.rst", "_autosummary/cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset.rst", "_autosummary/cuvis_ai.deciders.rst", "_autosummary/cuvis_ai.deciders.base_decider.rst", "_autosummary/cuvis_ai.deciders.base_decider.BaseDecider.rst", "_autosummary/cuvis_ai.deciders.binary_decider.rst", "_autosummary/cuvis_ai.deciders.binary_decider.BinaryDecider.rst", "_autosummary/cuvis_ai.deciders.cascaded_decider.rst", "_autosummary/cuvis_ai.deciders.cascaded_decider.Cascaded.rst", "_autosummary/cuvis_ai.deciders.combining_decider.rst", "_autosummary/cuvis_ai.deciders.combining_decider.CombiningDecider.rst", "_autosummary/cuvis_ai.deciders.combining_decider.all_agree.rst", "_autosummary/cuvis_ai.deciders.combining_decider.at_least_n_agree.rst", "_autosummary/cuvis_ai.deciders.multiclass_decider.rst", "_autosummary/cuvis_ai.deciders.multiclass_decider.MultiClassDecider.rst", "_autosummary/cuvis_ai.distance.rst", "_autosummary/cuvis_ai.distance.distance.rst", "_autosummary/cuvis_ai.distance.distance.AbstractDistance.rst", "_autosummary/cuvis_ai.distance.distance.Canberra.rst", "_autosummary/cuvis_ai.distance.distance.ECS.rst", "_autosummary/cuvis_ai.distance.distance.Euclidean.rst", "_autosummary/cuvis_ai.distance.distance.GFC.rst", "_autosummary/cuvis_ai.distance.distance.Manhattan.rst", "_autosummary/cuvis_ai.distance.distance.Minkowski.rst", "_autosummary/cuvis_ai.distance.distance.SpectralAngle.rst", "_autosummary/cuvis_ai.node.rst", "_autosummary/cuvis_ai.node.Consumers.rst", "_autosummary/cuvis_ai.node.Consumers.CubeConsumer.rst", "_autosummary/cuvis_ai.node.Consumers.LabelConsumer.rst", "_autosummary/cuvis_ai.node.base.rst", "_autosummary/cuvis_ai.node.base.BaseSupervised.rst", "_autosummary/cuvis_ai.node.base.BaseTransformation.rst", "_autosummary/cuvis_ai.node.base.BaseUnsupervised.rst", "_autosummary/cuvis_ai.node.base.Preprocessor.rst", "_autosummary/cuvis_ai.node.node.rst", "_autosummary/cuvis_ai.node.node.Node.rst", "_autosummary/cuvis_ai.node.sklearn.rst", "_autosummary/cuvis_ai.node.sklearn.SklearnWrapped.rst", "_autosummary/cuvis_ai.node.skorch.rst", "_autosummary/cuvis_ai.node.skorch.SkorchWrapped.rst", "_autosummary/cuvis_ai.node.torch.rst", "_autosummary/cuvis_ai.node.torchvision.rst", "_autosummary/cuvis_ai.node.wrap.rst", "_autosummary/cuvis_ai.node.wrap.make_node.rst", "_autosummary/cuvis_ai.pipeline.rst", "_autosummary/cuvis_ai.pipeline.executor.rst", "_autosummary/cuvis_ai.pipeline.executor.HummingBirdExecutor.rst", "_autosummary/cuvis_ai.pipeline.executor.MemoryExecutor.rst", "_autosummary/cuvis_ai.pipeline.graph.rst", "_autosummary/cuvis_ai.pipeline.graph.Graph.rst", "_autosummary/cuvis_ai.pipeline.graph.maybe_wrap_node.rst", "_autosummary/cuvis_ai.pipeline.meta_routing.rst", "_autosummary/cuvis_ai.pipeline.meta_routing.get_fit_metadata.rst", "_autosummary/cuvis_ai.pipeline.meta_routing.get_forward_metadata.rst", "_autosummary/cuvis_ai.pipeline.meta_routing.get_requested_metadata.rst", "_autosummary/cuvis_ai.pipeline.meta_routing.get_route.rst", "_autosummary/cuvis_ai.pipeline.meta_routing.traverse.rst", "_autosummary/cuvis_ai.pipeline.validator.rst", "_autosummary/cuvis_ai.pipeline.validator.GraphValidator.rst", "_autosummary/cuvis_ai.pipeline.validator.ShapeValidator.rst", "_autosummary/cuvis_ai.preprocessor.rst", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.rst", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.NMF.rst", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.PCA.rst", "_autosummary/cuvis_ai.supervised.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.LDA.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.MLP.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.QDA.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.SVM.rst", "_autosummary/cuvis_ai.supervised.skorch_supervised.rst", "_autosummary/cuvis_ai.supervised.skorch_supervised.SkorchSupervised.rst", "_autosummary/cuvis_ai.test.rst", "_autosummary/cuvis_ai.test.test_numpy_utils.rst", "_autosummary/cuvis_ai.test.test_numpy_utils.TestNumpyUtils.rst", "_autosummary/cuvis_ai.test.test_pipeline_graph.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.rst", "_autosummary/cuvis_ai.tv_transforms.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.training.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.training.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.training.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.training.rst", "_autosummary/cuvis_ai.tv_transforms.WavelengthList.rst", "_autosummary/cuvis_ai.unsupervised.rst", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.rst", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.GMM.rst", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.KMeans.rst", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.rst", "_autosummary/cuvis_ai.utils.rst", "_autosummary/cuvis_ai.utils.dependencies.rst", "_autosummary/cuvis_ai.utils.dependencies.get_installed_packages.rst", "_autosummary/cuvis_ai.utils.dependencies.get_installed_packages_str.rst", "_autosummary/cuvis_ai.utils.dict.rst", "_autosummary/cuvis_ai.utils.dict.add_prefix.rst", "_autosummary/cuvis_ai.utils.dict.remove_prefix.rst", "_autosummary/cuvis_ai.utils.dict.remove_prefix_str.rst", "_autosummary/cuvis_ai.utils.filesystem.rst", "_autosummary/cuvis_ai.utils.filesystem.change_working_dir.rst", "_autosummary/cuvis_ai.utils.inspect.rst", "_autosummary/cuvis_ai.utils.inspect.get_imports.rst", "_autosummary/cuvis_ai.utils.inspect.get_members.rst", "_autosummary/cuvis_ai.utils.inspect.get_referenced.rst", "_autosummary/cuvis_ai.utils.inspect.get_source_file.rst", "_autosummary/cuvis_ai.utils.inspect.get_src.rst", "_autosummary/cuvis_ai.utils.nn_config.rst", "_autosummary/cuvis_ai.utils.nn_config.Adam.rst", "_autosummary/cuvis_ai.utils.nn_config.Optimizer.rst", "_autosummary/cuvis_ai.utils.nn_config.SGD.rst", "_autosummary/cuvis_ai.utils.numpy.rst", "_autosummary/cuvis_ai.utils.numpy.binary_mask_to_rle.rst", "_autosummary/cuvis_ai.utils.numpy.check_array_shape.rst", "_autosummary/cuvis_ai.utils.numpy.flatten_batch_and_labels.rst", "_autosummary/cuvis_ai.utils.numpy.flatten_batch_and_spatial.rst", "_autosummary/cuvis_ai.utils.numpy.flatten_labels.rst", "_autosummary/cuvis_ai.utils.numpy.flatten_spatial.rst", "_autosummary/cuvis_ai.utils.numpy.gen_coco_labels.rst", "_autosummary/cuvis_ai.utils.numpy.get_shape_without_batch.rst", "_autosummary/cuvis_ai.utils.numpy.unflatten_batch_and_labels.rst", "_autosummary/cuvis_ai.utils.numpy.unflatten_batch_and_spatial.rst", "_autosummary/cuvis_ai.utils.numpy.unflatten_labels.rst", "_autosummary/cuvis_ai.utils.numpy.unflatten_spatial.rst", "_autosummary/cuvis_ai.utils.serializer.rst", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlDumper.rst", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlLoader.rst", "_autosummary/cuvis_ai.utils.serializer.OldSerializer.rst", "_autosummary/cuvis_ai.utils.serializer.Serializer.rst", "_autosummary/cuvis_ai.utils.serializer.YamlSerializer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_array_binary_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_array_file_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_array_string_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_file_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_string_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float64_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float64_representer.rst", "_autosummary/cuvis_ai.utils.test.rst", "_autosummary/cuvis_ai.utils.test.get_np_dummy_data.rst", "_autosummary/cuvis_ai.utils.torch.rst", "_autosummary/cuvis_ai.utils.torch.InputDimension.rst", "_autosummary/cuvis_ai.utils.torch.extract_state_dict.rst", "_autosummary/cuvis_ai.utils.torch.get_output_shape.rst", "_autosummary/cuvis_ai.utils.torch.guess_input_dimensionalty.rst", "_autosummary/cuvis_ai.utils.torch.guess_state_dict_format.rst", "_autosummary/cuvis_ai.utils.visualize.rst", "_autosummary/cuvis_ai.utils.visualize.visualize_features.rst", "_autosummary/cuvis_ai.utils.visualize.visualize_image.rst", "index.rst", "user/concepts.rst", "user/installation.rst", "user/quickstart.rst", "user/tutorials.rst"], "indexentries": {"__init__() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.annotation method)": [[10, "cuvis_ai.data.cocolabels.Annotation.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.category method)": [[12, "cuvis_ai.data.cocolabels.Category.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.cocodata method)": [[11, "cuvis_ai.data.cocolabels.COCOData.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.image method)": [[13, "cuvis_ai.data.cocolabels.Image.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.info method)": [[14, "cuvis_ai.data.cocolabels.Info.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.license method)": [[15, "cuvis_ai.data.cocolabels.License.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.queryablelist method)": [[16, "cuvis_ai.data.cocolabels.QueryableList.__init__", false]], "__init__() (cuvis_ai.data.metadata.metadata method)": [[19, "cuvis_ai.data.metadata.Metadata.__init__", false]], "__init__() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.__init__", false]], "__init__() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.__init__", false]], "__init__() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.__init__", false]], "__init__() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.__init__", false]], "__init__() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.__init__", false]], "__init__() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.__init__", false]], "__init__() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.__init__", false]], "__init__() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.__init__", false]], "__init__() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.__init__", false]], "__init__() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.__init__", false]], "__init__() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.__init__", false]], "__init__() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.__init__", false]], "__init__() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.__init__", false]], "__init__() (cuvis_ai.node.base.basesupervised method)": [[54, "cuvis_ai.node.base.BaseSupervised.__init__", false]], "__init__() (cuvis_ai.node.base.basetransformation method)": [[55, "cuvis_ai.node.base.BaseTransformation.__init__", false]], "__init__() (cuvis_ai.node.base.baseunsupervised method)": [[56, "cuvis_ai.node.base.BaseUnsupervised.__init__", false]], "__init__() (cuvis_ai.node.base.preprocessor method)": [[57, "cuvis_ai.node.base.Preprocessor.__init__", false]], "__init__() (cuvis_ai.node.consumers.cubeconsumer method)": [[51, "cuvis_ai.node.Consumers.CubeConsumer.__init__", false]], "__init__() (cuvis_ai.node.consumers.labelconsumer method)": [[52, "cuvis_ai.node.Consumers.LabelConsumer.__init__", false]], "__init__() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.__init__", false]], "__init__() (cuvis_ai.node.sklearn.sklearnwrapped method)": [[61, "cuvis_ai.node.sklearn.SklearnWrapped.__init__", false]], "__init__() (cuvis_ai.node.skorch.skorchwrapped method)": [[63, "cuvis_ai.node.skorch.SkorchWrapped.__init__", false]], "__init__() (cuvis_ai.pipeline.executor.hummingbirdexecutor method)": [[70, "cuvis_ai.pipeline.executor.HummingBirdExecutor.__init__", false]], "__init__() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor.__init__", false]], "__init__() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.__init__", false]], "__init__() (cuvis_ai.pipeline.validator.graphvalidator method)": [[82, "cuvis_ai.pipeline.validator.GraphValidator.__init__", false]], "__init__() (cuvis_ai.pipeline.validator.shapevalidator method)": [[83, "cuvis_ai.pipeline.validator.ShapeValidator.__init__", false]], "__init__() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.__init__", false]], "__init__() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.__init__", false]], "__init__() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.__init__", false]], "__init__() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.__init__", false]], "__init__() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.__init__", false]], "__init__() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.__init__", false]], "__init__() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[95, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.__init__", false]], "__init__() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.__init__", false]], "__init__() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.__init__", false]], "__init__() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.__init__", false]], "__init__() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.__init__", false]], "__init__() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.__init__", false]], "__init__() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.__init__", false]], "__init__() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[107, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.__init__", false]], "__init__() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.__init__", false]], "__init__() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.__init__", false]], "__init__() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.__init__", false]], "__init__() (cuvis_ai.utils.nn_config.adam method)": [[148, "cuvis_ai.utils.nn_config.Adam.__init__", false]], "__init__() (cuvis_ai.utils.nn_config.optimizer method)": [[149, "cuvis_ai.utils.nn_config.Optimizer.__init__", false]], "__init__() (cuvis_ai.utils.nn_config.sgd method)": [[150, "cuvis_ai.utils.nn_config.SGD.__init__", false]], "__init__() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.__init__", false]], "__init__() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.__init__", false]], "__init__() (cuvis_ai.utils.serializer.oldserializer method)": [[167, "cuvis_ai.utils.serializer.OldSerializer.__init__", false]], "__init__() (cuvis_ai.utils.serializer.serializer method)": [[168, "cuvis_ai.utils.serializer.Serializer.__init__", false]], "__init__() (cuvis_ai.utils.serializer.yamlserializer method)": [[169, "cuvis_ai.utils.serializer.YamlSerializer.__init__", false]], "__init__() (cuvis_ai.utils.torch.inputdimension method)": [[182, "cuvis_ai.utils.torch.InputDimension.__init__", false]], "abstractdistance (class in cuvis_ai.distance.distance)": [[41, "cuvis_ai.distance.distance.AbstractDistance", false]], "adam (class in cuvis_ai.utils.nn_config)": [[148, "cuvis_ai.utils.nn_config.Adam", false]], "add_base_node() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.add_base_node", false]], "add_constructor() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_constructor", false]], "add_edge() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.add_edge", false]], "add_implicit_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_implicit_resolver", false]], "add_implicit_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_implicit_resolver", false]], "add_indent() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_indent", false]], "add_multi_constructor() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_multi_constructor", false]], "add_multi_representer() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_multi_representer", false]], "add_node() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.add_node", false]], "add_path_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_path_resolver", false]], "add_path_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_path_resolver", false]], "add_prefix() (in module cuvis_ai.utils.dict)": [[136, "cuvis_ai.utils.dict.add_prefix", false]], "add_representer() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_representer", false]], "addclasscleanup() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.addClassCleanup", false]], "addcleanup() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.addCleanup", false]], "addtypeequalityfunc() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.addTypeEqualityFunc", false]], "all_agree() (in module cuvis_ai.deciders.combining_decider)": [[35, "cuvis_ai.deciders.combining_decider.all_agree", false]], "all_fields (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.all_fields", false]], "all_fields (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.all_fields", false]], "all_fields (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.all_fields", false]], "all_fields (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.all_fields", false]], "all_fields (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.all_fields", false]], "alpha (cuvis_ai.utils.nn_config.adam attribute)": [[148, "cuvis_ai.utils.nn_config.Adam.alpha", false]], "alpha (cuvis_ai.utils.nn_config.sgd attribute)": [[150, "cuvis_ai.utils.nn_config.SGD.alpha", false]], "analyze_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.analyze_scalar", false]], "anchor_node() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.anchor_node", false]], "anchor_template (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.ANCHOR_TEMPLATE", false]], "annotation (class in cuvis_ai.data.cocolabels)": [[10, "cuvis_ai.data.cocolabels.Annotation", false]], "annotation.meta (class in cuvis_ai.data.cocolabels)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta", false]], "annotations (cuvis_ai.data.cocolabels.cocodata property)": [[11, "cuvis_ai.data.cocolabels.COCOData.annotations", false]], "area (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.area", false]], "args (cuvis_ai.utils.nn_config.adam property)": [[148, "cuvis_ai.utils.nn_config.Adam.args", false]], "args (cuvis_ai.utils.nn_config.optimizer property)": [[149, "cuvis_ai.utils.nn_config.Optimizer.args", false]], "args (cuvis_ai.utils.nn_config.sgd property)": [[150, "cuvis_ai.utils.nn_config.SGD.args", false]], "ascend_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.ascend_resolver", false]], "ascend_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.ascend_resolver", false]], "asdict() (cuvis_ai.data.metadata.metadata method)": [[19, "cuvis_ai.data.metadata.Metadata.asdict", false]], "assert_() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assert_", false]], "assert_() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assert_", false]], "assert_() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assert_", false]], "assert_() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assert_", false]], "assert_() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assert_", false]], "assertalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertAlmostEqual", false]], "assertalmostequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertAlmostEquals", false]], "assertcountequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertCountEqual", false]], "assertdictcontainssubset() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertDictContainsSubset", false]], "assertdictequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertDictEqual", false]], "assertequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertEqual", false]], "assertequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertEqual", false]], "assertequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertEqual", false]], "assertequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertEqual", false]], "assertequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertEqual", false]], "assertequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertEquals", false]], "assertequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertEquals", false]], "assertequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertEquals", false]], "assertequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertEquals", false]], "assertequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertEquals", false]], "assertfalse() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertFalse", false]], "assertgreater() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertGreater", false]], "assertgreaterequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertGreaterEqual", false]], "assertin() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIn", false]], "assertin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIn", false]], "assertin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIn", false]], "assertin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIn", false]], "assertin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIn", false]], "assertis() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIs", false]], "assertis() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIs", false]], "assertis() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIs", false]], "assertis() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIs", false]], "assertis() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIs", false]], "assertisinstance() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsInstance", false]], "assertisnone() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsNone", false]], "assertisnot() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsNot", false]], "assertisnotnone() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsNotNone", false]], "assertless() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertLess", false]], "assertless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertLess", false]], "assertless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertLess", false]], "assertless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertLess", false]], "assertless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertLess", false]], "assertlessequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertLessEqual", false]], "assertlistequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertListEqual", false]], "assertlogs() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertLogs", false]], "assertmultilineequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertMultiLineEqual", false]], "assertnologs() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNoLogs", false]], "assertnotalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotAlmostEqual", false]], "assertnotalmostequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotAlmostEquals", false]], "assertnotequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotEqual", false]], "assertnotequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotEquals", false]], "assertnotin() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotIn", false]], "assertnotisinstance() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotIsInstance", false]], "assertnotregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotRegex", false]], "assertnotregexpmatches() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotRegexpMatches", false]], "assertraises() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRaises", false]], "assertraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRaises", false]], "assertraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRaises", false]], "assertraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRaises", false]], "assertraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRaises", false]], "assertraisesregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRaisesRegex", false]], "assertraisesregexp() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRaisesRegexp", false]], "assertregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRegex", false]], "assertregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRegex", false]], "assertregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRegex", false]], "assertregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRegex", false]], "assertregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRegex", false]], "assertregexpmatches() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRegexpMatches", false]], "assertsequenceequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertSequenceEqual", false]], "assertsetequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertSetEqual", false]], "asserttrue() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertTrue", false]], "asserttupleequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertTupleEqual", false]], "assertwarns() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertWarns", false]], "assertwarnsregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertWarnsRegex", false]], "at_least_n_agree() (in module cuvis_ai.deciders.combining_decider)": [[36, "cuvis_ai.deciders.combining_decider.at_least_n_agree", false]], "auto_assign_tags (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.auto_assign_tags", false]], "auto_assign_tags (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.auto_assign_tags", false]], "auto_assign_tags (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.auto_assign_tags", false]], "auto_assign_tags (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.auto_assign_tags", false]], "auto_assign_tags (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.auto_assign_tags", false]], "auxiliary (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.auxiliary", false]], "basedataset (class in cuvis_ai.data.basedataset)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet", false]], "basedecider (class in cuvis_ai.deciders.base_decider)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider", false]], "basesupervised (class in cuvis_ai.node.base)": [[54, "cuvis_ai.node.base.BaseSupervised", false]], "basetransformation (class in cuvis_ai.node.base)": [[55, "cuvis_ai.node.base.BaseTransformation", false]], "baseunsupervised (class in cuvis_ai.node.base)": [[56, "cuvis_ai.node.base.BaseUnsupervised", false]], "bbox (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.bbox", false]], "beta_1 (cuvis_ai.utils.nn_config.adam attribute)": [[148, "cuvis_ai.utils.nn_config.Adam.beta_1", false]], "beta_2 (cuvis_ai.utils.nn_config.adam attribute)": [[148, "cuvis_ai.utils.nn_config.Adam.beta_2", false]], "binary_mask_to_rle() (in module cuvis_ai.utils.numpy)": [[152, "cuvis_ai.utils.numpy.binary_mask_to_rle", false]], "binarydecider (class in cuvis_ai.deciders.binary_decider)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider", false]], "bind_to() (cuvis_ai.data.cocolabels.annotation.meta class method)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.bind_to", false]], "bind_to() (cuvis_ai.data.cocolabels.category.meta class method)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.bind_to", false]], "bind_to() (cuvis_ai.data.cocolabels.image.meta class method)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.bind_to", false]], "bind_to() (cuvis_ai.data.cocolabels.info.meta class method)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.bind_to", false]], "bind_to() (cuvis_ai.data.cocolabels.license.meta class method)": [[15, "cuvis_ai.data.cocolabels.License.Meta.bind_to", false]], "bit_depth (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.bit_depth", false]], "bool_values (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.bool_values", false]], "call_super_init (cuvis_ai.tv_transforms.bandpass attribute)": [[110, "cuvis_ai.tv_transforms.Bandpass.call_super_init", false]], "call_super_init (cuvis_ai.tv_transforms.multibandpass attribute)": [[114, "cuvis_ai.tv_transforms.MultiBandpass.call_super_init", false]], "call_super_init (cuvis_ai.tv_transforms.normalizestddev attribute)": [[118, "cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init", false]], "call_super_init (cuvis_ai.tv_transforms.normalizetofloat attribute)": [[122, "cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init", false]], "canberra (class in cuvis_ai.distance.distance)": [[42, "cuvis_ai.distance.distance.Canberra", false]], "cascaded (class in cuvis_ai.deciders.cascaded_decider)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded", false]], "category (class in cuvis_ai.data.cocolabels)": [[12, "cuvis_ai.data.cocolabels.Category", false]], "category.meta (class in cuvis_ai.data.cocolabels)": [[12, "cuvis_ai.data.cocolabels.Category.Meta", false]], "category_id (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.category_id", false]], "change_working_dir() (in module cuvis_ai.utils.filesystem)": [[140, "cuvis_ai.utils.filesystem.change_working_dir", false]], "check_array_shape() (in module cuvis_ai.utils.numpy)": [[153, "cuvis_ai.utils.numpy.check_array_shape", false]], "check_block_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_block_entry", false]], "check_data() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_data", false]], "check_directive() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_directive", false]], "check_document_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_document_end", false]], "check_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_document_start", false]], "check_empty_document() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_empty_document", false]], "check_empty_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_empty_mapping", false]], "check_empty_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_empty_sequence", false]], "check_event() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_event", false]], "check_input_dim() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.check_input_dim", false]], "check_input_dim() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.check_input_dim", false]], "check_input_dim() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.check_input_dim", false]], "check_input_dim() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.check_input_dim", false]], "check_input_dim() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.check_input_dim", false]], "check_input_dim() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.check_input_dim", false]], "check_input_dim() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.check_input_dim", false]], "check_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_key", false]], "check_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_node", false]], "check_output_dim() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.check_output_dim", false]], "check_output_dim() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.check_output_dim", false]], "check_output_dim() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.check_output_dim", false]], "check_output_dim() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.check_output_dim", false]], "check_output_dim() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.check_output_dim", false]], "check_output_dim() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.check_output_dim", false]], "check_output_dim() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.check_output_dim", false]], "check_plain() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_plain", false]], "check_printable() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_printable", false]], "check_resolver_prefix() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_resolver_prefix", false]], "check_resolver_prefix() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_resolver_prefix", false]], "check_simple_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_simple_key", false]], "check_state_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_state_key", false]], "check_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_token", false]], "check_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_value", false]], "choose_scalar_style() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.choose_scalar_style", false]], "close() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.close", false]], "coco_url (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.coco_url", false]], "cocodata (class in cuvis_ai.data.cocolabels)": [[11, "cuvis_ai.data.cocolabels.COCOData", false]], "combiningdecider (class in cuvis_ai.deciders.combining_decider)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider", false]], "compose_document() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_document", false]], "compose_mapping_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_mapping_node", false]], "compose_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_node", false]], "compose_scalar_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_scalar_node", false]], "compose_sequence_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_sequence_node", false]], "construct_document() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_document", false]], "construct_mapping() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_mapping", false]], "construct_object() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_object", false]], "construct_pairs() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_pairs", false]], "construct_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_scalar", false]], "construct_sequence() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_sequence", false]], "construct_undefined() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_undefined", false]], "construct_yaml_binary() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_binary", false]], "construct_yaml_bool() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_bool", false]], "construct_yaml_float() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_float", false]], "construct_yaml_int() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_int", false]], "construct_yaml_map() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_map", false]], "construct_yaml_null() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_null", false]], "construct_yaml_object() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_object", false]], "construct_yaml_omap() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_omap", false]], "construct_yaml_pairs() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_pairs", false]], "construct_yaml_seq() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_seq", false]], "construct_yaml_set() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_set", false]], "construct_yaml_str() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_str", false]], "construct_yaml_timestamp() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_timestamp", false]], "contributor (cuvis_ai.data.cocolabels.info attribute)": [[14, "cuvis_ai.data.cocolabels.Info.contributor", false]], "counttestcases() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.countTestCases", false]], "cubeconsumer (class in cuvis_ai.node.consumers)": [[51, "cuvis_ai.node.Consumers.CubeConsumer", false]], "custom_copy() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.custom_copy", false]], "cuvis_ai": [[0, "module-cuvis_ai", false]], "cuvis_ai.data": [[1, "module-cuvis_ai.data", false]], "cuvis_ai.data.basedataset": [[2, "module-cuvis_ai.data.BaseDataSet", false]], "cuvis_ai.data.cocolabels": [[9, "module-cuvis_ai.data.cocolabels", false]], "cuvis_ai.data.cuvisdataset": [[4, "module-cuvis_ai.data.CuvisDataSet", false]], "cuvis_ai.data.livecuvisdataloader": [[5, "module-cuvis_ai.data.LiveCuvisDataLoader", false]], "cuvis_ai.data.metadata": [[18, "module-cuvis_ai.data.metadata", false]], "cuvis_ai.data.numpydataset": [[6, "module-cuvis_ai.data.NumpyDataSet", false]], "cuvis_ai.data.outputformat": [[7, "module-cuvis_ai.data.OutputFormat", false]], "cuvis_ai.data.publicdatasets": [[8, "module-cuvis_ai.data.PublicDataSets", false]], "cuvis_ai.data.utils_dataloader": [[23, "module-cuvis_ai.data.utils_dataloader", false]], "cuvis_ai.deciders": [[26, "module-cuvis_ai.deciders", false]], "cuvis_ai.deciders.base_decider": [[27, "module-cuvis_ai.deciders.base_decider", false]], "cuvis_ai.deciders.binary_decider": [[29, "module-cuvis_ai.deciders.binary_decider", false]], "cuvis_ai.deciders.cascaded_decider": [[31, "module-cuvis_ai.deciders.cascaded_decider", false]], "cuvis_ai.deciders.combining_decider": [[33, "module-cuvis_ai.deciders.combining_decider", false]], "cuvis_ai.deciders.multiclass_decider": [[37, "module-cuvis_ai.deciders.multiclass_decider", false]], "cuvis_ai.distance": [[39, "module-cuvis_ai.distance", false]], "cuvis_ai.distance.distance": [[40, "module-cuvis_ai.distance.distance", false]], "cuvis_ai.node": [[49, "module-cuvis_ai.node", false]], "cuvis_ai.node.base": [[53, "module-cuvis_ai.node.base", false]], "cuvis_ai.node.consumers": [[50, "module-cuvis_ai.node.Consumers", false]], "cuvis_ai.node.node": [[58, "module-cuvis_ai.node.node", false]], "cuvis_ai.node.sklearn": [[60, "module-cuvis_ai.node.sklearn", false]], "cuvis_ai.node.skorch": [[62, "module-cuvis_ai.node.skorch", false]], "cuvis_ai.node.torch": [[64, "module-cuvis_ai.node.torch", false]], "cuvis_ai.node.torchvision": [[65, "module-cuvis_ai.node.torchvision", false]], "cuvis_ai.node.wrap": [[66, "module-cuvis_ai.node.wrap", false]], "cuvis_ai.pipeline": [[68, "module-cuvis_ai.pipeline", false]], "cuvis_ai.pipeline.executor": [[69, "module-cuvis_ai.pipeline.executor", false]], "cuvis_ai.pipeline.graph": [[72, "module-cuvis_ai.pipeline.graph", false]], "cuvis_ai.pipeline.meta_routing": [[75, "module-cuvis_ai.pipeline.meta_routing", false]], "cuvis_ai.pipeline.validator": [[81, "module-cuvis_ai.pipeline.validator", false]], "cuvis_ai.preprocessor": [[84, "module-cuvis_ai.preprocessor", false]], "cuvis_ai.preprocessor.sklearn_wrapped": [[85, "module-cuvis_ai.preprocessor.sklearn_wrapped", false]], "cuvis_ai.supervised": [[88, "module-cuvis_ai.supervised", false]], "cuvis_ai.supervised.sklearn_wrapped": [[89, "module-cuvis_ai.supervised.sklearn_wrapped", false]], "cuvis_ai.supervised.skorch_supervised": [[94, "module-cuvis_ai.supervised.skorch_supervised", false]], "cuvis_ai.test": [[96, "module-cuvis_ai.test", false]], "cuvis_ai.test.test_numpy_utils": [[97, "module-cuvis_ai.test.test_numpy_utils", false]], "cuvis_ai.test.test_pipeline_graph": [[99, "module-cuvis_ai.test.test_pipeline_graph", false]], "cuvis_ai.test.test_preprocessor_structural": [[100, "module-cuvis_ai.test.test_preprocessor_structural", false]], "cuvis_ai.test.test_unsupervised_structural": [[104, "module-cuvis_ai.test.test_unsupervised_structural", false]], "cuvis_ai.tv_transforms": [[108, "module-cuvis_ai.tv_transforms", false]], "cuvis_ai.tv_transforms.bandpass": [[109, "module-cuvis_ai.tv_transforms.Bandpass", false]], "cuvis_ai.tv_transforms.multibandpass": [[113, "module-cuvis_ai.tv_transforms.MultiBandpass", false]], "cuvis_ai.tv_transforms.normalizestddev": [[117, "module-cuvis_ai.tv_transforms.NormalizeStdDev", false]], "cuvis_ai.tv_transforms.normalizetofloat": [[121, "module-cuvis_ai.tv_transforms.NormalizeToFloat", false]], "cuvis_ai.tv_transforms.wavelengthlist": [[125, "module-cuvis_ai.tv_transforms.WavelengthList", false]], "cuvis_ai.unsupervised": [[126, "module-cuvis_ai.unsupervised", false]], "cuvis_ai.unsupervised.sklearn_wrapped": [[127, "module-cuvis_ai.unsupervised.sklearn_wrapped", false]], "cuvis_ai.utils": [[131, "module-cuvis_ai.utils", false]], "cuvis_ai.utils.dependencies": [[132, "module-cuvis_ai.utils.dependencies", false]], "cuvis_ai.utils.dict": [[135, "module-cuvis_ai.utils.dict", false]], "cuvis_ai.utils.filesystem": [[139, "module-cuvis_ai.utils.filesystem", false]], "cuvis_ai.utils.inspect": [[141, "module-cuvis_ai.utils.inspect", false]], "cuvis_ai.utils.nn_config": [[147, "module-cuvis_ai.utils.nn_config", false]], "cuvis_ai.utils.numpy": [[151, "module-cuvis_ai.utils.numpy", false]], "cuvis_ai.utils.serializer": [[164, "module-cuvis_ai.utils.serializer", false]], "cuvis_ai.utils.test": [[179, "module-cuvis_ai.utils.test", false]], "cuvis_ai.utils.torch": [[181, "module-cuvis_ai.utils.torch", false]], "cuvis_ai.utils.visualize": [[187, "module-cuvis_ai.utils.visualize", false]], "cuvis_collate() (in module cuvis_ai.data.utils_dataloader)": [[24, "cuvis_ai.data.utils_dataloader.cuvis_collate", false]], "cuvisyamldumper (class in cuvis_ai.utils.serializer)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper", false]], "cuvisyamlloader (class in cuvis_ai.utils.serializer)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader", false]], "dataclass() (cuvis_ai.data.metadata.metadata method)": [[19, "cuvis_ai.data.metadata.Metadata.dataclass", false]], "date_captured (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.date_captured", false]], "date_created (cuvis_ai.data.cocolabels.info attribute)": [[14, "cuvis_ai.data.cocolabels.Info.date_created", false]], "debug() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.debug", false]], "debug() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.debug", false]], "debug() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.debug", false]], "debug() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.debug", false]], "debug() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.debug", false]], "debug_enabled (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.debug_enabled", false]], "debug_enabled (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.debug_enabled", false]], "debug_enabled (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.debug_enabled", false]], "debug_enabled (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.debug_enabled", false]], "debug_enabled (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.debug_enabled", false]], "default_mapping_tag (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_MAPPING_TAG", false]], "default_mapping_tag (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_MAPPING_TAG", false]], "default_scalar_tag (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_SCALAR_TAG", false]], "default_scalar_tag (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_SCALAR_TAG", false]], "default_sequence_tag (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_SEQUENCE_TAG", false]], "default_sequence_tag (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_SEQUENCE_TAG", false]], "default_tag_prefixes (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_TAG_PREFIXES", false]], "default_tags (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_TAGS", false]], "defaulttestresult() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.defaultTestResult", false]], "delete_node() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.delete_node", false]], "descend_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.descend_resolver", false]], "descend_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.descend_resolver", false]], "description (cuvis_ai.data.cocolabels.info attribute)": [[14, "cuvis_ai.data.cocolabels.Info.description", false]], "determine_block_hints() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.determine_block_hints", false]], "determine_encoding() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.determine_encoding", false]], "dict() (cuvis_ai.data.metadata.metadata method)": [[19, "cuvis_ai.data.metadata.Metadata.dict", false]], "dispose() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.dispose", false]], "dispose() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.dispose", false]], "doclasscleanups() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.doClassCleanups", false]], "docleanups() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.doCleanups", false]], "docleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.doCleanups", false]], "docleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.doCleanups", false]], "docleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.doCleanups", false]], "docleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.doCleanups", false]], "dump_patches (cuvis_ai.tv_transforms.bandpass attribute)": [[111, "cuvis_ai.tv_transforms.Bandpass.dump_patches", false]], "dump_patches (cuvis_ai.tv_transforms.multibandpass attribute)": [[115, "cuvis_ai.tv_transforms.MultiBandpass.dump_patches", false]], "dump_patches (cuvis_ai.tv_transforms.normalizestddev attribute)": [[119, "cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches", false]], "dump_patches (cuvis_ai.tv_transforms.normalizetofloat attribute)": [[123, "cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches", false]], "ecs (class in cuvis_ai.distance.distance)": [[43, "cuvis_ai.distance.distance.ECS", false]], "emit() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.emit", false]], "epochs (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[95, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.epochs", false]], "epsilon (cuvis_ai.utils.nn_config.adam attribute)": [[148, "cuvis_ai.utils.nn_config.Adam.epsilon", false]], "escape_codes (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.ESCAPE_CODES", false]], "escape_replacements (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.ESCAPE_REPLACEMENTS", false]], "escape_replacements (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.ESCAPE_REPLACEMENTS", false]], "euclidean (class in cuvis_ai.distance.distance)": [[44, "cuvis_ai.distance.distance.Euclidean", false]], "expect_alias() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_alias", false]], "expect_block_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping", false]], "expect_block_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping_key", false]], "expect_block_mapping_simple_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping_simple_value", false]], "expect_block_mapping_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping_value", false]], "expect_block_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_sequence", false]], "expect_block_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_sequence_item", false]], "expect_document_end() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_document_end", false]], "expect_document_root() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_document_root", false]], "expect_document_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_document_start", false]], "expect_first_block_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_block_mapping_key", false]], "expect_first_block_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_block_sequence_item", false]], "expect_first_document_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_document_start", false]], "expect_first_flow_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_flow_mapping_key", false]], "expect_first_flow_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_flow_sequence_item", false]], "expect_flow_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping", false]], "expect_flow_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping_key", false]], "expect_flow_mapping_simple_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping_simple_value", false]], "expect_flow_mapping_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping_value", false]], "expect_flow_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_sequence", false]], "expect_flow_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_sequence_item", false]], "expect_node() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_node", false]], "expect_nothing() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_nothing", false]], "expect_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_scalar", false]], "expect_stream_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_stream_start", false]], "extra_repr() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.extra_repr", false]], "extract_state_dict() (in module cuvis_ai.utils.torch)": [[183, "cuvis_ai.utils.torch.extract_state_dict", false]], "fail() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.fail", false]], "fail() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.fail", false]], "fail() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.fail", false]], "fail() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.fail", false]], "fail() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.fail", false]], "failif() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failIf", false]], "failif() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failIf", false]], "failif() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failIf", false]], "failif() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failIf", false]], "failif() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failIf", false]], "failifalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failIfAlmostEqual", false]], "failifequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failIfEqual", false]], "failunless() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnless", false]], "failunless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnless", false]], "failunless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnless", false]], "failunless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnless", false]], "failunless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnless", false]], "failunlessalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnlessAlmostEqual", false]], "failunlessequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnlessEqual", false]], "failunlessraises() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnlessRaises", false]], "failureexception (cuvis_ai.test.test_numpy_utils.testnumpyutils attribute)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failureException", false]], "failureexception (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf attribute)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failureException", false]], "failureexception (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca attribute)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failureException", false]], "failureexception (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm attribute)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failureException", false]], "failureexception (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans attribute)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failureException", false]], "fetch_alias() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_alias", false]], "fetch_anchor() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_anchor", false]], "fetch_block_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_block_entry", false]], "fetch_block_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_block_scalar", false]], "fetch_directive() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_directive", false]], "fetch_document_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_document_end", false]], "fetch_document_indicator() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_document_indicator", false]], "fetch_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_document_start", false]], "fetch_double() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_double", false]], "fetch_flow_collection_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_collection_end", false]], "fetch_flow_collection_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_collection_start", false]], "fetch_flow_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_entry", false]], "fetch_flow_mapping_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_mapping_end", false]], "fetch_flow_mapping_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_mapping_start", false]], "fetch_flow_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_scalar", false]], "fetch_flow_sequence_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_sequence_end", false]], "fetch_flow_sequence_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_sequence_start", false]], "fetch_folded() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_folded", false]], "fetch_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_key", false]], "fetch_literal() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_literal", false]], "fetch_more_tokens() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_more_tokens", false]], "fetch_plain() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_plain", false]], "fetch_single() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_single", false]], "fetch_stream_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_stream_end", false]], "fetch_stream_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_stream_start", false]], "fetch_tag() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_tag", false]], "fetch_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_value", false]], "fields_to_merge (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.fields_to_merge", false]], "fields_to_merge (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.fields_to_merge", false]], "fields_to_merge (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.fields_to_merge", false]], "fields_to_merge (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.fields_to_merge", false]], "fields_to_merge (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.fields_to_merge", false]], "file_name (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.file_name", false]], "fit() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.fit", false]], "fit() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.fit", false]], "fit() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.fit", false]], "fit() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.fit", false]], "fit() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.fit", false]], "fit() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.fit", false]], "fit() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.fit", false]], "fit() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.fit", false]], "fit() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.fit", false]], "fit() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.fit", false]], "fit() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.fit", false]], "fit() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.fit", false]], "fit() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.fit", false]], "fit() (cuvis_ai.node.base.basesupervised method)": [[54, "cuvis_ai.node.base.BaseSupervised.fit", false]], "fit() (cuvis_ai.node.base.baseunsupervised method)": [[56, "cuvis_ai.node.base.BaseUnsupervised.fit", false]], "fit() (cuvis_ai.node.base.preprocessor method)": [[57, "cuvis_ai.node.base.Preprocessor.fit", false]], "fit() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor.fit", false]], "fit() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.fit", false]], "fit() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.fit", false]], "fit() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.fit", false]], "fit() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.fit", false]], "fit() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.fit", false]], "fit() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.fit", false]], "fit() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.fit", false]], "fit() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[95, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.fit", false]], "fit() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.fit", false]], "fit() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.fit", false]], "fit() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.fit", false]], "fit_node() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor.fit_node", false]], "flags (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.flags", false]], "flatten_batch_and_labels() (in module cuvis_ai.utils.numpy)": [[154, "cuvis_ai.utils.numpy.flatten_batch_and_labels", false]], "flatten_batch_and_spatial() (in module cuvis_ai.utils.numpy)": [[155, "cuvis_ai.utils.numpy.flatten_batch_and_spatial", false]], "flatten_labels() (in module cuvis_ai.utils.numpy)": [[156, "cuvis_ai.utils.numpy.flatten_labels", false]], "flatten_mapping() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.flatten_mapping", false]], "flatten_spatial() (in module cuvis_ai.utils.numpy)": [[157, "cuvis_ai.utils.numpy.flatten_spatial", false]], "flickr_url (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.flickr_url", false]], "flush_stream() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.flush_stream", false]], "forward() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.forward", false]], "forward() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.forward", false]], "forward() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.forward", false]], "forward() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.forward", false]], "forward() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.forward", false]], "forward() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.forward", false]], "forward() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.forward", false]], "forward() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.forward", false]], "forward() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.forward", false]], "forward() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.forward", false]], "forward() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.forward", false]], "forward() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.forward", false]], "forward() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.forward", false]], "forward() (cuvis_ai.node.base.basesupervised method)": [[54, "cuvis_ai.node.base.BaseSupervised.forward", false]], "forward() (cuvis_ai.node.base.basetransformation method)": [[55, "cuvis_ai.node.base.BaseTransformation.forward", false]], "forward() (cuvis_ai.node.base.baseunsupervised method)": [[56, "cuvis_ai.node.base.BaseUnsupervised.forward", false]], "forward() (cuvis_ai.node.base.preprocessor method)": [[57, "cuvis_ai.node.base.Preprocessor.forward", false]], "forward() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.forward", false]], "forward() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor.forward", false]], "forward() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.forward", false]], "forward() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.forward", false]], "forward() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.forward", false]], "forward() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.forward", false]], "forward() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.forward", false]], "forward() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.forward", false]], "forward() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.forward", false]], "forward() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[95, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.forward", false]], "forward() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.forward", false]], "forward() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.forward", false]], "forward() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.forward", false]], "forward() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.forward", false]], "forward_node() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor.forward_node", false]], "framerate (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.framerate", false]], "freeze() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.freeze", false]], "from_dict() (cuvis_ai.data.cocolabels.annotation class method)": [[10, "cuvis_ai.data.cocolabels.Annotation.from_dict", false]], "from_dict() (cuvis_ai.data.cocolabels.category class method)": [[12, "cuvis_ai.data.cocolabels.Category.from_dict", false]], "from_dict() (cuvis_ai.data.cocolabels.image class method)": [[13, "cuvis_ai.data.cocolabels.Image.from_dict", false]], "from_dict() (cuvis_ai.data.cocolabels.info class method)": [[14, "cuvis_ai.data.cocolabels.Info.from_dict", false]], "from_dict() (cuvis_ai.data.cocolabels.license class method)": [[15, "cuvis_ai.data.cocolabels.License.from_dict", false]], "from_json() (cuvis_ai.data.cocolabels.annotation class method)": [[10, "cuvis_ai.data.cocolabels.Annotation.from_json", false]], "from_json() (cuvis_ai.data.cocolabels.category class method)": [[12, "cuvis_ai.data.cocolabels.Category.from_json", false]], "from_json() (cuvis_ai.data.cocolabels.image class method)": [[13, "cuvis_ai.data.cocolabels.Image.from_json", false]], "from_json() (cuvis_ai.data.cocolabels.info class method)": [[14, "cuvis_ai.data.cocolabels.Info.from_json", false]], "from_json() (cuvis_ai.data.cocolabels.license class method)": [[15, "cuvis_ai.data.cocolabels.License.from_json", false]], "from_list() (cuvis_ai.data.cocolabels.annotation class method)": [[10, "cuvis_ai.data.cocolabels.Annotation.from_list", false]], "from_list() (cuvis_ai.data.cocolabels.category class method)": [[12, "cuvis_ai.data.cocolabels.Category.from_list", false]], "from_list() (cuvis_ai.data.cocolabels.image class method)": [[13, "cuvis_ai.data.cocolabels.Image.from_list", false]], "from_list() (cuvis_ai.data.cocolabels.info class method)": [[14, "cuvis_ai.data.cocolabels.Info.from_list", false]], "from_list() (cuvis_ai.data.cocolabels.license class method)": [[15, "cuvis_ai.data.cocolabels.License.from_list", false]], "from_path() (cuvis_ai.data.cocolabels.cocodata class method)": [[11, "cuvis_ai.data.cocolabels.COCOData.from_path", false]], "from_yaml() (cuvis_ai.data.metadata.metadata class method)": [[19, "cuvis_ai.data.metadata.Metadata.from_yaml", false]], "from_yaml_file() (cuvis_ai.data.metadata.metadata class method)": [[19, "cuvis_ai.data.metadata.Metadata.from_yaml_file", false]], "gen_coco_labels() (in module cuvis_ai.utils.numpy)": [[158, "cuvis_ai.utils.numpy.gen_coco_labels", false]], "generate_anchor() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.generate_anchor", false]], "get_data() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_data", false]], "get_dataloader_from_dataset() (in module cuvis_ai.data.utils_dataloader)": [[25, "cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset", false]], "get_datatype() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.get_datatype", false]], "get_event() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_event", false]], "get_fit_metadata() (in module cuvis_ai.pipeline.meta_routing)": [[76, "cuvis_ai.pipeline.meta_routing.get_fit_metadata", false]], "get_fit_requested_meta() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.get_fit_requested_meta", false]], "get_forward_metadata() (in module cuvis_ai.pipeline.meta_routing)": [[77, "cuvis_ai.pipeline.meta_routing.get_forward_metadata", false]], "get_forward_requested_meta() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.get_forward_requested_meta", false]], "get_imports() (in module cuvis_ai.utils.inspect)": [[142, "cuvis_ai.utils.inspect.get_imports", false]], "get_installed_packages() (in module cuvis_ai.utils.dependencies)": [[133, "cuvis_ai.utils.dependencies.get_installed_packages", false]], "get_installed_packages_str() (in module cuvis_ai.utils.dependencies)": [[134, "cuvis_ai.utils.dependencies.get_installed_packages_str", false]], "get_mark() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_mark", false]], "get_members() (in module cuvis_ai.utils.inspect)": [[143, "cuvis_ai.utils.inspect.get_members", false]], "get_meta_from_mesu() (in module cuvis_ai.data.metadata)": [[20, "cuvis_ai.data.metadata.get_meta_from_mesu", false]], "get_meta_from_path() (in module cuvis_ai.data.metadata)": [[21, "cuvis_ai.data.metadata.get_meta_from_path", false]], "get_meta_from_session() (in module cuvis_ai.data.metadata)": [[22, "cuvis_ai.data.metadata.get_meta_from_session", false]], "get_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_node", false]], "get_np_dummy_data() (in module cuvis_ai.utils.test)": [[180, "cuvis_ai.utils.test.get_np_dummy_data", false]], "get_output_shape() (in module cuvis_ai.utils.torch)": [[184, "cuvis_ai.utils.torch.get_output_shape", false]], "get_referenced() (in module cuvis_ai.utils.inspect)": [[144, "cuvis_ai.utils.inspect.get_referenced", false]], "get_requested_metadata() (in module cuvis_ai.pipeline.meta_routing)": [[78, "cuvis_ai.pipeline.meta_routing.get_requested_metadata", false]], "get_route() (in module cuvis_ai.pipeline.meta_routing)": [[79, "cuvis_ai.pipeline.meta_routing.get_route", false]], "get_shape_without_batch() (in module cuvis_ai.utils.numpy)": [[159, "cuvis_ai.utils.numpy.get_shape_without_batch", false]], "get_single_data() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_single_data", false]], "get_single_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_single_node", false]], "get_source_file() (in module cuvis_ai.utils.inspect)": [[145, "cuvis_ai.utils.inspect.get_source_file", false]], "get_src() (in module cuvis_ai.utils.inspect)": [[146, "cuvis_ai.utils.inspect.get_src", false]], "get_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_token", false]], "gfc (class in cuvis_ai.distance.distance)": [[45, "cuvis_ai.distance.distance.GFC", false]], "gmm (class in cuvis_ai.unsupervised.sklearn_wrapped)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM", false]], "graph (class in cuvis_ai.pipeline.graph)": [[73, "cuvis_ai.pipeline.graph.Graph", false]], "graphvalidator (class in cuvis_ai.pipeline.validator)": [[82, "cuvis_ai.pipeline.validator.GraphValidator", false]], "guess_input_dimensionalty() (in module cuvis_ai.utils.torch)": [[185, "cuvis_ai.utils.torch.guess_input_dimensionalty", false]], "guess_state_dict_format() (in module cuvis_ai.utils.torch)": [[186, "cuvis_ai.utils.torch.guess_state_dict_format", false]], "height (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.height", false]], "hummingbirdexecutor (class in cuvis_ai.pipeline.executor)": [[70, "cuvis_ai.pipeline.executor.HummingBirdExecutor", false]], "id (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.id", false]], "id (cuvis_ai.data.cocolabels.category attribute)": [[12, "cuvis_ai.data.cocolabels.Category.id", false]], "id (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.id", false]], "id (cuvis_ai.data.cocolabels.license attribute)": [[15, "cuvis_ai.data.cocolabels.License.id", false]], "id() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.id", false]], "id() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.id", false]], "id() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.id", false]], "id() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.id", false]], "id() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.id", false]], "ignore_aliases() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.ignore_aliases", false]], "image (class in cuvis_ai.data.cocolabels)": [[13, "cuvis_ai.data.cocolabels.Image", false]], "image.meta (class in cuvis_ai.data.cocolabels)": [[13, "cuvis_ai.data.cocolabels.Image.Meta", false]], "image_id (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.image_id", false]], "image_ids (cuvis_ai.data.cocolabels.cocodata property)": [[11, "cuvis_ai.data.cocolabels.COCOData.image_ids", false]], "images (cuvis_ai.data.cocolabels.cocodata property)": [[11, "cuvis_ai.data.cocolabels.COCOData.images", false]], "increase_indent() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.increase_indent", false]], "inf_value (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.inf_value", false]], "inf_value (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.inf_value", false]], "info (class in cuvis_ai.data.cocolabels)": [[14, "cuvis_ai.data.cocolabels.Info", false]], "info (cuvis_ai.data.cocolabels.cocodata property)": [[11, "cuvis_ai.data.cocolabels.COCOData.info", false]], "info.meta (class in cuvis_ai.data.cocolabels)": [[14, "cuvis_ai.data.cocolabels.Info.Meta", false]], "input_dim (cuvis_ai.deciders.base_decider.basedecider property)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.input_dim", false]], "input_dim (cuvis_ai.deciders.binary_decider.binarydecider property)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.input_dim", false]], "input_dim (cuvis_ai.deciders.cascaded_decider.cascaded property)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.input_dim", false]], "input_dim (cuvis_ai.deciders.combining_decider.combiningdecider property)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.input_dim", false]], "input_dim (cuvis_ai.deciders.multiclass_decider.multiclassdecider property)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.input_dim", false]], "input_dim (cuvis_ai.distance.distance.abstractdistance property)": [[41, "cuvis_ai.distance.distance.AbstractDistance.input_dim", false]], "input_dim (cuvis_ai.distance.distance.canberra property)": [[42, "cuvis_ai.distance.distance.Canberra.input_dim", false]], "input_dim (cuvis_ai.distance.distance.ecs property)": [[43, "cuvis_ai.distance.distance.ECS.input_dim", false]], "input_dim (cuvis_ai.distance.distance.euclidean property)": [[44, "cuvis_ai.distance.distance.Euclidean.input_dim", false]], "input_dim (cuvis_ai.distance.distance.gfc property)": [[45, "cuvis_ai.distance.distance.GFC.input_dim", false]], "input_dim (cuvis_ai.distance.distance.manhattan property)": [[46, "cuvis_ai.distance.distance.Manhattan.input_dim", false]], "input_dim (cuvis_ai.distance.distance.minkowski property)": [[47, "cuvis_ai.distance.distance.Minkowski.input_dim", false]], "input_dim (cuvis_ai.distance.distance.spectralangle property)": [[48, "cuvis_ai.distance.distance.SpectralAngle.input_dim", false]], "input_dim (cuvis_ai.node.node.node property)": [[59, "cuvis_ai.node.node.Node.input_dim", false]], "input_dim (cuvis_ai.preprocessor.sklearn_wrapped.nmf property)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.input_dim", false]], "input_dim (cuvis_ai.preprocessor.sklearn_wrapped.pca property)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.input_dim", false]], "input_dim (cuvis_ai.supervised.sklearn_wrapped.lda property)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.input_dim", false]], "input_dim (cuvis_ai.supervised.sklearn_wrapped.mlp property)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.input_dim", false]], "input_dim (cuvis_ai.supervised.sklearn_wrapped.qda property)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.input_dim", false]], "input_dim (cuvis_ai.supervised.sklearn_wrapped.svm property)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.input_dim", false]], "input_dim (cuvis_ai.unsupervised.sklearn_wrapped.gmm property)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.input_dim", false]], "input_dim (cuvis_ai.unsupervised.sklearn_wrapped.kmeans property)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.input_dim", false]], "input_dim (cuvis_ai.unsupervised.sklearn_wrapped.meanshift property)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.input_dim", false]], "inputdimension (class in cuvis_ai.utils.torch)": [[182, "cuvis_ai.utils.torch.InputDimension", false]], "integration_time_us (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.integration_time_us", false]], "iscrowd (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.iscrowd", false]], "json_key_to_field (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.json_key_to_field", false]], "json_key_to_field (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.json_key_to_field", false]], "json_key_to_field (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.json_key_to_field", false]], "json_key_to_field (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.json_key_to_field", false]], "json_key_to_field (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.json_key_to_field", false]], "key_transform_with_dump (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.key_transform_with_dump", false]], "key_transform_with_dump (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.key_transform_with_dump", false]], "key_transform_with_dump (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.key_transform_with_dump", false]], "key_transform_with_dump (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.key_transform_with_dump", false]], "key_transform_with_dump (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.key_transform_with_dump", false]], "key_transform_with_load (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.key_transform_with_load", false]], "key_transform_with_load (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.key_transform_with_load", false]], "key_transform_with_load (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.key_transform_with_load", false]], "key_transform_with_load (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.key_transform_with_load", false]], "key_transform_with_load (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.key_transform_with_load", false]], "kmeans (class in cuvis_ai.unsupervised.sklearn_wrapped)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans", false]], "labelconsumer (class in cuvis_ai.node.consumers)": [[52, "cuvis_ai.node.Consumers.LabelConsumer", false]], "lda (class in cuvis_ai.supervised.sklearn_wrapped)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA", false]], "license (class in cuvis_ai.data.cocolabels)": [[15, "cuvis_ai.data.cocolabels.License", false]], "license (cuvis_ai.data.cocolabels.cocodata property)": [[11, "cuvis_ai.data.cocolabels.COCOData.license", false]], "license (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.license", false]], "license.meta (class in cuvis_ai.data.cocolabels)": [[15, "cuvis_ai.data.cocolabels.License.Meta", false]], "list_to_json() (cuvis_ai.data.cocolabels.annotation class method)": [[10, "cuvis_ai.data.cocolabels.Annotation.list_to_json", false]], "list_to_json() (cuvis_ai.data.cocolabels.category class method)": [[12, "cuvis_ai.data.cocolabels.Category.list_to_json", false]], "list_to_json() (cuvis_ai.data.cocolabels.image class method)": [[13, "cuvis_ai.data.cocolabels.Image.list_to_json", false]], "list_to_json() (cuvis_ai.data.cocolabels.info class method)": [[14, "cuvis_ai.data.cocolabels.Info.list_to_json", false]], "list_to_json() (cuvis_ai.data.cocolabels.license class method)": [[15, "cuvis_ai.data.cocolabels.License.list_to_json", false]], "list_to_yaml() (cuvis_ai.data.metadata.metadata class method)": [[19, "cuvis_ai.data.metadata.Metadata.list_to_yaml", false]], "load() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.load", false]], "load() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.load", false]], "load() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.load", false]], "load() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.load", false]], "load() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.load", false]], "load() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.load", false]], "load() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.load", false]], "load() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.load", false]], "load() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.load", false]], "load() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.load", false]], "load() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.load", false]], "load() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.load", false]], "load() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.load", false]], "load() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.load", false]], "load() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.load", false]], "load() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.load", false]], "load() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.load", false]], "load() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.load", false]], "load() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.load", false]], "load() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.load", false]], "load() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.load", false]], "load() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[95, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.load", false]], "load() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.load", false]], "load() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.load", false]], "load() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.load", false]], "load() (cuvis_ai.utils.serializer.serializer method)": [[168, "cuvis_ai.utils.serializer.Serializer.load", false]], "load() (cuvis_ai.utils.serializer.yamlserializer method)": [[169, "cuvis_ai.utils.serializer.YamlSerializer.load", false]], "load_from_file() (cuvis_ai.pipeline.graph.graph class method)": [[73, "cuvis_ai.pipeline.graph.Graph.load_from_file", false]], "load_node() (cuvis_ai.utils.serializer.oldserializer method)": [[167, "cuvis_ai.utils.serializer.OldSerializer.load_node", false]], "longmessage (cuvis_ai.test.test_numpy_utils.testnumpyutils attribute)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.longMessage", false]], "longmessage (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf attribute)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.longMessage", false]], "longmessage (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca attribute)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.longMessage", false]], "longmessage (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm attribute)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.longMessage", false]], "longmessage (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans attribute)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.longMessage", false]], "lr (cuvis_ai.utils.nn_config.adam attribute)": [[148, "cuvis_ai.utils.nn_config.Adam.lr", false]], "lr (cuvis_ai.utils.nn_config.sgd attribute)": [[150, "cuvis_ai.utils.nn_config.SGD.lr", false]], "make_node() (in module cuvis_ai.node.wrap)": [[67, "cuvis_ai.node.wrap.make_node", false]], "manhattan (class in cuvis_ai.distance.distance)": [[46, "cuvis_ai.distance.distance.Manhattan", false]], "marshal_date_time_as (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.marshal_date_time_as", false]], "marshal_date_time_as (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.marshal_date_time_as", false]], "marshal_date_time_as (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.marshal_date_time_as", false]], "marshal_date_time_as (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.marshal_date_time_as", false]], "marshal_date_time_as (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.marshal_date_time_as", false]], "mask (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.mask", false]], "maxdiff (cuvis_ai.test.test_numpy_utils.testnumpyutils attribute)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.maxDiff", false]], "maxdiff (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf attribute)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.maxDiff", false]], "maxdiff (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca attribute)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.maxDiff", false]], "maxdiff (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm attribute)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.maxDiff", false]], "maxdiff (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans attribute)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.maxDiff", false]], "maybe_wrap_node() (in module cuvis_ai.pipeline.graph)": [[74, "cuvis_ai.pipeline.graph.maybe_wrap_node", false]], "meanshift (class in cuvis_ai.unsupervised.sklearn_wrapped)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift", false]], "memoryexecutor (class in cuvis_ai.pipeline.executor)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor", false]], "metadata (class in cuvis_ai.data.metadata)": [[19, "cuvis_ai.data.metadata.Metadata", false]], "minkowski (class in cuvis_ai.distance.distance)": [[47, "cuvis_ai.distance.distance.Minkowski", false]], "mlp (class in cuvis_ai.supervised.sklearn_wrapped)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP", false]], "model (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[95, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.model", false]], "model_args (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[95, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.model_args", false]], "module": [[0, "module-cuvis_ai", false], [1, "module-cuvis_ai.data", false], [2, "module-cuvis_ai.data.BaseDataSet", false], [4, "module-cuvis_ai.data.CuvisDataSet", false], [5, "module-cuvis_ai.data.LiveCuvisDataLoader", false], [6, "module-cuvis_ai.data.NumpyDataSet", false], [7, "module-cuvis_ai.data.OutputFormat", false], [8, "module-cuvis_ai.data.PublicDataSets", false], [9, "module-cuvis_ai.data.cocolabels", false], [18, "module-cuvis_ai.data.metadata", false], [23, "module-cuvis_ai.data.utils_dataloader", false], [26, "module-cuvis_ai.deciders", false], [27, "module-cuvis_ai.deciders.base_decider", false], [29, "module-cuvis_ai.deciders.binary_decider", false], [31, "module-cuvis_ai.deciders.cascaded_decider", false], [33, "module-cuvis_ai.deciders.combining_decider", false], [37, "module-cuvis_ai.deciders.multiclass_decider", false], [39, "module-cuvis_ai.distance", false], [40, "module-cuvis_ai.distance.distance", false], [49, "module-cuvis_ai.node", false], [50, "module-cuvis_ai.node.Consumers", false], [53, "module-cuvis_ai.node.base", false], [58, "module-cuvis_ai.node.node", false], [60, "module-cuvis_ai.node.sklearn", false], [62, "module-cuvis_ai.node.skorch", false], [64, "module-cuvis_ai.node.torch", false], [65, "module-cuvis_ai.node.torchvision", false], [66, "module-cuvis_ai.node.wrap", false], [68, "module-cuvis_ai.pipeline", false], [69, "module-cuvis_ai.pipeline.executor", false], [72, "module-cuvis_ai.pipeline.graph", false], [75, "module-cuvis_ai.pipeline.meta_routing", false], [81, "module-cuvis_ai.pipeline.validator", false], [84, "module-cuvis_ai.preprocessor", false], [85, "module-cuvis_ai.preprocessor.sklearn_wrapped", false], [88, "module-cuvis_ai.supervised", false], [89, "module-cuvis_ai.supervised.sklearn_wrapped", false], [94, "module-cuvis_ai.supervised.skorch_supervised", false], [96, "module-cuvis_ai.test", false], [97, "module-cuvis_ai.test.test_numpy_utils", false], [99, "module-cuvis_ai.test.test_pipeline_graph", false], [100, "module-cuvis_ai.test.test_preprocessor_structural", false], [104, "module-cuvis_ai.test.test_unsupervised_structural", false], [108, "module-cuvis_ai.tv_transforms", false], [109, "module-cuvis_ai.tv_transforms.Bandpass", false], [113, "module-cuvis_ai.tv_transforms.MultiBandpass", false], [117, "module-cuvis_ai.tv_transforms.NormalizeStdDev", false], [121, "module-cuvis_ai.tv_transforms.NormalizeToFloat", false], [125, "module-cuvis_ai.tv_transforms.WavelengthList", false], [126, "module-cuvis_ai.unsupervised", false], [127, "module-cuvis_ai.unsupervised.sklearn_wrapped", false], [131, "module-cuvis_ai.utils", false], [132, "module-cuvis_ai.utils.dependencies", false], [135, "module-cuvis_ai.utils.dict", false], [139, "module-cuvis_ai.utils.filesystem", false], [141, "module-cuvis_ai.utils.inspect", false], [147, "module-cuvis_ai.utils.nn_config", false], [151, "module-cuvis_ai.utils.numpy", false], [164, "module-cuvis_ai.utils.serializer", false], [179, "module-cuvis_ai.utils.test", false], [181, "module-cuvis_ai.utils.torch", false], [187, "module-cuvis_ai.utils.visualize", false]], "momentum (cuvis_ai.utils.nn_config.sgd attribute)": [[150, "cuvis_ai.utils.nn_config.SGD.momentum", false]], "multiclassdecider (class in cuvis_ai.deciders.multiclass_decider)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider", false]], "name (cuvis_ai.data.cocolabels.category attribute)": [[12, "cuvis_ai.data.cocolabels.Category.name", false]], "name (cuvis_ai.data.cocolabels.license attribute)": [[15, "cuvis_ai.data.cocolabels.License.name", false]], "name (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.name", false]], "name (cuvis_ai.utils.nn_config.adam property)": [[148, "cuvis_ai.utils.nn_config.Adam.name", false]], "name (cuvis_ai.utils.nn_config.optimizer property)": [[149, "cuvis_ai.utils.nn_config.Optimizer.name", false]], "name (cuvis_ai.utils.nn_config.sgd property)": [[150, "cuvis_ai.utils.nn_config.SGD.name", false]], "nan_value (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.nan_value", false]], "need_events() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.need_events", false]], "need_more_events() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.need_more_events", false]], "need_more_tokens() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.need_more_tokens", false]], "nesterov (cuvis_ai.utils.nn_config.sgd attribute)": [[150, "cuvis_ai.utils.nn_config.SGD.nesterov", false]], "next_possible_simple_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.next_possible_simple_key", false]], "nmf (class in cuvis_ai.preprocessor.sklearn_wrapped)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF", false]], "node (class in cuvis_ai.node.node)": [[59, "cuvis_ai.node.node.Node", false]], "non_printable (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.NON_PRINTABLE", false]], "numpy_array_binary_representer() (in module cuvis_ai.utils.serializer)": [[170, "cuvis_ai.utils.serializer.numpy_array_binary_representer", false]], "numpy_array_file_representer() (in module cuvis_ai.utils.serializer)": [[171, "cuvis_ai.utils.serializer.numpy_array_file_representer", false]], "numpy_array_string_representer() (in module cuvis_ai.utils.serializer)": [[172, "cuvis_ai.utils.serializer.numpy_array_string_representer", false]], "numpy_arrray_file_constructor() (in module cuvis_ai.utils.serializer)": [[173, "cuvis_ai.utils.serializer.numpy_arrray_file_constructor", false]], "numpy_arrray_string_constructor() (in module cuvis_ai.utils.serializer)": [[174, "cuvis_ai.utils.serializer.numpy_arrray_string_constructor", false]], "numpy_float32_constructor() (in module cuvis_ai.utils.serializer)": [[175, "cuvis_ai.utils.serializer.numpy_float32_constructor", false]], "numpy_float32_representer() (in module cuvis_ai.utils.serializer)": [[176, "cuvis_ai.utils.serializer.numpy_float32_representer", false]], "numpy_float64_constructor() (in module cuvis_ai.utils.serializer)": [[177, "cuvis_ai.utils.serializer.numpy_float64_constructor", false]], "numpy_float64_representer() (in module cuvis_ai.utils.serializer)": [[178, "cuvis_ai.utils.serializer.numpy_float64_representer", false]], "oldserializer (class in cuvis_ai.utils.serializer)": [[167, "cuvis_ai.utils.serializer.OldSerializer", false]], "one (cuvis_ai.utils.torch.inputdimension attribute)": [[182, "cuvis_ai.utils.torch.InputDimension.One", false]], "open() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.open", false]], "optimizer (class in cuvis_ai.utils.nn_config)": [[149, "cuvis_ai.utils.nn_config.Optimizer", false]], "optimizer (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[95, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.optimizer", false]], "output_dim (cuvis_ai.deciders.base_decider.basedecider property)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.output_dim", false]], "output_dim (cuvis_ai.deciders.binary_decider.binarydecider property)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.output_dim", false]], "output_dim (cuvis_ai.deciders.cascaded_decider.cascaded property)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.output_dim", false]], "output_dim (cuvis_ai.deciders.combining_decider.combiningdecider property)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.output_dim", false]], "output_dim (cuvis_ai.deciders.multiclass_decider.multiclassdecider property)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.output_dim", false]], "output_dim (cuvis_ai.distance.distance.abstractdistance property)": [[41, "cuvis_ai.distance.distance.AbstractDistance.output_dim", false]], "output_dim (cuvis_ai.distance.distance.canberra property)": [[42, "cuvis_ai.distance.distance.Canberra.output_dim", false]], "output_dim (cuvis_ai.distance.distance.ecs property)": [[43, "cuvis_ai.distance.distance.ECS.output_dim", false]], "output_dim (cuvis_ai.distance.distance.euclidean property)": [[44, "cuvis_ai.distance.distance.Euclidean.output_dim", false]], "output_dim (cuvis_ai.distance.distance.gfc property)": [[45, "cuvis_ai.distance.distance.GFC.output_dim", false]], "output_dim (cuvis_ai.distance.distance.manhattan property)": [[46, "cuvis_ai.distance.distance.Manhattan.output_dim", false]], "output_dim (cuvis_ai.distance.distance.minkowski property)": [[47, "cuvis_ai.distance.distance.Minkowski.output_dim", false]], "output_dim (cuvis_ai.distance.distance.spectralangle property)": [[48, "cuvis_ai.distance.distance.SpectralAngle.output_dim", false]], "output_dim (cuvis_ai.node.node.node property)": [[59, "cuvis_ai.node.node.Node.output_dim", false]], "output_dim (cuvis_ai.preprocessor.sklearn_wrapped.nmf property)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.output_dim", false]], "output_dim (cuvis_ai.preprocessor.sklearn_wrapped.pca property)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.output_dim", false]], "output_dim (cuvis_ai.supervised.sklearn_wrapped.lda property)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.output_dim", false]], "output_dim (cuvis_ai.supervised.sklearn_wrapped.mlp property)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.output_dim", false]], "output_dim (cuvis_ai.supervised.sklearn_wrapped.qda property)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.output_dim", false]], "output_dim (cuvis_ai.supervised.sklearn_wrapped.svm property)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.output_dim", false]], "output_dim (cuvis_ai.unsupervised.sklearn_wrapped.gmm property)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.output_dim", false]], "output_dim (cuvis_ai.unsupervised.sklearn_wrapped.kmeans property)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.output_dim", false]], "output_dim (cuvis_ai.unsupervised.sklearn_wrapped.meanshift property)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.output_dim", false]], "parameters() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.parameters", false]], "parse_block_mapping_first_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_mapping_first_key", false]], "parse_block_mapping_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_mapping_key", false]], "parse_block_mapping_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_mapping_value", false]], "parse_block_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_node", false]], "parse_block_node_or_indentless_sequence() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_node_or_indentless_sequence", false]], "parse_block_sequence_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_sequence_entry", false]], "parse_block_sequence_first_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_sequence_first_entry", false]], "parse_document_content() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_document_content", false]], "parse_document_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_document_end", false]], "parse_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_document_start", false]], "parse_flow_mapping_empty_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_empty_value", false]], "parse_flow_mapping_first_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_first_key", false]], "parse_flow_mapping_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_key", false]], "parse_flow_mapping_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_value", false]], "parse_flow_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_node", false]], "parse_flow_sequence_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry", false]], "parse_flow_sequence_entry_mapping_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry_mapping_end", false]], "parse_flow_sequence_entry_mapping_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry_mapping_key", false]], "parse_flow_sequence_entry_mapping_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry_mapping_value", false]], "parse_flow_sequence_first_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_first_entry", false]], "parse_implicit_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_implicit_document_start", false]], "parse_indentless_sequence_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_indentless_sequence_entry", false]], "parse_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_node", false]], "parse_stream_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_stream_start", false]], "pca (class in cuvis_ai.preprocessor.sklearn_wrapped)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA", false]], "peek() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.peek", false]], "peek_event() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.peek_event", false]], "peek_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.peek_token", false]], "power_t (cuvis_ai.utils.nn_config.sgd attribute)": [[150, "cuvis_ai.utils.nn_config.SGD.power_t", false]], "prefix() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.prefix", false]], "prepare_anchor() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_anchor", false]], "prepare_tag() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_tag", false]], "prepare_tag_handle() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_tag_handle", false]], "prepare_tag_prefix() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_tag_prefix", false]], "prepare_version() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_version", false]], "preprocessor (class in cuvis_ai.node.base)": [[57, "cuvis_ai.node.base.Preprocessor", false]], "process_anchor() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.process_anchor", false]], "process_directives() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.process_directives", false]], "process_empty_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.process_empty_scalar", false]], "process_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.process_scalar", false]], "process_tag() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.process_tag", false]], "processing_mode (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.processing_mode", false]], "pytorch_args (cuvis_ai.utils.nn_config.adam property)": [[148, "cuvis_ai.utils.nn_config.Adam.pytorch_args", false]], "pytorch_args (cuvis_ai.utils.nn_config.optimizer property)": [[149, "cuvis_ai.utils.nn_config.Optimizer.pytorch_args", false]], "pytorch_args (cuvis_ai.utils.nn_config.sgd property)": [[150, "cuvis_ai.utils.nn_config.SGD.pytorch_args", false]], "qda (class in cuvis_ai.supervised.sklearn_wrapped)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA", false]], "queryablelist (class in cuvis_ai.data.cocolabels)": [[16, "cuvis_ai.data.cocolabels.QueryableList", false]], "raise_on_unknown_json_key (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.raise_on_unknown_json_key", false]], "raise_on_unknown_json_key (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.raise_on_unknown_json_key", false]], "raise_on_unknown_json_key (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.raise_on_unknown_json_key", false]], "raise_on_unknown_json_key (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.raise_on_unknown_json_key", false]], "raise_on_unknown_json_key (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.raise_on_unknown_json_key", false]], "recursive (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.recursive", false]], "recursive (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.recursive", false]], "recursive (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.recursive", false]], "recursive (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.recursive", false]], "recursive (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.recursive", false]], "recursive_classes (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.recursive_classes", false]], "recursive_classes (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.recursive_classes", false]], "recursive_classes (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.recursive_classes", false]], "recursive_classes (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.recursive_classes", false]], "recursive_classes (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.recursive_classes", false]], "references (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.references", false]], "remove_possible_simple_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.remove_possible_simple_key", false]], "remove_prefix() (in module cuvis_ai.utils.dict)": [[137, "cuvis_ai.utils.dict.remove_prefix", false]], "remove_prefix_str() (in module cuvis_ai.utils.dict)": [[138, "cuvis_ai.utils.dict.remove_prefix_str", false]], "represent() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent", false]], "represent_binary() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_binary", false]], "represent_bool() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_bool", false]], "represent_data() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_data", false]], "represent_date() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_date", false]], "represent_datetime() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_datetime", false]], "represent_dict() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_dict", false]], "represent_float() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_float", false]], "represent_int() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_int", false]], "represent_list() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_list", false]], "represent_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_mapping", false]], "represent_none() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_none", false]], "represent_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_scalar", false]], "represent_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_sequence", false]], "represent_set() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_set", false]], "represent_str() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_str", false]], "represent_undefined() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_undefined", false]], "represent_yaml_object() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_yaml_object", false]], "resolve() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.resolve", false]], "resolve() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.resolve", false]], "rle2mask() (in module cuvis_ai.data.cocolabels)": [[17, "cuvis_ai.data.cocolabels.RLE2mask", false]], "run() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.run", false]], "run() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.run", false]], "run() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.run", false]], "run() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.run", false]], "run() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.run", false]], "save_possible_simple_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.save_possible_simple_key", false]], "save_to_file() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.save_to_file", false]], "scan_anchor() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_anchor", false]], "scan_block_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar", false]], "scan_block_scalar_breaks() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_breaks", false]], "scan_block_scalar_ignored_line() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_ignored_line", false]], "scan_block_scalar_indentation() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_indentation", false]], "scan_block_scalar_indicators() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_indicators", false]], "scan_directive() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_directive", false]], "scan_directive_ignored_line() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_directive_ignored_line", false]], "scan_directive_name() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_directive_name", false]], "scan_flow_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar", false]], "scan_flow_scalar_breaks() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar_breaks", false]], "scan_flow_scalar_non_spaces() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar_non_spaces", false]], "scan_flow_scalar_spaces() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar_spaces", false]], "scan_line_break() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_line_break", false]], "scan_plain() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_plain", false]], "scan_plain_spaces() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_plain_spaces", false]], "scan_tag() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag", false]], "scan_tag_directive_handle() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_directive_handle", false]], "scan_tag_directive_prefix() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_directive_prefix", false]], "scan_tag_directive_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_directive_value", false]], "scan_tag_handle() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_handle", false]], "scan_tag_uri() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_uri", false]], "scan_to_next_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_to_next_token", false]], "scan_uri_escapes() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_uri_escapes", false]], "scan_yaml_directive_number() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_yaml_directive_number", false]], "scan_yaml_directive_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_yaml_directive_value", false]], "score() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.score", false]], "score() (cuvis_ai.distance.distance.canberra static method)": [[42, "cuvis_ai.distance.distance.Canberra.score", false]], "score() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.score", false]], "score() (cuvis_ai.distance.distance.euclidean static method)": [[44, "cuvis_ai.distance.distance.Euclidean.score", false]], "score() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.score", false]], "score() (cuvis_ai.distance.distance.manhattan static method)": [[46, "cuvis_ai.distance.distance.Manhattan.score", false]], "score() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.score", false]], "score() (cuvis_ai.distance.distance.spectralangle static method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.score", false]], "segmentation (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.segmentation", false]], "serialize() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.serialize", false]], "serialize() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.serialize", false]], "serialize() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.serialize", false]], "serialize() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.serialize", false]], "serialize() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.serialize", false]], "serialize() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.serialize", false]], "serialize() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.serialize", false]], "serialize() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.serialize", false]], "serialize() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.serialize", false]], "serialize() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.serialize", false]], "serialize() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.serialize", false]], "serialize() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.serialize", false]], "serialize() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.serialize", false]], "serialize() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.serialize", false]], "serialize() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.serialize", false]], "serialize() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.serialize", false]], "serialize() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.serialize", false]], "serialize() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.serialize", false]], "serialize() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.serialize", false]], "serialize() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.serialize", false]], "serialize() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.serialize", false]], "serialize() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[95, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.serialize", false]], "serialize() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.serialize", false]], "serialize() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.serialize", false]], "serialize() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.serialize", false]], "serialize() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.serialize", false]], "serialize() (cuvis_ai.utils.serializer.serializer method)": [[168, "cuvis_ai.utils.serializer.Serializer.serialize", false]], "serialize() (cuvis_ai.utils.serializer.yamlserializer method)": [[169, "cuvis_ai.utils.serializer.YamlSerializer.serialize", false]], "serialize_node() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.serialize_node", false]], "serialize_node() (cuvis_ai.utils.serializer.oldserializer method)": [[167, "cuvis_ai.utils.serializer.OldSerializer.serialize_node", false]], "serializer (class in cuvis_ai.utils.serializer)": [[168, "cuvis_ai.utils.serializer.Serializer", false]], "set_datatype() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.set_datatype", false]], "set_fit_meta_request() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.set_fit_meta_request", false]], "set_forward_meta_request() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[87, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.LDA.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.MLP.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.QDA.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[130, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.set_forward_meta_request", false]], "setup() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.setUp", false]], "setup() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.setUp", false]], "setup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.setUp", false]], "setup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.setUp", false]], "setup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.setUp", false]], "setup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.setUp", false]], "setup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[107, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.setUp", false]], "setupclass() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.setUpClass", false]], "setupclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.setUpClass", false]], "setupclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.setUpClass", false]], "setupclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.setUpClass", false]], "setupclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.setUpClass", false]], "sgd (class in cuvis_ai.utils.nn_config)": [[150, "cuvis_ai.utils.nn_config.SGD", false]], "shape (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.shape", false]], "shapevalidator (class in cuvis_ai.pipeline.validator)": [[83, "cuvis_ai.pipeline.validator.ShapeValidator", false]], "shortdescription() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.shortDescription", false]], "skip_defaults (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.skip_defaults", false]], "skip_defaults (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.skip_defaults", false]], "skip_defaults (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.skip_defaults", false]], "skip_defaults (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.skip_defaults", false]], "skip_defaults (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.skip_defaults", false]], "skip_defaults_if (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.skip_defaults_if", false]], "skip_defaults_if (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.skip_defaults_if", false]], "skip_defaults_if (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.skip_defaults_if", false]], "skip_defaults_if (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.skip_defaults_if", false]], "skip_defaults_if (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.skip_defaults_if", false]], "skip_if (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.skip_if", false]], "skip_if (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.skip_if", false]], "skip_if (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.skip_if", false]], "skip_if (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.skip_if", false]], "skip_if (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.skip_if", false]], "skiptest() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.skipTest", false]], "skiptest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.skipTest", false]], "skiptest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.skipTest", false]], "skiptest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.skipTest", false]], "skiptest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.skipTest", false]], "sklearn_args (cuvis_ai.utils.nn_config.adam property)": [[148, "cuvis_ai.utils.nn_config.Adam.sklearn_args", false]], "sklearn_args (cuvis_ai.utils.nn_config.optimizer property)": [[149, "cuvis_ai.utils.nn_config.Optimizer.sklearn_args", false]], "sklearn_args (cuvis_ai.utils.nn_config.sgd property)": [[150, "cuvis_ai.utils.nn_config.SGD.sklearn_args", false]], "sklearnwrapped (class in cuvis_ai.node.sklearn)": [[61, "cuvis_ai.node.sklearn.SklearnWrapped", false]], "skorchsupervised (class in cuvis_ai.supervised.skorch_supervised)": [[95, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised", false]], "skorchwrapped (class in cuvis_ai.node.skorch)": [[63, "cuvis_ai.node.skorch.SkorchWrapped", false]], "spectra_to_array() (cuvis_ai.distance.distance.abstractdistance static method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.canberra static method)": [[42, "cuvis_ai.distance.distance.Canberra.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.ecs static method)": [[43, "cuvis_ai.distance.distance.ECS.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.euclidean static method)": [[44, "cuvis_ai.distance.distance.Euclidean.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.gfc static method)": [[45, "cuvis_ai.distance.distance.GFC.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.manhattan static method)": [[46, "cuvis_ai.distance.distance.Manhattan.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.minkowski static method)": [[47, "cuvis_ai.distance.distance.Minkowski.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.spectralangle static method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.spectra_to_array", false]], "spectralangle (class in cuvis_ai.distance.distance)": [[48, "cuvis_ai.distance.distance.SpectralAngle", false]], "stale_possible_simple_keys() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.stale_possible_simple_keys", false]], "subtest() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.subTest", false]], "subtest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.subTest", false]], "subtest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.subTest", false]], "subtest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.subTest", false]], "subtest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.subTest", false]], "supercategory (cuvis_ai.data.cocolabels.category attribute)": [[12, "cuvis_ai.data.cocolabels.Category.supercategory", false]], "svm (class in cuvis_ai.supervised.sklearn_wrapped)": [[93, "cuvis_ai.supervised.sklearn_wrapped.SVM", false]], "tag (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.tag", false]], "tag (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.tag", false]], "tag (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.tag", false]], "tag (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.tag", false]], "tag (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.tag", false]], "tag_key (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.tag_key", false]], "tag_key (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.tag_key", false]], "tag_key (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.tag_key", false]], "tag_key (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.tag_key", false]], "tag_key (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.tag_key", false]], "teardown() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.tearDown", false]], "teardown() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.tearDown", false]], "teardown() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.tearDown", false]], "teardown() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.tearDown", false]], "teardown() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.tearDown", false]], "teardownclass() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.tearDownClass", false]], "test_correct_input_dim() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[107, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_correct_input_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[107, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_correct_output_dim", false]], "test_get_shape_without_batch() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.test_get_shape_without_batch", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[107, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_incorrect_input_dim", false]], "test_initialization() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[107, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_initialization", false]], "test_passthrough() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[107, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_passthrough", false]], "testnumpyutils (class in cuvis_ai.test.test_numpy_utils)": [[98, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils", false]], "testpreprocessednode (class in cuvis_ai.test.test_preprocessor_structural)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode", false]], "testunsupervisedgmm (class in cuvis_ai.test.test_unsupervised_structural)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM", false]], "testunsupervisedkmeans (class in cuvis_ai.test.test_unsupervised_structural)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans", false]], "testunsupervisednmf (class in cuvis_ai.test.test_preprocessor_structural)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF", false]], "testunsupervisednode (class in cuvis_ai.test.test_unsupervised_structural)": [[107, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode", false]], "testunsupervisedpca (class in cuvis_ai.test.test_preprocessor_structural)": [[103, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA", false]], "three (cuvis_ai.utils.torch.inputdimension attribute)": [[182, "cuvis_ai.utils.torch.InputDimension.Three", false]], "timestamp_regexp (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.timestamp_regexp", false]], "to_dict() (cuvis_ai.data.cocolabels.annotation method)": [[10, "cuvis_ai.data.cocolabels.Annotation.to_dict", false]], "to_dict() (cuvis_ai.data.cocolabels.category method)": [[12, "cuvis_ai.data.cocolabels.Category.to_dict", false]], "to_dict() (cuvis_ai.data.cocolabels.image method)": [[13, "cuvis_ai.data.cocolabels.Image.to_dict", false]], "to_dict() (cuvis_ai.data.cocolabels.info method)": [[14, "cuvis_ai.data.cocolabels.Info.to_dict", false]], "to_dict() (cuvis_ai.data.cocolabels.license method)": [[15, "cuvis_ai.data.cocolabels.License.to_dict", false]], "to_json() (cuvis_ai.data.cocolabels.annotation method)": [[10, "cuvis_ai.data.cocolabels.Annotation.to_json", false]], "to_json() (cuvis_ai.data.cocolabels.category method)": [[12, "cuvis_ai.data.cocolabels.Category.to_json", false]], "to_json() (cuvis_ai.data.cocolabels.image method)": [[13, "cuvis_ai.data.cocolabels.Image.to_json", false]], "to_json() (cuvis_ai.data.cocolabels.info method)": [[14, "cuvis_ai.data.cocolabels.Info.to_json", false]], "to_json() (cuvis_ai.data.cocolabels.license method)": [[15, "cuvis_ai.data.cocolabels.License.to_json", false]], "to_torchvision() (cuvis_ai.data.cocolabels.annotation method)": [[10, "cuvis_ai.data.cocolabels.Annotation.to_torchvision", false]], "to_yaml() (cuvis_ai.data.metadata.metadata method)": [[19, "cuvis_ai.data.metadata.Metadata.to_yaml", false]], "to_yaml_file() (cuvis_ai.data.metadata.metadata method)": [[19, "cuvis_ai.data.metadata.Metadata.to_yaml_file", false]], "torch_layers (cuvis_ai.pipeline.graph.graph property)": [[73, "cuvis_ai.pipeline.graph.Graph.torch_layers", false]], "train() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor.train", false]], "train() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.train", false]], "training (cuvis_ai.tv_transforms.bandpass attribute)": [[112, "cuvis_ai.tv_transforms.Bandpass.training", false]], "training (cuvis_ai.tv_transforms.multibandpass attribute)": [[116, "cuvis_ai.tv_transforms.MultiBandpass.training", false]], "training (cuvis_ai.tv_transforms.normalizestddev attribute)": [[120, "cuvis_ai.tv_transforms.NormalizeStdDev.training", false]], "training (cuvis_ai.tv_transforms.normalizetofloat attribute)": [[124, "cuvis_ai.tv_transforms.NormalizeToFloat.training", false]], "traverse() (in module cuvis_ai.pipeline.meta_routing)": [[80, "cuvis_ai.pipeline.meta_routing.traverse", false]], "two (cuvis_ai.utils.torch.inputdimension attribute)": [[182, "cuvis_ai.utils.torch.InputDimension.Two", false]], "unflatten_batch_and_labels() (in module cuvis_ai.utils.numpy)": [[160, "cuvis_ai.utils.numpy.unflatten_batch_and_labels", false]], "unflatten_batch_and_spatial() (in module cuvis_ai.utils.numpy)": [[161, "cuvis_ai.utils.numpy.unflatten_batch_and_spatial", false]], "unflatten_labels() (in module cuvis_ai.utils.numpy)": [[162, "cuvis_ai.utils.numpy.unflatten_labels", false]], "unflatten_spatial() (in module cuvis_ai.utils.numpy)": [[163, "cuvis_ai.utils.numpy.unflatten_spatial", false]], "unknown (cuvis_ai.utils.torch.inputdimension attribute)": [[182, "cuvis_ai.utils.torch.InputDimension.Unknown", false]], "unwind_indent() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.unwind_indent", false]], "update() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.update", false]], "update_raw() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.update_raw", false]], "url (cuvis_ai.data.cocolabels.info attribute)": [[14, "cuvis_ai.data.cocolabels.Info.url", false]], "url (cuvis_ai.data.cocolabels.license attribute)": [[15, "cuvis_ai.data.cocolabels.License.url", false]], "v1 (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.v1", false]], "v1 (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.v1", false]], "v1 (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.v1", false]], "v1 (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.v1", false]], "v1 (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.v1", false]], "v1_debug (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.v1_debug", false]], "v1_debug (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.v1_debug", false]], "v1_debug (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.v1_debug", false]], "v1_debug (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.v1_debug", false]], "v1_debug (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.v1_debug", false]], "v1_field_to_alias (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.v1_field_to_alias", false]], "v1_field_to_alias (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.v1_field_to_alias", false]], "v1_field_to_alias (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.v1_field_to_alias", false]], "v1_field_to_alias (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.v1_field_to_alias", false]], "v1_field_to_alias (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.v1_field_to_alias", false]], "v1_key_case (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.v1_key_case", false]], "v1_key_case (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.v1_key_case", false]], "v1_key_case (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.v1_key_case", false]], "v1_key_case (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.v1_key_case", false]], "v1_key_case (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.v1_key_case", false]], "v1_on_unknown_key (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.v1_on_unknown_key", false]], "v1_on_unknown_key (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.v1_on_unknown_key", false]], "v1_on_unknown_key (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.v1_on_unknown_key", false]], "v1_on_unknown_key (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.v1_on_unknown_key", false]], "v1_on_unknown_key (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.v1_on_unknown_key", false]], "v1_unsafe_parse_dataclass_in_union (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.v1_unsafe_parse_dataclass_in_union", false]], "v1_unsafe_parse_dataclass_in_union (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.v1_unsafe_parse_dataclass_in_union", false]], "v1_unsafe_parse_dataclass_in_union (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.v1_unsafe_parse_dataclass_in_union", false]], "v1_unsafe_parse_dataclass_in_union (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.v1_unsafe_parse_dataclass_in_union", false]], "v1_unsafe_parse_dataclass_in_union (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.v1_unsafe_parse_dataclass_in_union", false]], "verbose (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[95, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.verbose", false]], "verify() (cuvis_ai.pipeline.validator.graphvalidator method)": [[82, "cuvis_ai.pipeline.validator.GraphValidator.verify", false]], "verify() (cuvis_ai.pipeline.validator.shapevalidator method)": [[83, "cuvis_ai.pipeline.validator.ShapeValidator.verify", false]], "version (cuvis_ai.data.cocolabels.info attribute)": [[14, "cuvis_ai.data.cocolabels.Info.version", false]], "visualize_features() (in module cuvis_ai.utils.visualize)": [[188, "cuvis_ai.utils.visualize.visualize_features", false]], "visualize_image() (in module cuvis_ai.utils.visualize)": [[189, "cuvis_ai.utils.visualize.visualize_image", false]], "wavelength (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.wavelength", false]], "wavelengths_nm (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.wavelengths_nm", false]], "where() (cuvis_ai.data.cocolabels.queryablelist method)": [[16, "cuvis_ai.data.cocolabels.QueryableList.where", false]], "width (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.width", false]], "write_double_quoted() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_double_quoted", false]], "write_folded() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_folded", false]], "write_indent() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_indent", false]], "write_indicator() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_indicator", false]], "write_line_break() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_line_break", false]], "write_literal() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_literal", false]], "write_plain() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_plain", false]], "write_single_quoted() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_single_quoted", false]], "write_stream_end() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_stream_end", false]], "write_stream_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_stream_start", false]], "write_tag_directive() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_tag_directive", false]], "write_version_directive() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_version_directive", false]], "yaml_constructors (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_constructors", false]], "yaml_implicit_resolvers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_implicit_resolvers", false]], "yaml_implicit_resolvers (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_implicit_resolvers", false]], "yaml_multi_constructors (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_multi_constructors", false]], "yaml_multi_representers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_multi_representers", false]], "yaml_path_resolvers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_path_resolvers", false]], "yaml_path_resolvers (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[166, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_path_resolvers", false]], "yaml_representers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[165, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_representers", false]], "yamlserializer (class in cuvis_ai.utils.serializer)": [[169, "cuvis_ai.utils.serializer.YamlSerializer", false]]}, "objects": {"": [[0, 0, 0, "-", "cuvis_ai"]], "cuvis_ai": [[1, 0, 0, "-", "data"], [26, 0, 0, "-", "deciders"], [39, 0, 0, "-", "distance"], [49, 0, 0, "-", "node"], [68, 0, 0, "-", "pipeline"], [84, 0, 0, "-", "preprocessor"], [88, 0, 0, "-", "supervised"], [96, 0, 0, "-", "test"], [108, 0, 0, "-", "tv_transforms"], [126, 0, 0, "-", "unsupervised"], [131, 0, 0, "-", "utils"]], "cuvis_ai.data": [[2, 0, 0, "-", "BaseDataSet"], [4, 0, 0, "-", "CuvisDataSet"], [5, 0, 0, "-", "LiveCuvisDataLoader"], [6, 0, 0, "-", "NumpyDataSet"], [7, 0, 0, "-", "OutputFormat"], [8, 0, 0, "-", "PublicDataSets"], [9, 0, 0, "-", "cocolabels"], [18, 0, 0, "-", "metadata"], [23, 0, 0, "-", "utils_dataloader"]], "cuvis_ai.data.BaseDataSet": [[3, 1, 1, "", "BaseDataSet"]], "cuvis_ai.data.BaseDataSet.BaseDataSet": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "extra_repr"], [3, 2, 1, "", "get_datatype"], [3, 2, 1, "", "set_datatype"]], "cuvis_ai.data.cocolabels": [[10, 1, 1, "", "Annotation"], [11, 1, 1, "", "COCOData"], [12, 1, 1, "", "Category"], [13, 1, 1, "", "Image"], [14, 1, 1, "", "Info"], [15, 1, 1, "", "License"], [16, 1, 1, "", "QueryableList"], [17, 5, 1, "", "RLE2mask"]], "cuvis_ai.data.cocolabels.Annotation": [[10, 1, 1, "", "Meta"], [10, 2, 1, "", "__init__"], [10, 3, 1, "", "area"], [10, 3, 1, "", "auxiliary"], [10, 3, 1, "", "bbox"], [10, 3, 1, "", "category_id"], [10, 2, 1, "", "from_dict"], [10, 2, 1, "", "from_json"], [10, 2, 1, "", "from_list"], [10, 3, 1, "", "id"], [10, 3, 1, "", "image_id"], [10, 3, 1, "", "iscrowd"], [10, 2, 1, "", "list_to_json"], [10, 3, 1, "", "mask"], [10, 3, 1, "", "segmentation"], [10, 2, 1, "", "to_dict"], [10, 2, 1, "", "to_json"], [10, 2, 1, "", "to_torchvision"]], "cuvis_ai.data.cocolabels.Annotation.Meta": [[10, 3, 1, "", "all_fields"], [10, 3, 1, "", "auto_assign_tags"], [10, 2, 1, "", "bind_to"], [10, 3, 1, "", "debug_enabled"], [10, 3, 1, "", "fields_to_merge"], [10, 3, 1, "", "json_key_to_field"], [10, 3, 1, "", "key_transform_with_dump"], [10, 3, 1, "", "key_transform_with_load"], [10, 3, 1, "", "marshal_date_time_as"], [10, 3, 1, "", "raise_on_unknown_json_key"], [10, 3, 1, "", "recursive"], [10, 3, 1, "", "recursive_classes"], [10, 3, 1, "", "skip_defaults"], [10, 3, 1, "", "skip_defaults_if"], [10, 3, 1, "", "skip_if"], [10, 3, 1, "", "tag"], [10, 3, 1, "", "tag_key"], [10, 3, 1, "", "v1"], [10, 3, 1, "", "v1_debug"], [10, 3, 1, "", "v1_field_to_alias"], [10, 3, 1, "", "v1_key_case"], [10, 3, 1, "", "v1_on_unknown_key"], [10, 3, 1, "", "v1_unsafe_parse_dataclass_in_union"]], "cuvis_ai.data.cocolabels.COCOData": [[11, 2, 1, "", "__init__"], [11, 4, 1, "", "annotations"], [11, 2, 1, "", "from_path"], [11, 4, 1, "", "image_ids"], [11, 4, 1, "", "images"], [11, 4, 1, "", "info"], [11, 4, 1, "", "license"]], "cuvis_ai.data.cocolabels.Category": [[12, 1, 1, "", "Meta"], [12, 2, 1, "", "__init__"], [12, 2, 1, "", "from_dict"], [12, 2, 1, "", "from_json"], [12, 2, 1, "", "from_list"], [12, 3, 1, "", "id"], [12, 2, 1, "", "list_to_json"], [12, 3, 1, "", "name"], [12, 3, 1, "", "supercategory"], [12, 2, 1, "", "to_dict"], [12, 2, 1, "", "to_json"]], "cuvis_ai.data.cocolabels.Category.Meta": [[12, 3, 1, "", "all_fields"], [12, 3, 1, "", "auto_assign_tags"], [12, 2, 1, "", "bind_to"], [12, 3, 1, "", "debug_enabled"], [12, 3, 1, "", "fields_to_merge"], [12, 3, 1, "", "json_key_to_field"], [12, 3, 1, "", "key_transform_with_dump"], [12, 3, 1, "", "key_transform_with_load"], [12, 3, 1, "", "marshal_date_time_as"], [12, 3, 1, "", "raise_on_unknown_json_key"], [12, 3, 1, "", "recursive"], [12, 3, 1, "", "recursive_classes"], [12, 3, 1, "", "skip_defaults"], [12, 3, 1, "", "skip_defaults_if"], [12, 3, 1, "", "skip_if"], [12, 3, 1, "", "tag"], [12, 3, 1, "", "tag_key"], [12, 3, 1, "", "v1"], [12, 3, 1, "", "v1_debug"], [12, 3, 1, "", "v1_field_to_alias"], [12, 3, 1, "", "v1_key_case"], [12, 3, 1, "", "v1_on_unknown_key"], [12, 3, 1, "", "v1_unsafe_parse_dataclass_in_union"]], "cuvis_ai.data.cocolabels.Image": [[13, 1, 1, "", "Meta"], [13, 2, 1, "", "__init__"], [13, 3, 1, "", "coco_url"], [13, 3, 1, "", "date_captured"], [13, 3, 1, "", "file_name"], [13, 3, 1, "", "flickr_url"], [13, 2, 1, "", "from_dict"], [13, 2, 1, "", "from_json"], [13, 2, 1, "", "from_list"], [13, 3, 1, "", "height"], [13, 3, 1, "", "id"], [13, 3, 1, "", "license"], [13, 2, 1, "", "list_to_json"], [13, 2, 1, "", "to_dict"], [13, 2, 1, "", "to_json"], [13, 3, 1, "", "wavelength"], [13, 3, 1, "", "width"]], "cuvis_ai.data.cocolabels.Image.Meta": [[13, 3, 1, "", "all_fields"], [13, 3, 1, "", "auto_assign_tags"], [13, 2, 1, "", "bind_to"], [13, 3, 1, "", "debug_enabled"], [13, 3, 1, "", "fields_to_merge"], [13, 3, 1, "", "json_key_to_field"], [13, 3, 1, "", "key_transform_with_dump"], [13, 3, 1, "", "key_transform_with_load"], [13, 3, 1, "", "marshal_date_time_as"], [13, 3, 1, "", "raise_on_unknown_json_key"], [13, 3, 1, "", "recursive"], [13, 3, 1, "", "recursive_classes"], [13, 3, 1, "", "skip_defaults"], [13, 3, 1, "", "skip_defaults_if"], [13, 3, 1, "", "skip_if"], [13, 3, 1, "", "tag"], [13, 3, 1, "", "tag_key"], [13, 3, 1, "", "v1"], [13, 3, 1, "", "v1_debug"], [13, 3, 1, "", "v1_field_to_alias"], [13, 3, 1, "", "v1_key_case"], [13, 3, 1, "", "v1_on_unknown_key"], [13, 3, 1, "", "v1_unsafe_parse_dataclass_in_union"]], "cuvis_ai.data.cocolabels.Info": [[14, 1, 1, "", "Meta"], [14, 2, 1, "", "__init__"], [14, 3, 1, "", "contributor"], [14, 3, 1, "", "date_created"], [14, 3, 1, "", "description"], [14, 2, 1, "", "from_dict"], [14, 2, 1, "", "from_json"], [14, 2, 1, "", "from_list"], [14, 2, 1, "", "list_to_json"], [14, 2, 1, "", "to_dict"], [14, 2, 1, "", "to_json"], [14, 3, 1, "", "url"], [14, 3, 1, "", "version"]], "cuvis_ai.data.cocolabels.Info.Meta": [[14, 3, 1, "", "all_fields"], [14, 3, 1, "", "auto_assign_tags"], [14, 2, 1, "", "bind_to"], [14, 3, 1, "", "debug_enabled"], [14, 3, 1, "", "fields_to_merge"], [14, 3, 1, "", "json_key_to_field"], [14, 3, 1, "", "key_transform_with_dump"], [14, 3, 1, "", "key_transform_with_load"], [14, 3, 1, "", "marshal_date_time_as"], [14, 3, 1, "", "raise_on_unknown_json_key"], [14, 3, 1, "", "recursive"], [14, 3, 1, "", "recursive_classes"], [14, 3, 1, "", "skip_defaults"], [14, 3, 1, "", "skip_defaults_if"], [14, 3, 1, "", "skip_if"], [14, 3, 1, "", "tag"], [14, 3, 1, "", "tag_key"], [14, 3, 1, "", "v1"], [14, 3, 1, "", "v1_debug"], [14, 3, 1, "", "v1_field_to_alias"], [14, 3, 1, "", "v1_key_case"], [14, 3, 1, "", "v1_on_unknown_key"], [14, 3, 1, "", "v1_unsafe_parse_dataclass_in_union"]], "cuvis_ai.data.cocolabels.License": [[15, 1, 1, "", "Meta"], [15, 2, 1, "", "__init__"], [15, 2, 1, "", "from_dict"], [15, 2, 1, "", "from_json"], [15, 2, 1, "", "from_list"], [15, 3, 1, "", "id"], [15, 2, 1, "", "list_to_json"], [15, 3, 1, "", "name"], [15, 2, 1, "", "to_dict"], [15, 2, 1, "", "to_json"], [15, 3, 1, "", "url"]], "cuvis_ai.data.cocolabels.License.Meta": [[15, 3, 1, "", "all_fields"], [15, 3, 1, "", "auto_assign_tags"], [15, 2, 1, "", "bind_to"], [15, 3, 1, "", "debug_enabled"], [15, 3, 1, "", "fields_to_merge"], [15, 3, 1, "", "json_key_to_field"], [15, 3, 1, "", "key_transform_with_dump"], [15, 3, 1, "", "key_transform_with_load"], [15, 3, 1, "", "marshal_date_time_as"], [15, 3, 1, "", "raise_on_unknown_json_key"], [15, 3, 1, "", "recursive"], [15, 3, 1, "", "recursive_classes"], [15, 3, 1, "", "skip_defaults"], [15, 3, 1, "", "skip_defaults_if"], [15, 3, 1, "", "skip_if"], [15, 3, 1, "", "tag"], [15, 3, 1, "", "tag_key"], [15, 3, 1, "", "v1"], [15, 3, 1, "", "v1_debug"], [15, 3, 1, "", "v1_field_to_alias"], [15, 3, 1, "", "v1_key_case"], [15, 3, 1, "", "v1_on_unknown_key"], [15, 3, 1, "", "v1_unsafe_parse_dataclass_in_union"]], "cuvis_ai.data.cocolabels.QueryableList": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "where"]], "cuvis_ai.data.metadata": [[19, 1, 1, "", "Metadata"], [20, 5, 1, "", "get_meta_from_mesu"], [21, 5, 1, "", "get_meta_from_path"], [22, 5, 1, "", "get_meta_from_session"]], "cuvis_ai.data.metadata.Metadata": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "asdict"], [19, 3, 1, "", "bit_depth"], [19, 2, 1, "", "dataclass"], [19, 2, 1, "", "dict"], [19, 3, 1, "", "flags"], [19, 3, 1, "", "framerate"], [19, 2, 1, "", "from_yaml"], [19, 2, 1, "", "from_yaml_file"], [19, 3, 1, "", "integration_time_us"], [19, 2, 1, "", "list_to_yaml"], [19, 3, 1, "", "name"], [19, 3, 1, "", "processing_mode"], [19, 3, 1, "", "references"], [19, 3, 1, "", "shape"], [19, 2, 1, "", "to_yaml"], [19, 2, 1, "", "to_yaml_file"], [19, 3, 1, "", "wavelengths_nm"]], "cuvis_ai.data.utils_dataloader": [[24, 5, 1, "", "cuvis_collate"], [25, 5, 1, "", "get_dataloader_from_dataset"]], "cuvis_ai.deciders": [[27, 0, 0, "-", "base_decider"], [29, 0, 0, "-", "binary_decider"], [31, 0, 0, "-", "cascaded_decider"], [33, 0, 0, "-", "combining_decider"], [37, 0, 0, "-", "multiclass_decider"]], "cuvis_ai.deciders.base_decider": [[28, 1, 1, "", "BaseDecider"]], "cuvis_ai.deciders.base_decider.BaseDecider": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "check_input_dim"], [28, 2, 1, "", "check_output_dim"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "forward"], [28, 2, 1, "", "get_fit_requested_meta"], [28, 2, 1, "", "get_forward_requested_meta"], [28, 4, 1, "", "input_dim"], [28, 2, 1, "", "load"], [28, 4, 1, "", "output_dim"], [28, 2, 1, "", "serialize"], [28, 2, 1, "", "set_fit_meta_request"], [28, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.deciders.binary_decider": [[30, 1, 1, "", "BinaryDecider"]], "cuvis_ai.deciders.binary_decider.BinaryDecider": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "check_input_dim"], [30, 2, 1, "", "check_output_dim"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "forward"], [30, 2, 1, "", "get_fit_requested_meta"], [30, 2, 1, "", "get_forward_requested_meta"], [30, 4, 1, "", "input_dim"], [30, 2, 1, "", "load"], [30, 4, 1, "", "output_dim"], [30, 2, 1, "", "serialize"], [30, 2, 1, "", "set_fit_meta_request"], [30, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.deciders.cascaded_decider": [[32, 1, 1, "", "Cascaded"]], "cuvis_ai.deciders.cascaded_decider.Cascaded": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "check_input_dim"], [32, 2, 1, "", "check_output_dim"], [32, 2, 1, "", "fit"], [32, 2, 1, "", "forward"], [32, 2, 1, "", "get_fit_requested_meta"], [32, 2, 1, "", "get_forward_requested_meta"], [32, 4, 1, "", "input_dim"], [32, 2, 1, "", "load"], [32, 4, 1, "", "output_dim"], [32, 2, 1, "", "serialize"], [32, 2, 1, "", "set_fit_meta_request"], [32, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.deciders.combining_decider": [[34, 1, 1, "", "CombiningDecider"], [35, 5, 1, "", "all_agree"], [36, 5, 1, "", "at_least_n_agree"]], "cuvis_ai.deciders.combining_decider.CombiningDecider": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "check_input_dim"], [34, 2, 1, "", "check_output_dim"], [34, 2, 1, "", "fit"], [34, 2, 1, "", "forward"], [34, 2, 1, "", "get_fit_requested_meta"], [34, 2, 1, "", "get_forward_requested_meta"], [34, 4, 1, "", "input_dim"], [34, 2, 1, "", "load"], [34, 4, 1, "", "output_dim"], [34, 2, 1, "", "serialize"], [34, 2, 1, "", "set_fit_meta_request"], [34, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.deciders.multiclass_decider": [[38, 1, 1, "", "MultiClassDecider"]], "cuvis_ai.deciders.multiclass_decider.MultiClassDecider": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "check_input_dim"], [38, 2, 1, "", "check_output_dim"], [38, 2, 1, "", "fit"], [38, 2, 1, "", "forward"], [38, 2, 1, "", "get_fit_requested_meta"], [38, 2, 1, "", "get_forward_requested_meta"], [38, 4, 1, "", "input_dim"], [38, 2, 1, "", "load"], [38, 4, 1, "", "output_dim"], [38, 2, 1, "", "serialize"], [38, 2, 1, "", "set_fit_meta_request"], [38, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.distance": [[40, 0, 0, "-", "distance"]], "cuvis_ai.distance.distance": [[41, 1, 1, "", "AbstractDistance"], [42, 1, 1, "", "Canberra"], [43, 1, 1, "", "ECS"], [44, 1, 1, "", "Euclidean"], [45, 1, 1, "", "GFC"], [46, 1, 1, "", "Manhattan"], [47, 1, 1, "", "Minkowski"], [48, 1, 1, "", "SpectralAngle"]], "cuvis_ai.distance.distance.AbstractDistance": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "check_input_dim"], [41, 2, 1, "", "check_output_dim"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "forward"], [41, 2, 1, "", "get_fit_requested_meta"], [41, 2, 1, "", "get_forward_requested_meta"], [41, 4, 1, "", "input_dim"], [41, 2, 1, "", "load"], [41, 4, 1, "", "output_dim"], [41, 2, 1, "", "score"], [41, 2, 1, "", "serialize"], [41, 2, 1, "", "set_fit_meta_request"], [41, 2, 1, "", "set_forward_meta_request"], [41, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Canberra": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "check_input_dim"], [42, 2, 1, "", "check_output_dim"], [42, 2, 1, "", "fit"], [42, 2, 1, "", "forward"], [42, 2, 1, "", "get_fit_requested_meta"], [42, 2, 1, "", "get_forward_requested_meta"], [42, 4, 1, "", "input_dim"], [42, 2, 1, "", "load"], [42, 4, 1, "", "output_dim"], [42, 2, 1, "", "score"], [42, 2, 1, "", "serialize"], [42, 2, 1, "", "set_fit_meta_request"], [42, 2, 1, "", "set_forward_meta_request"], [42, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.ECS": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "check_input_dim"], [43, 2, 1, "", "check_output_dim"], [43, 2, 1, "", "fit"], [43, 2, 1, "", "forward"], [43, 2, 1, "", "get_fit_requested_meta"], [43, 2, 1, "", "get_forward_requested_meta"], [43, 4, 1, "", "input_dim"], [43, 2, 1, "", "load"], [43, 4, 1, "", "output_dim"], [43, 2, 1, "", "score"], [43, 2, 1, "", "serialize"], [43, 2, 1, "", "set_fit_meta_request"], [43, 2, 1, "", "set_forward_meta_request"], [43, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Euclidean": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "check_input_dim"], [44, 2, 1, "", "check_output_dim"], [44, 2, 1, "", "fit"], [44, 2, 1, "", "forward"], [44, 2, 1, "", "get_fit_requested_meta"], [44, 2, 1, "", "get_forward_requested_meta"], [44, 4, 1, "", "input_dim"], [44, 2, 1, "", "load"], [44, 4, 1, "", "output_dim"], [44, 2, 1, "", "score"], [44, 2, 1, "", "serialize"], [44, 2, 1, "", "set_fit_meta_request"], [44, 2, 1, "", "set_forward_meta_request"], [44, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.GFC": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "check_input_dim"], [45, 2, 1, "", "check_output_dim"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "forward"], [45, 2, 1, "", "get_fit_requested_meta"], [45, 2, 1, "", "get_forward_requested_meta"], [45, 4, 1, "", "input_dim"], [45, 2, 1, "", "load"], [45, 4, 1, "", "output_dim"], [45, 2, 1, "", "score"], [45, 2, 1, "", "serialize"], [45, 2, 1, "", "set_fit_meta_request"], [45, 2, 1, "", "set_forward_meta_request"], [45, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Manhattan": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "check_input_dim"], [46, 2, 1, "", "check_output_dim"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "forward"], [46, 2, 1, "", "get_fit_requested_meta"], [46, 2, 1, "", "get_forward_requested_meta"], [46, 4, 1, "", "input_dim"], [46, 2, 1, "", "load"], [46, 4, 1, "", "output_dim"], [46, 2, 1, "", "score"], [46, 2, 1, "", "serialize"], [46, 2, 1, "", "set_fit_meta_request"], [46, 2, 1, "", "set_forward_meta_request"], [46, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Minkowski": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "check_input_dim"], [47, 2, 1, "", "check_output_dim"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "forward"], [47, 2, 1, "", "get_fit_requested_meta"], [47, 2, 1, "", "get_forward_requested_meta"], [47, 4, 1, "", "input_dim"], [47, 2, 1, "", "load"], [47, 4, 1, "", "output_dim"], [47, 2, 1, "", "score"], [47, 2, 1, "", "serialize"], [47, 2, 1, "", "set_fit_meta_request"], [47, 2, 1, "", "set_forward_meta_request"], [47, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.SpectralAngle": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "check_input_dim"], [48, 2, 1, "", "check_output_dim"], [48, 2, 1, "", "fit"], [48, 2, 1, "", "forward"], [48, 2, 1, "", "get_fit_requested_meta"], [48, 2, 1, "", "get_forward_requested_meta"], [48, 4, 1, "", "input_dim"], [48, 2, 1, "", "load"], [48, 4, 1, "", "output_dim"], [48, 2, 1, "", "score"], [48, 2, 1, "", "serialize"], [48, 2, 1, "", "set_fit_meta_request"], [48, 2, 1, "", "set_forward_meta_request"], [48, 2, 1, "", "spectra_to_array"]], "cuvis_ai.node": [[50, 0, 0, "-", "Consumers"], [53, 0, 0, "-", "base"], [58, 0, 0, "-", "node"], [60, 0, 0, "-", "sklearn"], [62, 0, 0, "-", "skorch"], [64, 0, 0, "-", "torch"], [65, 0, 0, "-", "torchvision"], [66, 0, 0, "-", "wrap"]], "cuvis_ai.node.Consumers": [[51, 1, 1, "", "CubeConsumer"], [52, 1, 1, "", "LabelConsumer"]], "cuvis_ai.node.Consumers.CubeConsumer": [[51, 2, 1, "", "__init__"]], "cuvis_ai.node.Consumers.LabelConsumer": [[52, 2, 1, "", "__init__"]], "cuvis_ai.node.base": [[54, 1, 1, "", "BaseSupervised"], [55, 1, 1, "", "BaseTransformation"], [56, 1, 1, "", "BaseUnsupervised"], [57, 1, 1, "", "Preprocessor"]], "cuvis_ai.node.base.BaseSupervised": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "forward"]], "cuvis_ai.node.base.BaseTransformation": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "forward"]], "cuvis_ai.node.base.BaseUnsupervised": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "fit"], [56, 2, 1, "", "forward"]], "cuvis_ai.node.base.Preprocessor": [[57, 2, 1, "", "__init__"], [57, 2, 1, "", "fit"], [57, 2, 1, "", "forward"]], "cuvis_ai.node.node": [[59, 1, 1, "", "Node"]], "cuvis_ai.node.node.Node": [[59, 2, 1, "", "__init__"], [59, 2, 1, "", "check_input_dim"], [59, 2, 1, "", "check_output_dim"], [59, 2, 1, "", "forward"], [59, 2, 1, "", "get_fit_requested_meta"], [59, 2, 1, "", "get_forward_requested_meta"], [59, 4, 1, "", "input_dim"], [59, 2, 1, "", "load"], [59, 4, 1, "", "output_dim"], [59, 2, 1, "", "serialize"], [59, 2, 1, "", "set_fit_meta_request"], [59, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.node.sklearn": [[61, 1, 1, "", "SklearnWrapped"]], "cuvis_ai.node.sklearn.SklearnWrapped": [[61, 2, 1, "", "__init__"]], "cuvis_ai.node.skorch": [[63, 1, 1, "", "SkorchWrapped"]], "cuvis_ai.node.skorch.SkorchWrapped": [[63, 2, 1, "", "__init__"]], "cuvis_ai.node.wrap": [[67, 5, 1, "", "make_node"]], "cuvis_ai.pipeline": [[69, 0, 0, "-", "executor"], [72, 0, 0, "-", "graph"], [75, 0, 0, "-", "meta_routing"], [81, 0, 0, "-", "validator"]], "cuvis_ai.pipeline.executor": [[70, 1, 1, "", "HummingBirdExecutor"], [71, 1, 1, "", "MemoryExecutor"]], "cuvis_ai.pipeline.executor.HummingBirdExecutor": [[70, 2, 1, "", "__init__"]], "cuvis_ai.pipeline.executor.MemoryExecutor": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "fit"], [71, 2, 1, "", "fit_node"], [71, 2, 1, "", "forward"], [71, 2, 1, "", "forward_node"], [71, 2, 1, "", "train"]], "cuvis_ai.pipeline.graph": [[73, 1, 1, "", "Graph"], [74, 5, 1, "", "maybe_wrap_node"]], "cuvis_ai.pipeline.graph.Graph": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "add_base_node"], [73, 2, 1, "", "add_edge"], [73, 2, 1, "", "add_node"], [73, 2, 1, "", "custom_copy"], [73, 2, 1, "", "delete_node"], [73, 2, 1, "", "fit"], [73, 2, 1, "", "forward"], [73, 2, 1, "", "freeze"], [73, 2, 1, "", "load"], [73, 2, 1, "", "load_from_file"], [73, 2, 1, "", "parameters"], [73, 2, 1, "", "save_to_file"], [73, 2, 1, "", "serialize"], [73, 4, 1, "", "torch_layers"], [73, 2, 1, "", "train"]], "cuvis_ai.pipeline.meta_routing": [[76, 5, 1, "", "get_fit_metadata"], [77, 5, 1, "", "get_forward_metadata"], [78, 5, 1, "", "get_requested_metadata"], [79, 5, 1, "", "get_route"], [80, 5, 1, "", "traverse"]], "cuvis_ai.pipeline.validator": [[82, 1, 1, "", "GraphValidator"], [83, 1, 1, "", "ShapeValidator"]], "cuvis_ai.pipeline.validator.GraphValidator": [[82, 2, 1, "", "__init__"], [82, 2, 1, "", "verify"]], "cuvis_ai.pipeline.validator.ShapeValidator": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "verify"]], "cuvis_ai.preprocessor": [[85, 0, 0, "-", "sklearn_wrapped"]], "cuvis_ai.preprocessor.sklearn_wrapped": [[86, 1, 1, "", "NMF"], [87, 1, 1, "", "PCA"]], "cuvis_ai.preprocessor.sklearn_wrapped.NMF": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "check_input_dim"], [86, 2, 1, "", "check_output_dim"], [86, 2, 1, "", "fit"], [86, 2, 1, "", "forward"], [86, 2, 1, "", "get_fit_requested_meta"], [86, 2, 1, "", "get_forward_requested_meta"], [86, 4, 1, "", "input_dim"], [86, 2, 1, "", "load"], [86, 4, 1, "", "output_dim"], [86, 2, 1, "", "serialize"], [86, 2, 1, "", "set_fit_meta_request"], [86, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.preprocessor.sklearn_wrapped.PCA": [[87, 2, 1, "", "__init__"], [87, 2, 1, "", "check_input_dim"], [87, 2, 1, "", "check_output_dim"], [87, 2, 1, "", "fit"], [87, 2, 1, "", "forward"], [87, 2, 1, "", "get_fit_requested_meta"], [87, 2, 1, "", "get_forward_requested_meta"], [87, 4, 1, "", "input_dim"], [87, 2, 1, "", "load"], [87, 4, 1, "", "output_dim"], [87, 2, 1, "", "serialize"], [87, 2, 1, "", "set_fit_meta_request"], [87, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.supervised": [[89, 0, 0, "-", "sklearn_wrapped"], [94, 0, 0, "-", "skorch_supervised"]], "cuvis_ai.supervised.sklearn_wrapped": [[90, 1, 1, "", "LDA"], [91, 1, 1, "", "MLP"], [92, 1, 1, "", "QDA"], [93, 1, 1, "", "SVM"]], "cuvis_ai.supervised.sklearn_wrapped.LDA": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "check_input_dim"], [90, 2, 1, "", "check_output_dim"], [90, 2, 1, "", "fit"], [90, 2, 1, "", "forward"], [90, 2, 1, "", "get_fit_requested_meta"], [90, 2, 1, "", "get_forward_requested_meta"], [90, 4, 1, "", "input_dim"], [90, 2, 1, "", "load"], [90, 4, 1, "", "output_dim"], [90, 2, 1, "", "serialize"], [90, 2, 1, "", "set_fit_meta_request"], [90, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.supervised.sklearn_wrapped.MLP": [[91, 2, 1, "", "__init__"], [91, 2, 1, "", "check_input_dim"], [91, 2, 1, "", "check_output_dim"], [91, 2, 1, "", "fit"], [91, 2, 1, "", "forward"], [91, 2, 1, "", "get_fit_requested_meta"], [91, 2, 1, "", "get_forward_requested_meta"], [91, 4, 1, "", "input_dim"], [91, 2, 1, "", "load"], [91, 4, 1, "", "output_dim"], [91, 2, 1, "", "serialize"], [91, 2, 1, "", "set_fit_meta_request"], [91, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.supervised.sklearn_wrapped.QDA": [[92, 2, 1, "", "__init__"], [92, 2, 1, "", "check_input_dim"], [92, 2, 1, "", "check_output_dim"], [92, 2, 1, "", "fit"], [92, 2, 1, "", "forward"], [92, 2, 1, "", "get_fit_requested_meta"], [92, 2, 1, "", "get_forward_requested_meta"], [92, 4, 1, "", "input_dim"], [92, 2, 1, "", "load"], [92, 4, 1, "", "output_dim"], [92, 2, 1, "", "serialize"], [92, 2, 1, "", "set_fit_meta_request"], [92, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.supervised.sklearn_wrapped.SVM": [[93, 2, 1, "", "__init__"], [93, 2, 1, "", "check_input_dim"], [93, 2, 1, "", "check_output_dim"], [93, 2, 1, "", "fit"], [93, 2, 1, "", "forward"], [93, 2, 1, "", "get_fit_requested_meta"], [93, 2, 1, "", "get_forward_requested_meta"], [93, 4, 1, "", "input_dim"], [93, 2, 1, "", "load"], [93, 4, 1, "", "output_dim"], [93, 2, 1, "", "serialize"], [93, 2, 1, "", "set_fit_meta_request"], [93, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.supervised.skorch_supervised": [[95, 1, 1, "", "SkorchSupervised"]], "cuvis_ai.supervised.skorch_supervised.SkorchSupervised": [[95, 2, 1, "", "__init__"], [95, 3, 1, "", "epochs"], [95, 2, 1, "", "fit"], [95, 2, 1, "", "forward"], [95, 2, 1, "", "load"], [95, 3, 1, "", "model"], [95, 3, 1, "", "model_args"], [95, 3, 1, "", "optimizer"], [95, 2, 1, "", "serialize"], [95, 3, 1, "", "verbose"]], "cuvis_ai.test": [[97, 0, 0, "-", "test_numpy_utils"], [99, 0, 0, "-", "test_pipeline_graph"], [100, 0, 0, "-", "test_preprocessor_structural"], [104, 0, 0, "-", "test_unsupervised_structural"]], "cuvis_ai.test.test_numpy_utils": [[98, 1, 1, "", "TestNumpyUtils"]], "cuvis_ai.test.test_numpy_utils.TestNumpyUtils": [[98, 2, 1, "", "__init__"], [98, 2, 1, "", "addClassCleanup"], [98, 2, 1, "", "addCleanup"], [98, 2, 1, "", "addTypeEqualityFunc"], [98, 2, 1, "", "assertAlmostEqual"], [98, 2, 1, "", "assertAlmostEquals"], [98, 2, 1, "", "assertCountEqual"], [98, 2, 1, "", "assertDictContainsSubset"], [98, 2, 1, "", "assertDictEqual"], [98, 2, 1, "", "assertEqual"], [98, 2, 1, "", "assertEquals"], [98, 2, 1, "", "assertFalse"], [98, 2, 1, "", "assertGreater"], [98, 2, 1, "", "assertGreaterEqual"], [98, 2, 1, "", "assertIn"], [98, 2, 1, "", "assertIs"], [98, 2, 1, "", "assertIsInstance"], [98, 2, 1, "", "assertIsNone"], [98, 2, 1, "", "assertIsNot"], [98, 2, 1, "", "assertIsNotNone"], [98, 2, 1, "", "assertLess"], [98, 2, 1, "", "assertLessEqual"], [98, 2, 1, "", "assertListEqual"], [98, 2, 1, "", "assertLogs"], [98, 2, 1, "", "assertMultiLineEqual"], [98, 2, 1, "", "assertNoLogs"], [98, 2, 1, "", "assertNotAlmostEqual"], [98, 2, 1, "", "assertNotAlmostEquals"], [98, 2, 1, "", "assertNotEqual"], [98, 2, 1, "", "assertNotEquals"], [98, 2, 1, "", "assertNotIn"], [98, 2, 1, "", "assertNotIsInstance"], [98, 2, 1, "", "assertNotRegex"], [98, 2, 1, "", "assertNotRegexpMatches"], [98, 2, 1, "", "assertRaises"], [98, 2, 1, "", "assertRaisesRegex"], [98, 2, 1, "", "assertRaisesRegexp"], [98, 2, 1, "", "assertRegex"], [98, 2, 1, "", "assertRegexpMatches"], [98, 2, 1, "", "assertSequenceEqual"], [98, 2, 1, "", "assertSetEqual"], [98, 2, 1, "", "assertTrue"], [98, 2, 1, "", "assertTupleEqual"], [98, 2, 1, "", "assertWarns"], [98, 2, 1, "", "assertWarnsRegex"], [98, 2, 1, "", "assert_"], [98, 2, 1, "", "countTestCases"], [98, 2, 1, "", "debug"], [98, 2, 1, "", "defaultTestResult"], [98, 2, 1, "", "doClassCleanups"], [98, 2, 1, "", "doCleanups"], [98, 2, 1, "", "fail"], [98, 2, 1, "", "failIf"], [98, 2, 1, "", "failIfAlmostEqual"], [98, 2, 1, "", "failIfEqual"], [98, 2, 1, "", "failUnless"], [98, 2, 1, "", "failUnlessAlmostEqual"], [98, 2, 1, "", "failUnlessEqual"], [98, 2, 1, "", "failUnlessRaises"], [98, 3, 1, "", "failureException"], [98, 2, 1, "", "id"], [98, 3, 1, "", "longMessage"], [98, 3, 1, "", "maxDiff"], [98, 2, 1, "", "run"], [98, 2, 1, "", "setUp"], [98, 2, 1, "", "setUpClass"], [98, 2, 1, "", "shortDescription"], [98, 2, 1, "", "skipTest"], [98, 2, 1, "", "subTest"], [98, 2, 1, "", "tearDown"], [98, 2, 1, "", "tearDownClass"], [98, 2, 1, "", "test_get_shape_without_batch"]], "cuvis_ai.test.test_preprocessor_structural": [[101, 1, 1, "", "TestPreprocessedNode"], [102, 1, 1, "", "TestUnsupervisedNMF"], [103, 1, 1, "", "TestUnsupervisedPCA"]], "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode": [[101, 2, 1, "", "__init__"], [101, 2, 1, "", "setUp"], [101, 2, 1, "", "test_correct_input_dim"], [101, 2, 1, "", "test_correct_output_dim"], [101, 2, 1, "", "test_incorrect_input_dim"], [101, 2, 1, "", "test_initialization"], [101, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF": [[102, 2, 1, "", "__init__"], [102, 2, 1, "", "addClassCleanup"], [102, 2, 1, "", "addCleanup"], [102, 2, 1, "", "addTypeEqualityFunc"], [102, 2, 1, "", "assertAlmostEqual"], [102, 2, 1, "", "assertAlmostEquals"], [102, 2, 1, "", "assertCountEqual"], [102, 2, 1, "", "assertDictContainsSubset"], [102, 2, 1, "", "assertDictEqual"], [102, 2, 1, "", "assertEqual"], [102, 2, 1, "", "assertEquals"], [102, 2, 1, "", "assertFalse"], [102, 2, 1, "", "assertGreater"], [102, 2, 1, "", "assertGreaterEqual"], [102, 2, 1, "", "assertIn"], [102, 2, 1, "", "assertIs"], [102, 2, 1, "", "assertIsInstance"], [102, 2, 1, "", "assertIsNone"], [102, 2, 1, "", "assertIsNot"], [102, 2, 1, "", "assertIsNotNone"], [102, 2, 1, "", "assertLess"], [102, 2, 1, "", "assertLessEqual"], [102, 2, 1, "", "assertListEqual"], [102, 2, 1, "", "assertLogs"], [102, 2, 1, "", "assertMultiLineEqual"], [102, 2, 1, "", "assertNoLogs"], [102, 2, 1, "", "assertNotAlmostEqual"], [102, 2, 1, "", "assertNotAlmostEquals"], [102, 2, 1, "", "assertNotEqual"], [102, 2, 1, "", "assertNotEquals"], [102, 2, 1, "", "assertNotIn"], [102, 2, 1, "", "assertNotIsInstance"], [102, 2, 1, "", "assertNotRegex"], [102, 2, 1, "", "assertNotRegexpMatches"], [102, 2, 1, "", "assertRaises"], [102, 2, 1, "", "assertRaisesRegex"], [102, 2, 1, "", "assertRaisesRegexp"], [102, 2, 1, "", "assertRegex"], [102, 2, 1, "", "assertRegexpMatches"], [102, 2, 1, "", "assertSequenceEqual"], [102, 2, 1, "", "assertSetEqual"], [102, 2, 1, "", "assertTrue"], [102, 2, 1, "", "assertTupleEqual"], [102, 2, 1, "", "assertWarns"], [102, 2, 1, "", "assertWarnsRegex"], [102, 2, 1, "", "assert_"], [102, 2, 1, "", "countTestCases"], [102, 2, 1, "", "debug"], [102, 2, 1, "", "defaultTestResult"], [102, 2, 1, "", "doClassCleanups"], [102, 2, 1, "", "doCleanups"], [102, 2, 1, "", "fail"], [102, 2, 1, "", "failIf"], [102, 2, 1, "", "failIfAlmostEqual"], [102, 2, 1, "", "failIfEqual"], [102, 2, 1, "", "failUnless"], [102, 2, 1, "", "failUnlessAlmostEqual"], [102, 2, 1, "", "failUnlessEqual"], [102, 2, 1, "", "failUnlessRaises"], [102, 3, 1, "", "failureException"], [102, 2, 1, "", "id"], [102, 3, 1, "", "longMessage"], [102, 3, 1, "", "maxDiff"], [102, 2, 1, "", "run"], [102, 2, 1, "", "setUp"], [102, 2, 1, "", "setUpClass"], [102, 2, 1, "", "shortDescription"], [102, 2, 1, "", "skipTest"], [102, 2, 1, "", "subTest"], [102, 2, 1, "", "tearDown"], [102, 2, 1, "", "tearDownClass"], [102, 2, 1, "", "test_correct_input_dim"], [102, 2, 1, "", "test_correct_output_dim"], [102, 2, 1, "", "test_incorrect_input_dim"], [102, 2, 1, "", "test_initialization"], [102, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA": [[103, 2, 1, "", "__init__"], [103, 2, 1, "", "addClassCleanup"], [103, 2, 1, "", "addCleanup"], [103, 2, 1, "", "addTypeEqualityFunc"], [103, 2, 1, "", "assertAlmostEqual"], [103, 2, 1, "", "assertAlmostEquals"], [103, 2, 1, "", "assertCountEqual"], [103, 2, 1, "", "assertDictContainsSubset"], [103, 2, 1, "", "assertDictEqual"], [103, 2, 1, "", "assertEqual"], [103, 2, 1, "", "assertEquals"], [103, 2, 1, "", "assertFalse"], [103, 2, 1, "", "assertGreater"], [103, 2, 1, "", "assertGreaterEqual"], [103, 2, 1, "", "assertIn"], [103, 2, 1, "", "assertIs"], [103, 2, 1, "", "assertIsInstance"], [103, 2, 1, "", "assertIsNone"], [103, 2, 1, "", "assertIsNot"], [103, 2, 1, "", "assertIsNotNone"], [103, 2, 1, "", "assertLess"], [103, 2, 1, "", "assertLessEqual"], [103, 2, 1, "", "assertListEqual"], [103, 2, 1, "", "assertLogs"], [103, 2, 1, "", "assertMultiLineEqual"], [103, 2, 1, "", "assertNoLogs"], [103, 2, 1, "", "assertNotAlmostEqual"], [103, 2, 1, "", "assertNotAlmostEquals"], [103, 2, 1, "", "assertNotEqual"], [103, 2, 1, "", "assertNotEquals"], [103, 2, 1, "", "assertNotIn"], [103, 2, 1, "", "assertNotIsInstance"], [103, 2, 1, "", "assertNotRegex"], [103, 2, 1, "", "assertNotRegexpMatches"], [103, 2, 1, "", "assertRaises"], [103, 2, 1, "", "assertRaisesRegex"], [103, 2, 1, "", "assertRaisesRegexp"], [103, 2, 1, "", "assertRegex"], [103, 2, 1, "", "assertRegexpMatches"], [103, 2, 1, "", "assertSequenceEqual"], [103, 2, 1, "", "assertSetEqual"], [103, 2, 1, "", "assertTrue"], [103, 2, 1, "", "assertTupleEqual"], [103, 2, 1, "", "assertWarns"], [103, 2, 1, "", "assertWarnsRegex"], [103, 2, 1, "", "assert_"], [103, 2, 1, "", "countTestCases"], [103, 2, 1, "", "debug"], [103, 2, 1, "", "defaultTestResult"], [103, 2, 1, "", "doClassCleanups"], [103, 2, 1, "", "doCleanups"], [103, 2, 1, "", "fail"], [103, 2, 1, "", "failIf"], [103, 2, 1, "", "failIfAlmostEqual"], [103, 2, 1, "", "failIfEqual"], [103, 2, 1, "", "failUnless"], [103, 2, 1, "", "failUnlessAlmostEqual"], [103, 2, 1, "", "failUnlessEqual"], [103, 2, 1, "", "failUnlessRaises"], [103, 3, 1, "", "failureException"], [103, 2, 1, "", "id"], [103, 3, 1, "", "longMessage"], [103, 3, 1, "", "maxDiff"], [103, 2, 1, "", "run"], [103, 2, 1, "", "setUp"], [103, 2, 1, "", "setUpClass"], [103, 2, 1, "", "shortDescription"], [103, 2, 1, "", "skipTest"], [103, 2, 1, "", "subTest"], [103, 2, 1, "", "tearDown"], [103, 2, 1, "", "tearDownClass"], [103, 2, 1, "", "test_correct_input_dim"], [103, 2, 1, "", "test_correct_output_dim"], [103, 2, 1, "", "test_incorrect_input_dim"], [103, 2, 1, "", "test_initialization"], [103, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_unsupervised_structural": [[105, 1, 1, "", "TestUnsupervisedGMM"], [106, 1, 1, "", "TestUnsupervisedKMeans"], [107, 1, 1, "", "TestUnsupervisedNode"]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM": [[105, 2, 1, "", "__init__"], [105, 2, 1, "", "addClassCleanup"], [105, 2, 1, "", "addCleanup"], [105, 2, 1, "", "addTypeEqualityFunc"], [105, 2, 1, "", "assertAlmostEqual"], [105, 2, 1, "", "assertAlmostEquals"], [105, 2, 1, "", "assertCountEqual"], [105, 2, 1, "", "assertDictContainsSubset"], [105, 2, 1, "", "assertDictEqual"], [105, 2, 1, "", "assertEqual"], [105, 2, 1, "", "assertEquals"], [105, 2, 1, "", "assertFalse"], [105, 2, 1, "", "assertGreater"], [105, 2, 1, "", "assertGreaterEqual"], [105, 2, 1, "", "assertIn"], [105, 2, 1, "", "assertIs"], [105, 2, 1, "", "assertIsInstance"], [105, 2, 1, "", "assertIsNone"], [105, 2, 1, "", "assertIsNot"], [105, 2, 1, "", "assertIsNotNone"], [105, 2, 1, "", "assertLess"], [105, 2, 1, "", "assertLessEqual"], [105, 2, 1, "", "assertListEqual"], [105, 2, 1, "", "assertLogs"], [105, 2, 1, "", "assertMultiLineEqual"], [105, 2, 1, "", "assertNoLogs"], [105, 2, 1, "", "assertNotAlmostEqual"], [105, 2, 1, "", "assertNotAlmostEquals"], [105, 2, 1, "", "assertNotEqual"], [105, 2, 1, "", "assertNotEquals"], [105, 2, 1, "", "assertNotIn"], [105, 2, 1, "", "assertNotIsInstance"], [105, 2, 1, "", "assertNotRegex"], [105, 2, 1, "", "assertNotRegexpMatches"], [105, 2, 1, "", "assertRaises"], [105, 2, 1, "", "assertRaisesRegex"], [105, 2, 1, "", "assertRaisesRegexp"], [105, 2, 1, "", "assertRegex"], [105, 2, 1, "", "assertRegexpMatches"], [105, 2, 1, "", "assertSequenceEqual"], [105, 2, 1, "", "assertSetEqual"], [105, 2, 1, "", "assertTrue"], [105, 2, 1, "", "assertTupleEqual"], [105, 2, 1, "", "assertWarns"], [105, 2, 1, "", "assertWarnsRegex"], [105, 2, 1, "", "assert_"], [105, 2, 1, "", "countTestCases"], [105, 2, 1, "", "debug"], [105, 2, 1, "", "defaultTestResult"], [105, 2, 1, "", "doClassCleanups"], [105, 2, 1, "", "doCleanups"], [105, 2, 1, "", "fail"], [105, 2, 1, "", "failIf"], [105, 2, 1, "", "failIfAlmostEqual"], [105, 2, 1, "", "failIfEqual"], [105, 2, 1, "", "failUnless"], [105, 2, 1, "", "failUnlessAlmostEqual"], [105, 2, 1, "", "failUnlessEqual"], [105, 2, 1, "", "failUnlessRaises"], [105, 3, 1, "", "failureException"], [105, 2, 1, "", "id"], [105, 3, 1, "", "longMessage"], [105, 3, 1, "", "maxDiff"], [105, 2, 1, "", "run"], [105, 2, 1, "", "setUp"], [105, 2, 1, "", "setUpClass"], [105, 2, 1, "", "shortDescription"], [105, 2, 1, "", "skipTest"], [105, 2, 1, "", "subTest"], [105, 2, 1, "", "tearDown"], [105, 2, 1, "", "tearDownClass"], [105, 2, 1, "", "test_correct_input_dim"], [105, 2, 1, "", "test_correct_output_dim"], [105, 2, 1, "", "test_incorrect_input_dim"], [105, 2, 1, "", "test_initialization"], [105, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans": [[106, 2, 1, "", "__init__"], [106, 2, 1, "", "addClassCleanup"], [106, 2, 1, "", "addCleanup"], [106, 2, 1, "", "addTypeEqualityFunc"], [106, 2, 1, "", "assertAlmostEqual"], [106, 2, 1, "", "assertAlmostEquals"], [106, 2, 1, "", "assertCountEqual"], [106, 2, 1, "", "assertDictContainsSubset"], [106, 2, 1, "", "assertDictEqual"], [106, 2, 1, "", "assertEqual"], [106, 2, 1, "", "assertEquals"], [106, 2, 1, "", "assertFalse"], [106, 2, 1, "", "assertGreater"], [106, 2, 1, "", "assertGreaterEqual"], [106, 2, 1, "", "assertIn"], [106, 2, 1, "", "assertIs"], [106, 2, 1, "", "assertIsInstance"], [106, 2, 1, "", "assertIsNone"], [106, 2, 1, "", "assertIsNot"], [106, 2, 1, "", "assertIsNotNone"], [106, 2, 1, "", "assertLess"], [106, 2, 1, "", "assertLessEqual"], [106, 2, 1, "", "assertListEqual"], [106, 2, 1, "", "assertLogs"], [106, 2, 1, "", "assertMultiLineEqual"], [106, 2, 1, "", "assertNoLogs"], [106, 2, 1, "", "assertNotAlmostEqual"], [106, 2, 1, "", "assertNotAlmostEquals"], [106, 2, 1, "", "assertNotEqual"], [106, 2, 1, "", "assertNotEquals"], [106, 2, 1, "", "assertNotIn"], [106, 2, 1, "", "assertNotIsInstance"], [106, 2, 1, "", "assertNotRegex"], [106, 2, 1, "", "assertNotRegexpMatches"], [106, 2, 1, "", "assertRaises"], [106, 2, 1, "", "assertRaisesRegex"], [106, 2, 1, "", "assertRaisesRegexp"], [106, 2, 1, "", "assertRegex"], [106, 2, 1, "", "assertRegexpMatches"], [106, 2, 1, "", "assertSequenceEqual"], [106, 2, 1, "", "assertSetEqual"], [106, 2, 1, "", "assertTrue"], [106, 2, 1, "", "assertTupleEqual"], [106, 2, 1, "", "assertWarns"], [106, 2, 1, "", "assertWarnsRegex"], [106, 2, 1, "", "assert_"], [106, 2, 1, "", "countTestCases"], [106, 2, 1, "", "debug"], [106, 2, 1, "", "defaultTestResult"], [106, 2, 1, "", "doClassCleanups"], [106, 2, 1, "", "doCleanups"], [106, 2, 1, "", "fail"], [106, 2, 1, "", "failIf"], [106, 2, 1, "", "failIfAlmostEqual"], [106, 2, 1, "", "failIfEqual"], [106, 2, 1, "", "failUnless"], [106, 2, 1, "", "failUnlessAlmostEqual"], [106, 2, 1, "", "failUnlessEqual"], [106, 2, 1, "", "failUnlessRaises"], [106, 3, 1, "", "failureException"], [106, 2, 1, "", "id"], [106, 3, 1, "", "longMessage"], [106, 3, 1, "", "maxDiff"], [106, 2, 1, "", "run"], [106, 2, 1, "", "setUp"], [106, 2, 1, "", "setUpClass"], [106, 2, 1, "", "shortDescription"], [106, 2, 1, "", "skipTest"], [106, 2, 1, "", "subTest"], [106, 2, 1, "", "tearDown"], [106, 2, 1, "", "tearDownClass"], [106, 2, 1, "", "test_correct_input_dim"], [106, 2, 1, "", "test_correct_output_dim"], [106, 2, 1, "", "test_incorrect_input_dim"], [106, 2, 1, "", "test_initialization"], [106, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode": [[107, 2, 1, "", "__init__"], [107, 2, 1, "", "setUp"], [107, 2, 1, "", "test_correct_input_dim"], [107, 2, 1, "", "test_correct_output_dim"], [107, 2, 1, "", "test_incorrect_input_dim"], [107, 2, 1, "", "test_initialization"], [107, 2, 1, "", "test_passthrough"]], "cuvis_ai.tv_transforms": [[109, 0, 0, "-", "Bandpass"], [113, 0, 0, "-", "MultiBandpass"], [117, 0, 0, "-", "NormalizeStdDev"], [121, 0, 0, "-", "NormalizeToFloat"], [125, 0, 0, "-", "WavelengthList"]], "cuvis_ai.tv_transforms.Bandpass": [[110, 3, 1, "", "call_super_init"], [111, 3, 1, "", "dump_patches"], [112, 3, 1, "", "training"]], "cuvis_ai.tv_transforms.MultiBandpass": [[114, 3, 1, "", "call_super_init"], [115, 3, 1, "", "dump_patches"], [116, 3, 1, "", "training"]], "cuvis_ai.tv_transforms.NormalizeStdDev": [[118, 3, 1, "", "call_super_init"], [119, 3, 1, "", "dump_patches"], [120, 3, 1, "", "training"]], "cuvis_ai.tv_transforms.NormalizeToFloat": [[122, 3, 1, "", "call_super_init"], [123, 3, 1, "", "dump_patches"], [124, 3, 1, "", "training"]], "cuvis_ai.unsupervised": [[127, 0, 0, "-", "sklearn_wrapped"]], "cuvis_ai.unsupervised.sklearn_wrapped": [[128, 1, 1, "", "GMM"], [129, 1, 1, "", "KMeans"], [130, 1, 1, "", "MeanShift"]], "cuvis_ai.unsupervised.sklearn_wrapped.GMM": [[128, 2, 1, "", "__init__"], [128, 2, 1, "", "check_input_dim"], [128, 2, 1, "", "check_output_dim"], [128, 2, 1, "", "fit"], [128, 2, 1, "", "forward"], [128, 2, 1, "", "get_fit_requested_meta"], [128, 2, 1, "", "get_forward_requested_meta"], [128, 4, 1, "", "input_dim"], [128, 2, 1, "", "load"], [128, 4, 1, "", "output_dim"], [128, 2, 1, "", "serialize"], [128, 2, 1, "", "set_fit_meta_request"], [128, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.unsupervised.sklearn_wrapped.KMeans": [[129, 2, 1, "", "__init__"], [129, 2, 1, "", "check_input_dim"], [129, 2, 1, "", "check_output_dim"], [129, 2, 1, "", "fit"], [129, 2, 1, "", "forward"], [129, 2, 1, "", "get_fit_requested_meta"], [129, 2, 1, "", "get_forward_requested_meta"], [129, 4, 1, "", "input_dim"], [129, 2, 1, "", "load"], [129, 4, 1, "", "output_dim"], [129, 2, 1, "", "serialize"], [129, 2, 1, "", "set_fit_meta_request"], [129, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift": [[130, 2, 1, "", "__init__"], [130, 2, 1, "", "check_input_dim"], [130, 2, 1, "", "check_output_dim"], [130, 2, 1, "", "fit"], [130, 2, 1, "", "forward"], [130, 2, 1, "", "get_fit_requested_meta"], [130, 2, 1, "", "get_forward_requested_meta"], [130, 4, 1, "", "input_dim"], [130, 2, 1, "", "load"], [130, 4, 1, "", "output_dim"], [130, 2, 1, "", "serialize"], [130, 2, 1, "", "set_fit_meta_request"], [130, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.utils": [[132, 0, 0, "-", "dependencies"], [135, 0, 0, "-", "dict"], [139, 0, 0, "-", "filesystem"], [141, 0, 0, "-", "inspect"], [147, 0, 0, "-", "nn_config"], [151, 0, 0, "-", "numpy"], [164, 0, 0, "-", "serializer"], [179, 0, 0, "-", "test"], [181, 0, 0, "-", "torch"], [187, 0, 0, "-", "visualize"]], "cuvis_ai.utils.dependencies": [[133, 5, 1, "", "get_installed_packages"], [134, 5, 1, "", "get_installed_packages_str"]], "cuvis_ai.utils.dict": [[136, 5, 1, "", "add_prefix"], [137, 5, 1, "", "remove_prefix"], [138, 5, 1, "", "remove_prefix_str"]], "cuvis_ai.utils.filesystem": [[140, 5, 1, "", "change_working_dir"]], "cuvis_ai.utils.inspect": [[142, 5, 1, "", "get_imports"], [143, 5, 1, "", "get_members"], [144, 5, 1, "", "get_referenced"], [145, 5, 1, "", "get_source_file"], [146, 5, 1, "", "get_src"]], "cuvis_ai.utils.nn_config": [[148, 1, 1, "", "Adam"], [149, 1, 1, "", "Optimizer"], [150, 1, 1, "", "SGD"]], "cuvis_ai.utils.nn_config.Adam": [[148, 2, 1, "", "__init__"], [148, 3, 1, "", "alpha"], [148, 4, 1, "", "args"], [148, 3, 1, "", "beta_1"], [148, 3, 1, "", "beta_2"], [148, 3, 1, "", "epsilon"], [148, 3, 1, "", "lr"], [148, 4, 1, "", "name"], [148, 4, 1, "", "pytorch_args"], [148, 4, 1, "", "sklearn_args"]], "cuvis_ai.utils.nn_config.Optimizer": [[149, 2, 1, "", "__init__"], [149, 4, 1, "", "args"], [149, 4, 1, "", "name"], [149, 4, 1, "", "pytorch_args"], [149, 4, 1, "", "sklearn_args"]], "cuvis_ai.utils.nn_config.SGD": [[150, 2, 1, "", "__init__"], [150, 3, 1, "", "alpha"], [150, 4, 1, "", "args"], [150, 3, 1, "", "lr"], [150, 3, 1, "", "momentum"], [150, 4, 1, "", "name"], [150, 3, 1, "", "nesterov"], [150, 3, 1, "", "power_t"], [150, 4, 1, "", "pytorch_args"], [150, 4, 1, "", "sklearn_args"]], "cuvis_ai.utils.numpy": [[152, 5, 1, "", "binary_mask_to_rle"], [153, 5, 1, "", "check_array_shape"], [154, 5, 1, "", "flatten_batch_and_labels"], [155, 5, 1, "", "flatten_batch_and_spatial"], [156, 5, 1, "", "flatten_labels"], [157, 5, 1, "", "flatten_spatial"], [158, 5, 1, "", "gen_coco_labels"], [159, 5, 1, "", "get_shape_without_batch"], [160, 5, 1, "", "unflatten_batch_and_labels"], [161, 5, 1, "", "unflatten_batch_and_spatial"], [162, 5, 1, "", "unflatten_labels"], [163, 5, 1, "", "unflatten_spatial"]], "cuvis_ai.utils.serializer": [[165, 1, 1, "", "CuvisYamlDumper"], [166, 1, 1, "", "CuvisYamlLoader"], [167, 1, 1, "", "OldSerializer"], [168, 1, 1, "", "Serializer"], [169, 1, 1, "", "YamlSerializer"], [170, 5, 1, "", "numpy_array_binary_representer"], [171, 5, 1, "", "numpy_array_file_representer"], [172, 5, 1, "", "numpy_array_string_representer"], [173, 5, 1, "", "numpy_arrray_file_constructor"], [174, 5, 1, "", "numpy_arrray_string_constructor"], [175, 5, 1, "", "numpy_float32_constructor"], [176, 5, 1, "", "numpy_float32_representer"], [177, 5, 1, "", "numpy_float64_constructor"], [178, 5, 1, "", "numpy_float64_representer"]], "cuvis_ai.utils.serializer.CuvisYamlDumper": [[165, 3, 1, "", "ANCHOR_TEMPLATE"], [165, 3, 1, "", "DEFAULT_MAPPING_TAG"], [165, 3, 1, "", "DEFAULT_SCALAR_TAG"], [165, 3, 1, "", "DEFAULT_SEQUENCE_TAG"], [165, 3, 1, "", "DEFAULT_TAG_PREFIXES"], [165, 3, 1, "", "ESCAPE_REPLACEMENTS"], [165, 2, 1, "", "__init__"], [165, 2, 1, "", "add_implicit_resolver"], [165, 2, 1, "", "add_multi_representer"], [165, 2, 1, "", "add_path_resolver"], [165, 2, 1, "", "add_representer"], [165, 2, 1, "", "analyze_scalar"], [165, 2, 1, "", "anchor_node"], [165, 2, 1, "", "ascend_resolver"], [165, 2, 1, "", "check_empty_document"], [165, 2, 1, "", "check_empty_mapping"], [165, 2, 1, "", "check_empty_sequence"], [165, 2, 1, "", "check_resolver_prefix"], [165, 2, 1, "", "check_simple_key"], [165, 2, 1, "", "choose_scalar_style"], [165, 2, 1, "", "close"], [165, 2, 1, "", "descend_resolver"], [165, 2, 1, "", "determine_block_hints"], [165, 2, 1, "", "dispose"], [165, 2, 1, "", "emit"], [165, 2, 1, "", "expect_alias"], [165, 2, 1, "", "expect_block_mapping"], [165, 2, 1, "", "expect_block_mapping_key"], [165, 2, 1, "", "expect_block_mapping_simple_value"], [165, 2, 1, "", "expect_block_mapping_value"], [165, 2, 1, "", "expect_block_sequence"], [165, 2, 1, "", "expect_block_sequence_item"], [165, 2, 1, "", "expect_document_end"], [165, 2, 1, "", "expect_document_root"], [165, 2, 1, "", "expect_document_start"], [165, 2, 1, "", "expect_first_block_mapping_key"], [165, 2, 1, "", "expect_first_block_sequence_item"], [165, 2, 1, "", "expect_first_document_start"], [165, 2, 1, "", "expect_first_flow_mapping_key"], [165, 2, 1, "", "expect_first_flow_sequence_item"], [165, 2, 1, "", "expect_flow_mapping"], [165, 2, 1, "", "expect_flow_mapping_key"], [165, 2, 1, "", "expect_flow_mapping_simple_value"], [165, 2, 1, "", "expect_flow_mapping_value"], [165, 2, 1, "", "expect_flow_sequence"], [165, 2, 1, "", "expect_flow_sequence_item"], [165, 2, 1, "", "expect_node"], [165, 2, 1, "", "expect_nothing"], [165, 2, 1, "", "expect_scalar"], [165, 2, 1, "", "expect_stream_start"], [165, 2, 1, "", "flush_stream"], [165, 2, 1, "", "generate_anchor"], [165, 2, 1, "", "ignore_aliases"], [165, 2, 1, "", "increase_indent"], [165, 3, 1, "", "inf_value"], [165, 2, 1, "", "need_events"], [165, 2, 1, "", "need_more_events"], [165, 2, 1, "", "open"], [165, 2, 1, "", "prepare_anchor"], [165, 2, 1, "", "prepare_tag"], [165, 2, 1, "", "prepare_tag_handle"], [165, 2, 1, "", "prepare_tag_prefix"], [165, 2, 1, "", "prepare_version"], [165, 2, 1, "", "process_anchor"], [165, 2, 1, "", "process_scalar"], [165, 2, 1, "", "process_tag"], [165, 2, 1, "", "represent"], [165, 2, 1, "", "represent_binary"], [165, 2, 1, "", "represent_bool"], [165, 2, 1, "", "represent_data"], [165, 2, 1, "", "represent_date"], [165, 2, 1, "", "represent_datetime"], [165, 2, 1, "", "represent_dict"], [165, 2, 1, "", "represent_float"], [165, 2, 1, "", "represent_int"], [165, 2, 1, "", "represent_list"], [165, 2, 1, "", "represent_mapping"], [165, 2, 1, "", "represent_none"], [165, 2, 1, "", "represent_scalar"], [165, 2, 1, "", "represent_sequence"], [165, 2, 1, "", "represent_set"], [165, 2, 1, "", "represent_str"], [165, 2, 1, "", "represent_undefined"], [165, 2, 1, "", "represent_yaml_object"], [165, 2, 1, "", "resolve"], [165, 2, 1, "", "serialize"], [165, 2, 1, "", "serialize_node"], [165, 2, 1, "", "write_double_quoted"], [165, 2, 1, "", "write_folded"], [165, 2, 1, "", "write_indent"], [165, 2, 1, "", "write_indicator"], [165, 2, 1, "", "write_line_break"], [165, 2, 1, "", "write_literal"], [165, 2, 1, "", "write_plain"], [165, 2, 1, "", "write_single_quoted"], [165, 2, 1, "", "write_stream_end"], [165, 2, 1, "", "write_stream_start"], [165, 2, 1, "", "write_tag_directive"], [165, 2, 1, "", "write_version_directive"], [165, 3, 1, "", "yaml_implicit_resolvers"], [165, 3, 1, "", "yaml_multi_representers"], [165, 3, 1, "", "yaml_path_resolvers"], [165, 3, 1, "", "yaml_representers"]], "cuvis_ai.utils.serializer.CuvisYamlLoader": [[166, 3, 1, "", "DEFAULT_MAPPING_TAG"], [166, 3, 1, "", "DEFAULT_SCALAR_TAG"], [166, 3, 1, "", "DEFAULT_SEQUENCE_TAG"], [166, 3, 1, "", "DEFAULT_TAGS"], [166, 3, 1, "", "ESCAPE_CODES"], [166, 3, 1, "", "ESCAPE_REPLACEMENTS"], [166, 3, 1, "", "NON_PRINTABLE"], [166, 2, 1, "", "__init__"], [166, 2, 1, "", "add_constructor"], [166, 2, 1, "", "add_implicit_resolver"], [166, 2, 1, "", "add_indent"], [166, 2, 1, "", "add_multi_constructor"], [166, 2, 1, "", "add_path_resolver"], [166, 2, 1, "", "ascend_resolver"], [166, 3, 1, "", "bool_values"], [166, 2, 1, "", "check_block_entry"], [166, 2, 1, "", "check_data"], [166, 2, 1, "", "check_directive"], [166, 2, 1, "", "check_document_end"], [166, 2, 1, "", "check_document_start"], [166, 2, 1, "", "check_event"], [166, 2, 1, "", "check_key"], [166, 2, 1, "", "check_node"], [166, 2, 1, "", "check_plain"], [166, 2, 1, "", "check_printable"], [166, 2, 1, "", "check_resolver_prefix"], [166, 2, 1, "", "check_state_key"], [166, 2, 1, "", "check_token"], [166, 2, 1, "", "check_value"], [166, 2, 1, "", "compose_document"], [166, 2, 1, "", "compose_mapping_node"], [166, 2, 1, "", "compose_node"], [166, 2, 1, "", "compose_scalar_node"], [166, 2, 1, "", "compose_sequence_node"], [166, 2, 1, "", "construct_document"], [166, 2, 1, "", "construct_mapping"], [166, 2, 1, "", "construct_object"], [166, 2, 1, "", "construct_pairs"], [166, 2, 1, "", "construct_scalar"], [166, 2, 1, "", "construct_sequence"], [166, 2, 1, "", "construct_undefined"], [166, 2, 1, "", "construct_yaml_binary"], [166, 2, 1, "", "construct_yaml_bool"], [166, 2, 1, "", "construct_yaml_float"], [166, 2, 1, "", "construct_yaml_int"], [166, 2, 1, "", "construct_yaml_map"], [166, 2, 1, "", "construct_yaml_null"], [166, 2, 1, "", "construct_yaml_object"], [166, 2, 1, "", "construct_yaml_omap"], [166, 2, 1, "", "construct_yaml_pairs"], [166, 2, 1, "", "construct_yaml_seq"], [166, 2, 1, "", "construct_yaml_set"], [166, 2, 1, "", "construct_yaml_str"], [166, 2, 1, "", "construct_yaml_timestamp"], [166, 2, 1, "", "descend_resolver"], [166, 2, 1, "", "determine_encoding"], [166, 2, 1, "", "dispose"], [166, 2, 1, "", "fetch_alias"], [166, 2, 1, "", "fetch_anchor"], [166, 2, 1, "", "fetch_block_entry"], [166, 2, 1, "", "fetch_block_scalar"], [166, 2, 1, "", "fetch_directive"], [166, 2, 1, "", "fetch_document_end"], [166, 2, 1, "", "fetch_document_indicator"], [166, 2, 1, "", "fetch_document_start"], [166, 2, 1, "", "fetch_double"], [166, 2, 1, "", "fetch_flow_collection_end"], [166, 2, 1, "", "fetch_flow_collection_start"], [166, 2, 1, "", "fetch_flow_entry"], [166, 2, 1, "", "fetch_flow_mapping_end"], [166, 2, 1, "", "fetch_flow_mapping_start"], [166, 2, 1, "", "fetch_flow_scalar"], [166, 2, 1, "", "fetch_flow_sequence_end"], [166, 2, 1, "", "fetch_flow_sequence_start"], [166, 2, 1, "", "fetch_folded"], [166, 2, 1, "", "fetch_key"], [166, 2, 1, "", "fetch_literal"], [166, 2, 1, "", "fetch_more_tokens"], [166, 2, 1, "", "fetch_plain"], [166, 2, 1, "", "fetch_single"], [166, 2, 1, "", "fetch_stream_end"], [166, 2, 1, "", "fetch_stream_start"], [166, 2, 1, "", "fetch_tag"], [166, 2, 1, "", "fetch_value"], [166, 2, 1, "", "flatten_mapping"], [166, 2, 1, "", "forward"], [166, 2, 1, "", "get_data"], [166, 2, 1, "", "get_event"], [166, 2, 1, "", "get_mark"], [166, 2, 1, "", "get_node"], [166, 2, 1, "", "get_single_data"], [166, 2, 1, "", "get_single_node"], [166, 2, 1, "", "get_token"], [166, 3, 1, "", "inf_value"], [166, 3, 1, "", "nan_value"], [166, 2, 1, "", "need_more_tokens"], [166, 2, 1, "", "next_possible_simple_key"], [166, 2, 1, "", "parse_block_mapping_first_key"], [166, 2, 1, "", "parse_block_mapping_key"], [166, 2, 1, "", "parse_block_mapping_value"], [166, 2, 1, "", "parse_block_node"], [166, 2, 1, "", "parse_block_node_or_indentless_sequence"], [166, 2, 1, "", "parse_block_sequence_entry"], [166, 2, 1, "", "parse_block_sequence_first_entry"], [166, 2, 1, "", "parse_document_content"], [166, 2, 1, "", "parse_document_end"], [166, 2, 1, "", "parse_document_start"], [166, 2, 1, "", "parse_flow_mapping_empty_value"], [166, 2, 1, "", "parse_flow_mapping_first_key"], [166, 2, 1, "", "parse_flow_mapping_key"], [166, 2, 1, "", "parse_flow_mapping_value"], [166, 2, 1, "", "parse_flow_node"], [166, 2, 1, "", "parse_flow_sequence_entry"], [166, 2, 1, "", "parse_flow_sequence_entry_mapping_end"], [166, 2, 1, "", "parse_flow_sequence_entry_mapping_key"], [166, 2, 1, "", "parse_flow_sequence_entry_mapping_value"], [166, 2, 1, "", "parse_flow_sequence_first_entry"], [166, 2, 1, "", "parse_implicit_document_start"], [166, 2, 1, "", "parse_indentless_sequence_entry"], [166, 2, 1, "", "parse_node"], [166, 2, 1, "", "parse_stream_start"], [166, 2, 1, "", "peek"], [166, 2, 1, "", "peek_event"], [166, 2, 1, "", "peek_token"], [166, 2, 1, "", "prefix"], [166, 2, 1, "", "process_directives"], [166, 2, 1, "", "process_empty_scalar"], [166, 2, 1, "", "remove_possible_simple_key"], [166, 2, 1, "", "resolve"], [166, 2, 1, "", "save_possible_simple_key"], [166, 2, 1, "", "scan_anchor"], [166, 2, 1, "", "scan_block_scalar"], [166, 2, 1, "", "scan_block_scalar_breaks"], [166, 2, 1, "", "scan_block_scalar_ignored_line"], [166, 2, 1, "", "scan_block_scalar_indentation"], [166, 2, 1, "", "scan_block_scalar_indicators"], [166, 2, 1, "", "scan_directive"], [166, 2, 1, "", "scan_directive_ignored_line"], [166, 2, 1, "", "scan_directive_name"], [166, 2, 1, "", "scan_flow_scalar"], [166, 2, 1, "", "scan_flow_scalar_breaks"], [166, 2, 1, "", "scan_flow_scalar_non_spaces"], [166, 2, 1, "", "scan_flow_scalar_spaces"], [166, 2, 1, "", "scan_line_break"], [166, 2, 1, "", "scan_plain"], [166, 2, 1, "", "scan_plain_spaces"], [166, 2, 1, "", "scan_tag"], [166, 2, 1, "", "scan_tag_directive_handle"], [166, 2, 1, "", "scan_tag_directive_prefix"], [166, 2, 1, "", "scan_tag_directive_value"], [166, 2, 1, "", "scan_tag_handle"], [166, 2, 1, "", "scan_tag_uri"], [166, 2, 1, "", "scan_to_next_token"], [166, 2, 1, "", "scan_uri_escapes"], [166, 2, 1, "", "scan_yaml_directive_number"], [166, 2, 1, "", "scan_yaml_directive_value"], [166, 2, 1, "", "stale_possible_simple_keys"], [166, 3, 1, "", "timestamp_regexp"], [166, 2, 1, "", "unwind_indent"], [166, 2, 1, "", "update"], [166, 2, 1, "", "update_raw"], [166, 3, 1, "", "yaml_constructors"], [166, 3, 1, "", "yaml_implicit_resolvers"], [166, 3, 1, "", "yaml_multi_constructors"], [166, 3, 1, "", "yaml_path_resolvers"]], "cuvis_ai.utils.serializer.OldSerializer": [[167, 2, 1, "", "__init__"], [167, 2, 1, "", "load_node"], [167, 2, 1, "", "serialize_node"]], "cuvis_ai.utils.serializer.Serializer": [[168, 2, 1, "", "__init__"], [168, 2, 1, "", "load"], [168, 2, 1, "", "serialize"]], "cuvis_ai.utils.serializer.YamlSerializer": [[169, 2, 1, "", "__init__"], [169, 2, 1, "", "load"], [169, 2, 1, "", "serialize"]], "cuvis_ai.utils.test": [[180, 5, 1, "", "get_np_dummy_data"]], "cuvis_ai.utils.torch": [[182, 1, 1, "", "InputDimension"], [183, 5, 1, "", "extract_state_dict"], [184, 5, 1, "", "get_output_shape"], [185, 5, 1, "", "guess_input_dimensionalty"], [186, 5, 1, "", "guess_state_dict_format"]], "cuvis_ai.utils.torch.InputDimension": [[182, 3, 1, "", "One"], [182, 3, 1, "", "Three"], [182, 3, 1, "", "Two"], [182, 3, 1, "", "Unknown"], [182, 2, 1, "", "__init__"]], "cuvis_ai.utils.visualize": [[188, 5, 1, "", "visualize_features"], [189, 5, 1, "", "visualize_image"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function"}, "terms": {"": [10, 12, 13, 14, 15, 73, 98, 102, 103, 105, 106, 138], "0": [10, 25, 30, 71, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 148, 150, 165, 166], "0001": [86, 90, 91, 92, 129, 148, 150], "001": [91, 93, 128, 148, 150], "03d": 165, "06": 128, "08": [91, 148], "0b": [165, 166], "0x": [165, 166], "1": [10, 12, 13, 14, 15, 19, 25, 28, 30, 32, 34, 38, 59, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 165, 166, 182], "10": [87, 91, 95, 128], "100": [91, 128], "147": [98, 102, 103, 105, 106], "15000": 91, "1998": 45, "1_": [165, 166], "1d": 185, "1e": [91, 128, 148], "2": [10, 12, 13, 14, 15, 19, 41, 48, 165, 166, 182], "200": [86, 91, 93], "2002": [165, 166], "2d": 185, "3": [93, 98, 102, 103, 105, 106, 165, 166, 182], "300": [129, 130], "37": 45, "3d": 185, "4": [165, 166], "4096": 166, "5": [91, 150, 165, 166], "526": 19, "6": [45, 165, 166], "640": [98, 102, 103, 105, 106], "7": [98, 102, 103, 105, 106, 165, 166], "76990451": 152, "7_": [165, 166], "8": [129, 165, 166], "9": [91, 148, 150, 165, 166], "971": 45, "977": 45, "999": [91, 148], "9_": [165, 166], "9a": [165, 166], "A": [10, 12, 13, 14, 15, 16, 19, 45, 98, 102, 103, 105, 106], "At": [73, 98, 102, 103, 105, 106, 191], "For": [19, 98, 102, 103, 105, 106, 191, 193], "If": [10, 12, 13, 14, 15, 19, 28, 30, 32, 34, 38, 41, 59, 73, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 190], "In": [19, 191], "NO": [165, 166], "No": [41, 42, 43, 44, 45, 46, 47, 48, 165, 166], "ON": [165, 166], "On": [165, 166], "One": 182, "The": [10, 12, 13, 14, 15, 19, 28, 30, 34, 38, 98, 102, 103, 105, 106, 190], "There": 41, "To": [73, 192], "_": [165, 166], "__annotations__": 19, "__hash__": 19, "__init__": [3, 10, 11, 12, 13, 14, 15, 16, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 59, 61, 63, 70, 71, 73, 82, 83, 86, 87, 90, 91, 92, 93, 95, 98, 101, 102, 103, 105, 106, 107, 128, 129, 130, 148, 149, 150, 165, 166, 167, 168, 169, 182], "__match_args__": 19, "__repr__": 19, "__slots__": 19, "__tag__": [10, 12, 13, 14, 15], "_summary_": [56, 128, 129, 130], "abc": [28, 54, 56, 57, 59, 149, 168], "about": [98, 102, 103, 105, 106], "abstract": [28, 41, 54, 55, 56, 57, 59, 149, 168], "abstractdist": [42, 43, 44, 45, 46, 47, 48], "access": [10, 12, 13, 14, 15], "accomplish": 28, "accord": 48, "across": [10, 12, 13, 14, 15], "activ": 91, "ad": [19, 98, 102, 103, 105, 106], "adam": 91, "add": [73, 98, 102, 103, 105, 106], "add_base_nod": 73, "add_constructor": 166, "add_edg": 73, "add_implicit_resolv": [165, 166], "add_ind": 166, "add_multi_constructor": 166, "add_multi_represent": 165, "add_nod": 73, "add_path_resolv": [165, 166], "add_represent": 165, "addclasscleanup": [98, 102, 103, 105, 106], "addcleanup": [98, 102, 103, 105, 106], "addit": [19, 98, 102, 103, 105, 106], "addtypeequalityfunc": [98, 102, 103, 105, 106], "affect": [10, 12, 13, 14, 15], "after": [19, 98, 102, 103, 105, 106, 191], "against": [41, 42, 43, 44, 45, 46, 47, 48], "ai": [73, 191, 193], "algorithm": [41, 129, 190], "alia": [98, 102, 103, 105, 106], "all": [3, 10, 12, 13, 14, 15, 19, 34, 56, 71, 73, 98, 102, 103, 105, 106, 191], "all_agre": 34, "all_field": [10, 12, 13, 14, 15], "allow": [41, 98, 102, 103, 105, 106, 190, 191], "allow_unicod": 165, "almost": [98, 102, 103, 105, 106], "alpha": [91, 148, 150], "alpha_h": 86, "alpha_w": 86, "alreadi": [71, 73, 158, 190], "also": [10, 12, 13, 14, 15, 19, 34, 98, 102, 103, 105, 106], "an": [10, 12, 13, 14, 15, 19, 28, 41, 43, 59, 71, 73, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 182], "analyze_scalar": 165, "anchor": [165, 166], "anchor_nod": 165, "anchor_templ": 165, "andr\u00e9": 45, "angl": 48, "ani": [10, 12, 13, 14, 15, 16, 19, 28, 30, 32, 56, 128, 129, 130, 136, 137], "annot": 11, "anoth": 191, "append": 158, "appli": [10, 12, 13, 14, 15, 19, 30, 34, 38, 45, 158], "applic": 190, "ar": [3, 10, 12, 13, 14, 15, 19, 30, 34, 41, 71, 73, 98, 102, 103, 105, 106, 190, 191], "archiv": 73, "area": 10, "arg": [34, 98, 102, 103, 105, 106, 148, 149, 150], "argument": [16, 98, 102, 103, 105, 106], "arrai": [24, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 57, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163], "ascend_resolv": [165, 166], "asdict": [10, 12, 13, 14, 15, 19], "assert": [10, 12, 13, 14, 15, 19, 98, 102, 103, 105, 106], "assert_": [98, 102, 103, 105, 106], "assertalmostequ": [98, 102, 103, 105, 106], "assertcountequ": [98, 102, 103, 105, 106], "assertdictcontainssubset": [98, 102, 103, 105, 106], "assertdictequ": [98, 102, 103, 105, 106], "assertequ": [98, 102, 103, 105, 106], "assertfals": [98, 102, 103, 105, 106], "assertgreat": [98, 102, 103, 105, 106], "assertgreaterequ": [98, 102, 103, 105, 106], "asserti": [98, 102, 103, 105, 106], "assertin": [98, 102, 103, 105, 106], "assertionerror": [98, 102, 103, 105, 106], "assertisinst": [98, 102, 103, 105, 106], "assertisnon": [98, 102, 103, 105, 106], "assertisnot": [98, 102, 103, 105, 106], "assertisnotnon": [98, 102, 103, 105, 106], "assertless": [98, 102, 103, 105, 106], "assertlessequ": [98, 102, 103, 105, 106], "assertlistequ": [98, 102, 103, 105, 106], "assertlog": [98, 102, 103, 105, 106], "assertmultilineequ": [98, 102, 103, 105, 106], "assertnolog": [98, 102, 103, 105, 106], "assertnotalmostequ": [98, 102, 103, 105, 106], "assertnotequ": [98, 102, 103, 105, 106], "assertnotin": [98, 102, 103, 105, 106], "assertnotisinst": [98, 102, 103, 105, 106], "assertnotregex": [98, 102, 103, 105, 106], "assertnotregexpmatch": [98, 102, 103, 105, 106], "assertrais": [98, 102, 103, 105, 106], "assertraisesregex": [98, 102, 103, 105, 106], "assertraisesregexp": [98, 102, 103, 105, 106], "assertregex": [98, 102, 103, 105, 106], "assertregexpmatch": [98, 102, 103, 105, 106], "assertsequenceequ": [98, 102, 103, 105, 106], "assertsetequ": [98, 102, 103, 105, 106], "asserttru": [98, 102, 103, 105, 106], "asserttupleequ": [98, 102, 103, 105, 106], "assertwarn": [98, 102, 103, 105, 106], "assertwarnsregex": [98, 102, 103, 105, 106], "assign": 19, "associ": [19, 71], "assum": 73, "at_least_n_agre": 34, "attribut": [5, 7, 10, 11, 12, 13, 14, 15, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 86, 87, 90, 91, 92, 93, 95, 98, 102, 103, 105, 106, 109, 113, 117, 121, 125, 128, 129, 130, 148, 149, 150, 165, 166, 182], "auto": [86, 87, 91, 129], "auto_assign_tag": [10, 12, 13, 14, 15], "automat": [19, 98, 102, 103, 105, 106], "auxiliari": 10, "b": [98, 102, 103, 105, 106, 165, 166], "backend": 73, "background": 158, "bad": 19, "bandwidth": 130, "bar": [98, 102, 103, 105, 106], "base": [3, 10, 11, 12, 13, 14, 15, 16, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 59, 61, 63, 70, 71, 73, 82, 83, 86, 87, 90, 91, 92, 93, 95, 98, 101, 102, 103, 105, 106, 107, 128, 129, 130, 148, 149, 150, 165, 166, 167, 168, 169, 182], "base_load": [10, 12, 13, 14, 15], "basedataset": 25, "basedecid": [30, 32, 34, 38], "basejsonwizardmeta": [10, 12, 13, 14, 15], "basesupervis": [90, 91, 92, 93, 95], "baseunsupervis": [128, 129, 130], "basi": [98, 102, 103, 105, 106], "basic": [98, 102, 103, 105, 106], "batch": 24, "batch_sampl": 25, "batch_siz": [25, 91], "bbox": 10, "been": [10, 12, 13, 14, 15, 71, 98, 102, 103, 105, 106], "befor": [3, 98, 102, 103, 105, 106], "behavior": 41, "being": [73, 166], "belong": 73, "below": [10, 12, 13, 14, 15], "beltr\u00e1n": 45, "bene": 48, "beta_1": [91, 148], "beta_2": [91, 148], "beta_loss": 86, "between": [48, 98, 102, 103, 105, 106], "bin_seed": 130, "binari": [30, 152, 166], "binary_mask": 152, "bind_to": [10, 12, 13, 14, 15], "bit": 19, "bit_depth": 19, "block": [98, 102, 103, 105, 106, 166], "bool": [10, 12, 13, 14, 15, 28, 30, 32, 34, 35, 36, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 78, 82, 86, 87, 90, 91, 92, 93, 95, 110, 111, 112, 114, 115, 116, 118, 119, 120, 122, 123, 124, 128, 129, 130, 150, 158, 165, 166], "bool_": 3, "bool_valu": 166, "boolean": 34, "both": [98, 102, 103, 105, 106, 191], "bound": 10, "box": 10, "break": 41, "break_ti": 93, "built": [10, 12, 13, 14, 15, 19], "byte": 165, "c": [10, 12, 13, 14, 15, 19, 93, 142, 144, 145, 146], "cach": [10, 12, 13, 14, 15], "cache_s": 93, "calcul": [19, 42, 44, 46, 48], "call": [41, 42, 43, 44, 45, 46, 47, 48, 71, 98, 102, 103, 105, 106, 166], "callabl": [3, 34, 36, 98, 102, 103, 105, 106], "camel": [10, 12, 13, 14, 15], "can": [10, 12, 13, 14, 15, 19, 41, 43, 98, 102, 103, 105, 106, 158, 191], "canon": 165, "case": [98, 102, 103, 105, 106], "category_id": 10, "caught": [98, 102, 103, 105, 106], "cd": 86, "channel": [19, 34, 38, 43], "channel_count": 34, "check": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130], "check_block_entri": 166, "check_data": 166, "check_direct": 166, "check_document_end": 166, "check_document_start": 166, "check_empty_docu": 165, "check_empty_map": 165, "check_empty_sequ": 165, "check_ev": 166, "check_input_dim": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130], "check_kei": 166, "check_nod": 166, "check_output_dim": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130], "check_plain": 166, "check_print": 166, "check_resolver_prefix": [165, 166], "check_simple_kei": 165, "check_state_kei": 166, "check_token": 166, "check_valu": 166, "child": [56, 73], "children": [98, 102, 103, 105, 106], "choic": 166, "choos": 38, "choose_scalar_styl": 165, "chosen": [34, 38], "citat": 45, "cl": [10, 12, 13, 14, 15, 98, 102, 103, 105, 106, 165, 166], "clarifi": 158, "class": [2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 72, 73, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 127, 128, 129, 130, 147, 148, 149, 150, 164, 165, 166, 167, 168, 169, 181, 182, 190, 191], "class_weight": 93, "classif": [30, 38], "classifi": [30, 34, 38, 56, 128, 129, 130], "classmethod": [10, 11, 12, 13, 14, 15, 19, 73, 98, 102, 103, 105, 106, 165, 166], "classvar": [10, 12, 13, 14, 15], "cleanup": [98, 102, 103, 105, 106], "close": 165, "cluster_al": 130, "cm": [98, 102, 103, 105, 106], "coco": [11, 158], "coco_url": 13, "code": [98, 102, 103, 105, 106], "coef0": 93, "coeffici": 45, "collate_fn": 25, "collect": [10, 12, 13, 14, 15, 19, 98, 102, 103, 105, 106], "column": [19, 166], "com": [152, 190], "compar": [41, 42, 43, 44, 45, 46, 47, 48, 98, 102, 103, 105, 106], "comparison": 19, "compil": [165, 166], "complet": [98, 102, 103, 105, 106], "complex128": 3, "complex64": 3, "compose_docu": 166, "compose_mapping_nod": 166, "compose_nod": 166, "compose_scalar_nod": 166, "compose_sequence_nod": 166, "compris": 38, "comput": 19, "concept": 190, "condit": [10, 12, 13, 14, 15, 16], "config": [10, 12, 13, 14, 15], "configur": [10, 12, 13, 14, 15], "connect": 73, "consid": [98, 102, 103, 105, 106], "consist": 43, "constant": 91, "construct": [42, 44, 45, 46, 47, 48], "construct_docu": 166, "construct_map": 166, "construct_object": 166, "construct_pair": 166, "construct_scalar": 166, "construct_sequ": 166, "construct_undefin": 166, "construct_yaml_binari": 166, "construct_yaml_bool": 166, "construct_yaml_float": 166, "construct_yaml_int": 166, "construct_yaml_map": 166, "construct_yaml_nul": 166, "construct_yaml_object": 166, "construct_yaml_omap": 166, "construct_yaml_pair": 166, "construct_yaml_seq": 166, "construct_yaml_set": 166, "construct_yaml_str": 166, "construct_yaml_timestamp": 166, "constructor": 166, "contain": [10, 12, 13, 14, 15, 19, 41, 42, 43, 44, 45, 46, 47, 48, 73, 98, 102, 103, 105, 106, 158], "content": 19, "context": [98, 102, 103, 105, 106], "contributor": 14, "control": 166, "convert": [3, 10, 12, 13, 14, 15, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 86, 87, 90, 91, 92, 93, 128, 129, 130, 152], "copi": [73, 87, 152], "copy_x": 129, "correctli": 158, "correspond": [98, 102, 103, 105, 106], "cosin": 48, "count": 165, "counter": [98, 102, 103, 105, 106], "counttestcas": [98, 102, 103, 105, 106], "covariance_estim": 90, "covariance_typ": 128, "creat": [10, 12, 13, 14, 15, 38, 73, 98, 102, 103, 105, 106, 166, 190], "creation": 19, "cu3": 19, "cube": [3, 19], "cubeconsum": [28, 41, 54, 55, 56, 57], "cumul": 43, "current": [3, 41, 73], "current_index": [165, 166], "current_nod": [165, 166], "custom": 34, "custom_copi": 73, "cuvi": [73, 191, 193], "cuvis_ai": 192, "cuvis_col": 25, "d": [10, 12, 13, 14, 15, 136, 137], "d1": [98, 102, 103, 105, 106], "d2": [98, 102, 103, 105, 106], "dai": 166, "dark": 19, "data": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 59, 71, 73, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 165, 166, 168, 169, 170, 171, 172, 176, 178, 185, 188, 191], "data_dir": [73, 86, 87, 90, 91, 92, 93, 128, 129, 130, 168, 169], "data_typ": 165, "dataclass": [10, 12, 13, 14, 15, 19], "datacub": [42, 43, 44, 45, 46, 47, 48], "dataload": [71, 73], "datapoint": 30, "dataset": [19, 25], "datatyp": [3, 98, 102, 103, 105, 106], "date": 165, "date_captur": 13, "date_cr": 14, "datetim": 165, "datetimeto": [10, 12, 13, 14, 15], "daylight": 45, "dead": 19, "debug": [98, 102, 103, 105, 106], "debug_en": [10, 12, 13, 14, 15], "decid": 41, "decim": [98, 102, 103, 105, 106], "decis": [28, 30, 34, 35], "decision_function_shap": 93, "decod": [10, 12, 13, 14, 15, 19], "decoder_kwarg": [10, 12, 13, 14, 15, 19], "deconstruct": [98, 102, 103, 105, 106], "decor": [10, 12, 13, 14, 15, 67], "deem": [98, 102, 103, 105, 106], "deep": [166, 191], "default": [10, 12, 13, 14, 15, 19, 41, 42, 43, 44, 45, 46, 47, 48, 71, 73, 98, 102, 103, 105, 106, 158], "default_flow_styl": 165, "default_mapping_tag": [165, 166], "default_scalar_tag": [165, 166], "default_sequence_tag": [165, 166], "default_styl": 165, "default_tag": 166, "default_tag_prefix": 165, "defaulttestresult": [98, 102, 103, 105, 106], "defin": [19, 41, 42, 43, 44, 45, 46, 47, 48, 56, 73], "definit": 191, "degre": [47, 93], "delet": 73, "delete_nod": 73, "delta": [98, 102, 103, 105, 106], "depend": [28, 59, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130], "dependend": 19, "depth": [19, 165, 166], "descend_resolv": [165, 166], "describ": 19, "descript": [14, 98, 102, 103, 105, 106], "deseri": 166, "determin": [19, 98, 102, 103, 105, 106], "determine_block_hint": 165, "determine_encod": 166, "dict": [10, 12, 13, 14, 15, 19, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 70, 71, 73, 76, 77, 78, 80, 86, 87, 90, 91, 92, 93, 95, 128, 129, 130, 165, 167, 168, 169], "dict_factori": [10, 12, 13, 14, 15, 19], "dictionari": [10, 12, 13, 14, 15, 19, 41, 42, 43, 44, 45, 46, 47, 48, 98, 102, 103, 105, 106], "differ": [98, 102, 103, 105, 106, 191], "digit": [98, 102, 103, 105, 106], "digraph": [70, 71, 82], "dimens": [24, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130, 185], "dimension": 191, "dir_path": 140, "direct": 73, "directli": [10, 12, 13, 14, 15, 19], "directori": [30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 73], "disabl": [10, 12, 13, 14, 15], "dispos": [165, 166], "do": [73, 191], "do_someth": [98, 102, 103, 105, 106], "doclasscleanup": [98, 102, 103, 105, 106], "docleanup": [98, 102, 103, 105, 106], "docstr": [98, 102, 103, 105, 106], "doe": [73, 98, 102, 103, 105, 106, 190], "doubl": 166, "drop_last": 25, "dtype": 3, "ducktyp": [98, 102, 103, 105, 106], "dump": [10, 12, 13, 14, 15, 41, 42, 43, 44, 45, 46, 47, 48], "dumper": [10, 12, 13, 14, 15, 170, 171, 172, 176, 178], "dumpmeta": [10, 12, 13, 14, 15], "dunder": 19, "dure": 166, "e": [19, 165, 166, 191], "each": [10, 12, 13, 14, 15, 19, 24, 34, 41, 42, 43, 44, 45, 46, 47, 48], "early_stop": 91, "easi": [190, 191], "edg": 73, "ee": [165, 166], "effect": [98, 102, 103, 105, 106], "either": 19, "element": [98, 102, 103, 105, 106], "emit": [98, 102, 103, 105, 106, 165], "empti": [71, 188, 189], "enabl": [10, 12, 13, 14, 15], "enclos": [98, 102, 103, 105, 106], "encod": [10, 12, 13, 14, 15, 19, 165], "encoder_kwarg": [10, 12, 13, 14, 15, 19], "end": [98, 102, 103, 105, 106], "enforc": [98, 102, 103, 105, 106], "entri": 73, "entry_point": [70, 71], "enum": [182, 185], "enumer": 182, "environ": 192, "epoch": 95, "epsilon": [91, 148], "eq": 19, "equal": [30, 43, 98, 102, 103, 105, 106], "error": [71, 73, 98, 102, 103, 105, 106], "error_cod": [98, 102, 103, 105, 106], "escape_cod": 166, "escape_replac": [165, 166], "etc": 19, "euclidean": 43, "even": [98, 102, 103, 105, 106], "event": [73, 165], "everi": [41, 158], "exactli": [98, 102, 103, 105, 106], "examin": 19, "exampl": [10, 12, 13, 14, 15, 19, 98, 102, 103, 105, 106, 193], "except": [98, 102, 103, 105, 106], "exclud": [10, 12, 13, 14, 15], "execut": [98, 102, 103, 105, 106, 191], "exercis": [98, 102, 103, 105, 106], "exist": [73, 158, 190], "expect": [10, 12, 13, 14, 15, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 185], "expect_alia": 165, "expect_block_map": 165, "expect_block_mapping_kei": 165, "expect_block_mapping_simple_valu": 165, "expect_block_mapping_valu": 165, "expect_block_sequ": 165, "expect_block_sequence_item": 165, "expect_document_end": 165, "expect_document_root": 165, "expect_document_start": 165, "expect_first_block_mapping_kei": 165, "expect_first_block_sequence_item": 165, "expect_first_document_start": 165, "expect_first_flow_mapping_kei": 165, "expect_first_flow_sequence_item": 165, "expect_flow_map": 165, "expect_flow_mapping_kei": 165, "expect_flow_mapping_simple_valu": 165, "expect_flow_mapping_valu": 165, "expect_flow_sequ": 165, "expect_flow_sequence_item": 165, "expect_nod": 165, "expect_noth": 165, "expect_scalar": 165, "expect_stream_start": 165, "expected_except": [98, 102, 103, 105, 106], "expected_regex": [98, 102, 103, 105, 106], "expected_warn": [98, 102, 103, 105, 106], "explicit_end": 165, "explicit_start": 165, "exposur": 19, "expr": [98, 102, 103, 105, 106], "expr1": [98, 102, 103, 105, 106], "expr2": [98, 102, 103, 105, 106], "express": [98, 102, 103, 105, 106], "extra": [98, 102, 103, 105, 106], "extra_repr": 3, "extract": 19, "f": [165, 166], "f_": [165, 166], "fa": [165, 166], "factori": [10, 13, 95], "fail": [98, 102, 103, 105, 106], "failif": [98, 102, 103, 105, 106], "failifalmostequ": [98, 102, 103, 105, 106], "failifequ": [98, 102, 103, 105, 106], "failunless": [98, 102, 103, 105, 106], "failunlessalmostequ": [98, 102, 103, 105, 106], "failunlessequ": [98, 102, 103, 105, 106], "failunlessrais": [98, 102, 103, 105, 106], "failur": [98, 102, 103, 105, 106], "failureexcept": [98, 102, 103, 105, 106], "fals": [10, 12, 13, 14, 15, 19, 25, 30, 38, 71, 86, 87, 90, 91, 92, 93, 95, 98, 102, 103, 105, 106, 110, 111, 114, 115, 118, 119, 122, 123, 128, 129, 130, 137, 158, 165, 166], "fetch_alia": 166, "fetch_anchor": 166, "fetch_block_entri": 166, "fetch_block_scalar": 166, "fetch_direct": 166, "fetch_document_end": 166, "fetch_document_ind": 166, "fetch_document_start": 166, "fetch_doubl": 166, "fetch_flow_collection_end": 166, "fetch_flow_collection_start": 166, "fetch_flow_entri": 166, "fetch_flow_mapping_end": 166, "fetch_flow_mapping_start": 166, "fetch_flow_scalar": 166, "fetch_flow_sequence_end": 166, "fetch_flow_sequence_start": 166, "fetch_fold": 166, "fetch_kei": 166, "fetch_liter": 166, "fetch_more_token": 166, "fetch_plain": 166, "fetch_singl": 166, "fetch_stream_end": 166, "fetch_stream_start": 166, "fetch_tag": 166, "fetch_valu": 166, "field": [10, 12, 13, 14, 15, 16, 19, 24], "fields_to_merg": [10, 12, 13, 14, 15], "file": [19, 73, 158, 166], "file_nam": 13, "filenam": [19, 98, 102, 103, 105, 106, 169], "filepath": [19, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 73], "fileset": 19, "filter": [16, 98, 102, 103, 105, 106], "final": 28, "first": [73, 98, 102, 103, 105, 106, 165, 166, 185], "fit": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 54, 56, 57, 71, 73, 86, 87, 90, 91, 92, 93, 95, 128, 129, 130], "fit_nod": 71, "fixtur": [98, 102, 103, 105, 106], "flag": 19, "flatten": 185, "flatten_map": 166, "flickr_url": 13, "float": [10, 13, 19, 30, 148, 150, 165, 166], "float16": 3, "float32": [3, 165, 166], "float64": [3, 165, 166], "flow": [71, 73, 165], "flow_styl": 165, "flush_stream": 165, "follow": 56, "foo": [98, 102, 103, 105, 106], "form": 191, "format": [19, 28, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 183], "formula": 48, "forward": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 57, 59, 71, 73, 86, 87, 90, 91, 92, 93, 95, 128, 129, 130, 166], "forward_nod": 71, "found": [98, 102, 103, 105, 106], "frame": 19, "framer": 19, "framework": [190, 191], "freez": 73, "frobeniu": 86, "from": [19, 28, 30, 32, 34, 38, 59, 73, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 152, 158, 166, 190], "from_dict": [10, 12, 13, 14, 15], "from_json": [10, 12, 13, 14, 15], "from_list": [10, 12, 13, 14, 15], "from_path": 11, "from_yaml": 19, "from_yaml_fil": 19, "fromdict": [10, 12, 13, 14, 15], "frozen": 19, "frozenset": [10, 12, 13, 14, 15], "full": [3, 128], "function": [9, 10, 12, 13, 14, 15, 18, 19, 23, 25, 33, 41, 42, 43, 44, 45, 46, 47, 48, 66, 71, 72, 75, 98, 102, 103, 105, 106, 132, 135, 139, 141, 151, 164, 165, 166, 179, 181, 187, 190], "further": [98, 102, 103, 105, 106], "g": [19, 191], "gamma": 93, "garc\u00eda": 45, "gener": [56, 128, 129, 130, 158], "generate_anchor": 165, "get": [3, 41, 42, 43, 44, 45, 46, 47, 48, 73, 190, 193], "get_data": 166, "get_datatyp": 3, "get_ev": 166, "get_fit_requested_meta": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130], "get_forward_requested_meta": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130], "get_mark": 166, "get_nod": 166, "get_single_data": 166, "get_single_nod": 166, "get_token": 166, "getlogg": [98, 102, 103, 105, 106], "give": [98, 102, 103, 105, 106], "given": [10, 12, 13, 14, 15, 19, 38, 43, 71, 98, 102, 103, 105, 106], "global": [10, 12, 13, 14, 15], "goal": 190, "good": 45, "graph": [30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 70, 71, 82], "guess": 185, "ha": [10, 12, 13, 14, 15, 71, 98, 102, 103, 105, 106, 158], "handl": [98, 102, 103, 105, 106, 165], "handle_text": 165, "have": [73, 98, 102, 103, 105, 106], "hearth": 191, "height": [13, 43], "helper": 10, "here": [10, 12, 13, 14, 15, 34], "hern\u00e1ndez": 45, "hidden_layer_s": 91, "higher": [98, 102, 103, 105, 106], "highest": 38, "hook": [10, 12, 13, 14, 15, 98, 102, 103, 105, 106], "hour": 166, "how": 193, "http": 152, "i": [10, 12, 13, 14, 15, 19, 28, 30, 32, 34, 38, 59, 71, 73, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 190, 191], "id": [10, 12, 13, 15, 73, 98, 102, 103, 105, 106, 165], "identifi": [98, 102, 103, 105, 106], "ignor": 159, "ignore_alias": 165, "imag": [11, 41, 158], "image_id": [10, 11], "img": 158, "img_nam": 158, "immedi": [98, 102, 103, 105, 106], "implement": [41, 56, 98, 102, 103, 105, 106], "implicit": [165, 166], "import": [28, 30, 32, 34, 38, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130, 146], "includ": [98, 102, 103, 105, 106], "increase_ind": 165, "indent": [165, 166], "indentless": 165, "indentless_sequ": 166, "index": [41, 42, 43, 44, 45, 46, 47, 48, 98, 102, 103, 105, 106, 165, 166], "indic": [38, 165, 185], "individu": 71, "inf": [165, 166], "inf_valu": [165, 166], "info": [11, 98, 102, 103, 105, 106], "inform": [19, 98, 102, 103, 105, 106, 190], "init": [19, 41, 42, 43, 44, 45, 46, 47, 48, 86, 129], "init_param": 128, "initi": [10, 12, 13, 14, 15, 41, 42, 43, 44, 45, 46, 47, 48, 56, 128, 129, 130, 166], "inner_modul": 167, "input": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 57, 59, 71, 86, 87, 90, 91, 92, 93, 128, 129, 130, 185, 191], "input_dim": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130], "input_shap": [83, 184], "inputdimens": 185, "inshap": 83, "inspect": [98, 102, 103, 105, 106, 185], "instal": 190, "instanc": [10, 12, 13, 14, 15, 19, 38, 98, 102, 103, 105, 106], "instead": [10, 12, 13, 14, 15, 19, 98, 102, 103, 105, 106, 190], "int": [10, 11, 12, 13, 14, 15, 19, 28, 34, 36, 38, 47, 59, 83, 95, 153, 165, 166], "int16": 3, "int32": 3, "int64": 3, "int8": 3, "integ": 158, "integr": 19, "integration_time_u": 19, "interfac": 190, "intermediari": 71, "introduct": 193, "invent": 190, "invok": [10, 12, 13, 14, 15, 98, 102, 103, 105, 106], "is_default": [10, 12, 13, 14, 15], "iscrowd": 10, "isinst": [98, 102, 103, 105, 106], "item": [16, 98, 102, 103, 105, 106], "iter": [10, 12, 13, 14, 15, 71, 73, 98, 102, 103, 105, 106], "iterated_pow": 87, "its": [98, 102, 103, 105, 106, 158, 191], "itself": 73, "j": 45, "json": [10, 12, 13, 14, 15, 158], "json_key_to_field": [10, 12, 13, 14, 15], "jsonserializ": [10, 12, 13, 14, 15], "jsonwizard": [10, 12, 13, 14, 15], "just": [98, 102, 103, 105, 106], "k": 129, "keep": [98, 102, 103, 105, 106], "keep_onli": 137, "kei": [19, 166], "kernel": 93, "key_transform": [10, 12, 13, 14, 15], "key_transform_with_dump": [10, 12, 13, 14, 15], "key_transform_with_load": [10, 12, 13, 14, 15], "keyact": [10, 12, 13, 14, 15], "keycas": [10, 12, 13, 14, 15], "keyword": [16, 19, 98, 102, 103, 105, 106], "kind": [165, 166], "kmean": 128, "known": 41, "kw_onli": 19, "kwarg": [10, 12, 13, 14, 15, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130], "l": [45, 165, 166], "l1": [42, 46], "l1_ratio": 86, "l2": 44, "label": [28, 32, 71, 158, 188, 191], "label_nam": 158, "labelconsum": 54, "larg": 48, "larger": 30, "layer": [73, 185], "learn": 191, "learning_r": 91, "learning_rate_init": 91, "least": 73, "length": [43, 71, 98, 102, 103, 105, 106, 166], "less": [98, 102, 103, 105, 106], "lettercas": [10, 12, 13, 14, 15], "level": [98, 102, 103, 105, 106], "licens": [11, 13], "lifo": [98, 102, 103, 105, 106], "like": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 57, 59, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 185, 190, 191], "likewis": [10, 12, 13, 14, 15], "line": [98, 102, 103, 105, 106], "line_break": 165, "linear": 45, "lineno": [98, 102, 103, 105, 106], "link": 19, "list": [10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 24, 41, 42, 43, 44, 45, 46, 47, 48, 71, 73, 79, 80, 98, 102, 103, 105, 106, 133, 158, 165, 167, 191], "list1": [98, 102, 103, 105, 106], "list2": [98, 102, 103, 105, 106], "list_of_dict": [10, 12, 13, 14, 15], "list_to_json": [10, 12, 13, 14, 15], "list_to_yaml": 19, "lloyd": 129, "load": [10, 12, 13, 14, 15, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 86, 87, 90, 91, 92, 93, 95, 128, 129, 130, 168, 169], "load_from_fil": 73, "load_nod": 167, "loader": [10, 12, 13, 14, 15, 173, 174, 175, 177], "loadmeta": [10, 12, 13, 14, 15], "locat": [34, 38, 73], "log": [98, 102, 103, 105, 106], "logger": [98, 102, 103, 105, 106], "logger_nam": [98, 102, 103, 105, 106], "logrecord": [98, 102, 103, 105, 106], "longmessag": [98, 102, 103, 105, 106], "look": [10, 12, 13, 14, 15, 19, 190, 193], "lr": [148, 150], "m": [71, 73, 192], "machin": 191, "mai": [19, 34], "main": [73, 169], "make": 28, "manag": [98, 102, 103, 105, 106], "map": [10, 12, 13, 14, 15, 19, 41, 42, 43, 44, 45, 46, 47, 48, 165, 166], "mapper": 48, "mark": [98, 102, 103, 105, 106, 166], "marshal_date_time_a": [10, 12, 13, 14, 15], "mask": [10, 152, 158], "mask_siz": 17, "match": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130], "match_arg": 19, "matrix": [34, 38], "max_fun": 91, "max_it": [86, 91, 93, 128, 129, 130], "maxdiff": [98, 102, 103, 105, 106], "maximum": 38, "mean": 129, "means_init": 128, "measur": [19, 20, 41, 45, 48, 98, 102, 103, 105, 106], "member": [98, 102, 103, 105, 106], "memori": 73, "merg": [165, 166], "messag": [98, 102, 103, 105, 106], "mesu": 20, "meta": [10, 12, 13, 14, 15, 19], "metadata": [41, 42, 43, 44, 45, 46, 47, 48, 71, 76, 77, 78], "method": [3, 10, 11, 12, 13, 14, 15, 16, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 59, 61, 63, 70, 71, 73, 82, 83, 86, 87, 90, 91, 92, 93, 95, 98, 101, 102, 103, 105, 106, 107, 128, 129, 130, 148, 149, 150, 165, 166, 167, 168, 169, 190], "methodnam": [98, 102, 103, 105, 106], "metric": 41, "microsecond": 19, "might": [41, 98, 102, 103, 105, 106], "min_bin_freq": 130, "minim": 38, "mismatch": [41, 42, 43, 44, 45, 46, 47, 48, 73], "miss": 19, "mode": 19, "model": [45, 73, 95, 184, 185], "model_arg": 95, "modifi": [10, 12, 13, 14, 15], "modul": [0, 1, 5, 7, 26, 39, 49, 67, 68, 73, 84, 88, 95, 96, 108, 109, 113, 117, 121, 125, 126, 131, 143, 185, 191], "moment": 158, "momentum": [91, 150], "month": 166, "more": [98, 102, 103, 105, 106], "most": [98, 102, 103, 105, 106], "msg": [98, 102, 103, 105, 106], "much": 190, "multi": [38, 98, 102, 103, 105, 106], "multi_constructor": 166, "multipl": [19, 34, 41, 158], "must": [19, 43, 56, 73, 98, 102, 103, 105, 106], "my_str": [10, 12, 13, 14, 15], "myclass": [10, 12, 13, 14, 15], "mystr": [10, 12, 13, 14, 15], "n": [36, 38, 47, 165, 166], "n_cluster": 129, "n_compon": [86, 87, 90, 128], "n_init": [128, 129], "n_iter_no_chang": 91, "n_job": 130, "n_oversampl": 87, "name": [10, 12, 13, 14, 15, 19, 73, 79, 98, 102, 103, 105, 106, 148, 149, 150, 158, 166, 167], "nan": 166, "nan_valu": 166, "ndarrai": [17, 30, 32, 34, 35, 36, 38, 41, 42, 43, 44, 45, 46, 47, 48, 71, 73, 86, 87, 90, 91, 92, 93, 95, 128, 129, 130, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 188, 189], "need": [28, 30, 32, 34, 38, 59, 71, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 191], "need_ev": 165, "need_more_ev": 165, "need_more_token": 166, "need_whitespac": 165, "nest": [10, 12, 13, 14, 15], "nesterov": 150, "nesterovs_momentum": 91, "new": [10, 12, 13, 14, 15, 16, 19, 42, 43, 44, 45, 46, 47, 48, 56, 73], "newli": 166, "next_possible_simple_kei": 166, "nicer": [98, 102, 103, 105, 106], "niev": 45, "nm": 43, "nn": 95, "nn_config": 95, "node": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 70, 71, 73, 74, 76, 77, 83, 86, 87, 90, 91, 92, 93, 128, 129, 130, 165, 166, 167, 173, 174, 175, 177, 190], "node2": 73, "non_print": 166, "none": [3, 10, 12, 13, 14, 15, 19, 25, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 71, 73, 82, 83, 86, 87, 90, 91, 92, 93, 95, 98, 102, 103, 105, 106, 128, 129, 130, 148, 150, 158, 165, 166, 167, 168, 169, 188], "nonetyp": 165, "norm": 47, "normal": [48, 98, 102, 103, 105, 106], "nota": 48, "note": [98, 102, 103, 105, 106], "notion": 41, "np": [3, 30, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 71], "null": [165, 166], "num_work": 25, "number": [19, 34, 38, 43, 98, 102, 103, 105, 106], "numer": 73, "numpi": [3, 19, 24, 30, 41, 42, 43, 44, 45, 46, 47, 48, 165, 166], "numpy_array_file_represent": 165, "numpy_arrray_file_constructor": 166, "numpy_arrray_string_constructor": 166, "numpy_float32_constructor": 166, "numpy_float32_represent": 165, "numpy_float64_constructor": 166, "numpy_float64_represent": 165, "o": [165, 166], "obj": [80, 98, 102, 103, 105, 106], "object": [10, 11, 12, 13, 14, 15, 16, 19, 28, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 59, 61, 63, 70, 71, 73, 82, 83, 86, 87, 90, 91, 92, 93, 98, 101, 102, 103, 105, 106, 107, 128, 129, 130, 158, 166, 167], "occlud": 158, "off": [165, 166], "often": 191, "omap": 166, "omit": [98, 102, 103, 105, 106], "one": [19, 73, 98, 102, 103, 105, 106, 191], "onli": [19, 98, 102, 103, 105, 106], "open": 165, "oper": [98, 102, 103, 105, 106], "optic": 45, "optim": [95, 98, 102, 103, 105, 106, 148, 150], "option": [10, 12, 13, 14, 15, 41, 42, 43, 44, 45, 46, 47, 48, 71, 73, 98, 102, 103, 105, 106], "order": [19, 47, 98, 102, 103, 105, 106], "org": [165, 166], "orig_shap": [160, 161, 162, 163], "other": [19, 98, 102, 103, 105, 106, 190], "out": [98, 102, 103, 105, 106], "outer": 24, "output": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 71, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 158], "output_dim": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130], "output_dir": 158, "output_format": 3, "output_lambda": 3, "outputformat": 3, "over": [10, 12, 13, 14, 15, 73], "overillumin": 19, "overwritten": 73, "ovr": 93, "own": [98, 102, 103, 105, 106, 158, 190], "p": [165, 166], "pair": 166, "param": [16, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 152, 158, 167], "paramet": [10, 12, 13, 14, 15, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 59, 71, 73, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130], "parameter": [41, 42, 43, 44, 45, 46, 47, 48], "params_list": 167, "parent": [73, 165, 166], "parse_block_mapping_first_kei": 166, "parse_block_mapping_kei": 166, "parse_block_mapping_valu": 166, "parse_block_nod": 166, "parse_block_node_or_indentless_sequ": 166, "parse_block_sequence_entri": 166, "parse_block_sequence_first_entri": 166, "parse_document_cont": 166, "parse_document_end": 166, "parse_document_start": 166, "parse_flow_mapping_empty_valu": 166, "parse_flow_mapping_first_kei": 166, "parse_flow_mapping_kei": 166, "parse_flow_mapping_valu": 166, "parse_flow_nod": 166, "parse_flow_sequence_entri": 166, "parse_flow_sequence_entry_mapping_end": 166, "parse_flow_sequence_entry_mapping_kei": 166, "parse_flow_sequence_entry_mapping_valu": 166, "parse_flow_sequence_first_entri": 166, "parse_implicit_document_start": 166, "parse_indentless_sequence_entri": 166, "parse_nod": 166, "parse_stream_start": 166, "part": 190, "pass": [19, 41, 42, 43, 44, 45, 46, 47, 48, 56, 71], "path": [11, 19, 21, 22, 73, 86, 87, 90, 91, 92, 93, 128, 129, 130, 158, 165, 166, 168, 169], "pattern": [98, 102, 103, 105, 106], "pca": 191, "peek": 166, "peek_ev": 166, "peek_token": 166, "pep": 19, "per": [19, 38], "pickle_inn": 167, "pip": 190, "pipelin": 190, "pixel": 19, "place": [19, 98, 102, 103, 105, 106], "point": [34, 73], "polygon": 10, "posit": [28, 30, 32, 34, 38, 43, 59, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130], "possibl": 190, "power_iteration_norm": 87, "power_t": [91, 150], "precisions_init": 128, "pred": 189, "predict": [28, 32], "prefix": [136, 137, 138, 165, 166], "prefix_text": 165, "prepare_anchor": 165, "prepare_tag": 165, "prepare_tag_handl": 165, "prepare_tag_prefix": 165, "prepare_vers": 165, "preprocess": [41, 57, 59], "preprocessor": 190, "prevent": [73, 166], "print": [98, 102, 103, 105, 106], "prior": [90, 92], "privat": 71, "probabl": 93, "process": [10, 12, 13, 14, 15, 19, 71, 73, 191], "process_anchor": 165, "process_direct": 166, "process_empty_scalar": 166, "process_scalar": 165, "process_tag": 165, "processing_mod": 19, "properti": [11, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 86, 87, 90, 91, 92, 93, 128, 129, 130, 148, 149, 150], "provid": [19, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 73, 98, 102, 103, 105, 106, 190], "purpos": [98, 102, 103, 105, 106], "put": 24, "python": [10, 12, 13, 14, 15, 98, 102, 103, 105, 106, 192], "pytorch": [71, 73, 185, 190], "pytorch_arg": [148, 149, 150], "queryablelist": 11, "quickli": 190, "quickstart": 190, "r": [165, 166], "rais": [41, 42, 43, 44, 45, 46, 47, 48, 71, 73, 98, 102, 103, 105, 106], "raise_on_unknown_json_kei": [10, 12, 13, 14, 15], "random_st": [86, 87, 91, 93, 128, 129], "rather": 191, "rbf": 93, "re": [98, 102, 103, 105, 106, 165, 166, 190], "read": 19, "reason": [98, 102, 103, 105, 106], "recommend": 192, "reconstruct": 73, "record": [19, 98, 102, 103, 105, 106], "recreat": [41, 42, 43, 44, 45, 46, 47, 48], "recurs": [10, 12, 13, 14, 15, 19], "recursive_class": [10, 12, 13, 14, 15], "reduct": 191, "ref_spectra": [41, 42, 43, 44, 45, 46, 47, 48], "refer": [19, 41, 42, 43, 44, 45, 46, 47, 48, 98, 102, 103, 105, 106], "reflect": 19, "reg_covar": 128, "reg_param": 92, "regard": [98, 102, 103, 105, 106], "regex": [98, 102, 103, 105, 106], "regexp": [98, 102, 103, 105, 106, 165, 166], "regist": [98, 102, 103, 105, 106], "regular": [98, 102, 103, 105, 106], "rel": 41, "relu": 91, "remov": 73, "remove_possible_simple_kei": 166, "repositori": 193, "repr": 19, "repres": [16, 165, 191], "represent": [19, 28, 30, 32, 34, 38, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130, 165], "represent_binari": 165, "represent_bool": 165, "represent_d": 165, "represent_data": 165, "represent_datetim": 165, "represent_dict": 165, "represent_float": 165, "represent_int": 165, "represent_list": 165, "represent_map": 165, "represent_non": 165, "represent_scalar": 165, "represent_sequ": 165, "represent_set": 165, "represent_str": 165, "represent_undefin": 165, "represent_yaml_object": 165, "request": 78, "requir": [41, 42, 43, 44, 45, 46, 47, 48], "residu": 71, "resolv": [165, 166], "result": [30, 34, 38, 71, 98, 102, 103, 105, 106], "resum": [98, 102, 103, 105, 106], "return": [3, 10, 12, 13, 14, 15, 16, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 59, 71, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 152, 158, 185], "rich": 19, "rle": [17, 152], "romero": 45, "root": [3, 10, 12, 13, 14, 15, 19, 71, 98, 102, 103, 105, 106, 165], "round": [98, 102, 103, 105, 106], "rout": 80, "row": 19, "rtype": 30, "rule": [34, 98, 102, 103, 105, 106], "run": [98, 102, 103, 105, 106, 192], "runtest": [98, 102, 103, 105, 106], "runtimeerror": 71, "safeconstructor": 166, "safedump": 165, "safeload": 166, "saferepresent": 165, "sam": 48, "same": [19, 86, 98, 102, 103, 105, 106, 158], "sampl": [10, 12, 13, 14, 15], "sampler": 25, "save": [41, 42, 43, 44, 45, 46, 47, 48, 158], "save_possible_simple_kei": 166, "save_to_fil": 73, "scalar": 165, "scale": 93, "scan_anchor": 166, "scan_block_scalar": 166, "scan_block_scalar_break": 166, "scan_block_scalar_ignored_lin": 166, "scan_block_scalar_ind": 166, "scan_block_scalar_indent": 166, "scan_direct": 166, "scan_directive_ignored_lin": 166, "scan_directive_nam": 166, "scan_flow_scalar": 166, "scan_flow_scalar_break": 166, "scan_flow_scalar_non_spac": 166, "scan_flow_scalar_spac": 166, "scan_line_break": 166, "scan_plain": 166, "scan_plain_spac": 166, "scan_tag": 166, "scan_tag_directive_handl": 166, "scan_tag_directive_prefix": 166, "scan_tag_directive_valu": 166, "scan_tag_handl": 166, "scan_tag_uri": 166, "scan_to_next_token": 166, "scan_uri_escap": 166, "scan_yaml_directive_numb": 166, "scan_yaml_directive_valu": 166, "scanner": 166, "score": [41, 42, 43, 44, 45, 46, 47, 48], "second": [19, 98, 102, 103, 105, 106], "seed": 130, "segment": 10, "self": [57, 86, 87, 98, 102, 103, 105, 106], "separ": [10, 12, 13, 14, 15], "seq": [165, 166], "seq1": [98, 102, 103, 105, 106], "seq2": [98, 102, 103, 105, 106], "seq_typ": [98, 102, 103, 105, 106], "sequenc": [98, 102, 103, 105, 106, 165], "sequenti": [41, 42, 43, 44, 45, 46, 47, 48, 73], "serial": [19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 86, 87, 90, 91, 92, 93, 95, 128, 129, 130], "serial_dir": [59, 167], "serializ": [41, 42, 43, 44, 45, 46, 47, 48, 73], "serialize_nod": [165, 167], "session": 22, "sessionfil": 22, "set": [3, 10, 12, 13, 14, 15, 19, 71, 98, 102, 103, 105, 106, 165, 166], "set1": [98, 102, 103, 105, 106], "set2": [98, 102, 103, 105, 106], "set_datatyp": 3, "set_fit_meta_request": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130], "set_forward_meta_request": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130], "setup": [98, 101, 102, 103, 105, 106, 107], "setupclass": [98, 102, 103, 105, 106], "shallow": 191, "shamelessli": 152, "shape": [19, 28, 30, 32, 34, 38, 43, 56, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130, 180], "share": 158, "shortdescript": [98, 102, 103, 105, 106], "should": [10, 12, 13, 14, 15, 41, 42, 43, 44, 45, 46, 47, 48, 73, 98, 102, 103, 105, 106, 158], "shrink": 93, "shrinkag": 90, "shuffl": [25, 86, 91], "signific": [98, 102, 103, 105, 106], "silenc": [98, 102, 103, 105, 106], "similar": [98, 102, 103, 105, 106, 191], "similarli": [98, 102, 103, 105, 106], "simpl": [30, 38, 191, 193], "simple_kei": 165, "singl": [34, 38, 41], "single_object_per_label": 158, "singular": [41, 42, 43, 44, 45, 46, 47, 48], "size": [10, 19, 24, 43, 73, 166], "skew": 48, "skip": [98, 102, 103, 105, 106], "skip_default": [10, 12, 13, 14, 15], "skip_defaults_if": [10, 12, 13, 14, 15], "skip_if": [10, 12, 13, 14, 15], "skiptest": [98, 102, 103, 105, 106], "sklearn": 190, "sklearn_arg": [148, 149, 150], "sklearnwrap": [86, 87, 90, 91, 92, 93, 128, 129, 130], "slot": 19, "smaller": 30, "so": [10, 12, 13, 14, 15], "solver": [86, 90, 91], "some_attribut": [98, 102, 103, 105, 106], "someexcept": [98, 102, 103, 105, 106], "somewarn": [98, 102, 103, 105, 106], "soon": 190, "sort_kei": 165, "sourc": [3, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 28, 30, 32, 34, 35, 36, 38, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 59, 61, 63, 67, 70, 71, 73, 74, 76, 77, 78, 79, 80, 82, 83, 86, 87, 90, 91, 92, 93, 95, 98, 101, 102, 103, 105, 106, 107, 128, 129, 130, 133, 134, 136, 137, 138, 140, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 188, 189], "space": 47, "spatial": [34, 38, 185], "special": 166, "specif": [28, 30, 32, 34, 38, 59, 67, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 190], "specifi": [3, 10, 12, 13, 14, 15, 19, 98, 102, 103, 105, 106], "spectra": [41, 42, 43, 44, 45, 46, 47, 48], "spectra_to_arrai": [41, 42, 43, 44, 45, 46, 47, 48], "spectral": [41, 45, 48], "spectrum": 43, "split": 165, "stackoverflow": 152, "stage": 71, "stale_possible_simple_kei": 166, "start": [71, 190, 193], "start_mark": 166, "state": 28, "state_dict": [183, 186], "static": [30, 41, 42, 43, 44, 45, 46, 47, 48], "staticmethod": 25, "store": [19, 41, 42, 43, 44, 45, 46, 47, 48, 73], "store_covari": [90, 92], "str": [3, 10, 12, 13, 14, 15, 19, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 70, 71, 73, 78, 79, 80, 133, 136, 137, 158, 165, 166, 167, 169], "strategi": 34, "stream": [165, 166], "string": [10, 12, 13, 14, 15, 19, 98, 102, 103, 105, 106], "string_or_stream": 19, "structur": 73, "style": [98, 102, 103, 105, 106, 165, 166], "sub": [10, 12, 13, 14, 15], "subclass": [10, 12, 13, 14, 15, 98, 102, 103, 105, 106], "subset": [98, 102, 103, 105, 106], "subtest": [98, 102, 103, 105, 106], "success": [98, 102, 103, 105, 106], "successfulli": 73, "successor": 73, "suffer": [98, 102, 103, 105, 106], "supercategori": 12, "superset": [98, 102, 103, 105, 106], "support": [98, 102, 103, 105, 106], "svd": 90, "svd_solver": 87, "symmetri": [98, 102, 103, 105, 106], "t": [10, 12, 13, 14, 15, 165, 166], "tag": [10, 12, 13, 14, 15, 165, 166], "tag_kei": [10, 12, 13, 14, 15], "tag_prefix": 166, "take": [71, 98, 102, 103, 105, 106, 193], "taken": 19, "target": 73, "target_transform": 3, "task": [28, 191], "teardown": [98, 102, 103, 105, 106], "teardownclass": [98, 102, 103, 105, 106], "tensor": 10, "test": [45, 71], "test_correct_input_dim": [101, 102, 103, 105, 106, 107], "test_correct_output_dim": [101, 102, 103, 105, 106, 107], "test_dataload": 71, "test_dl": 73, "test_get_shape_without_batch": 98, "test_incorrect_input_dim": [101, 102, 103, 105, 106, 107], "test_initi": [101, 102, 103, 105, 106, 107], "test_passthrough": [101, 102, 103, 105, 106, 107], "testcas": [98, 102, 103, 105, 106], "testpreprocessednod": [102, 103], "testresult": [98, 102, 103, 105, 106], "testunsupervisednod": [105, 106], "text": [98, 102, 103, 105, 106, 165], "th": 47, "than": [30, 98, 102, 103, 105, 106], "the_except": [98, 102, 103, 105, 106], "the_warn": [98, 102, 103, 105, 106], "thei": [41, 98, 102, 103, 105, 106], "themselv": 191, "thi": [10, 12, 13, 14, 15, 19, 30, 32, 34, 38, 41, 43, 48, 73, 98, 102, 103, 105, 106, 190, 191, 192], "thing": 191, "those": 191, "three": 182, "threshold": 30, "through": [41, 42, 43, 44, 45, 46, 47, 48, 56, 71], "time": [19, 73, 98, 102, 103, 105, 106], "timeout": 25, "timestamp": [165, 166], "timestamp_regexp": 166, "titl": [188, 189], "to_dict": [10, 12, 13, 14, 15], "to_json": [10, 12, 13, 14, 15], "to_torchvis": 10, "to_yaml": 19, "to_yaml_fil": 19, "todo": 41, "tokenclass": 166, "tol": [86, 87, 90, 91, 92, 93, 128, 129], "torch": [71, 95], "torch_lay": 73, "torchvis": 10, "toward": 48, "train": [71, 73, 191], "train_dataload": 71, "train_dl": 73, "transform": [3, 28, 32, 56, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130], "tree": 190, "tri": 190, "trigger": [98, 102, 103, 105, 106], "true": [10, 12, 13, 14, 15, 19, 30, 87, 91, 93, 98, 102, 103, 105, 106, 129, 130, 146, 150, 165, 166, 167], "tt": [165, 166], "tupl": [10, 12, 13, 14, 15, 17, 19, 28, 30, 32, 34, 38, 59, 71, 73, 83, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130, 133, 153, 165], "tuple1": [98, 102, 103, 105, 106], "tuple2": [98, 102, 103, 105, 106], "tutori": 190, "two": [41, 98, 102, 103, 105, 106, 182], "type": [3, 10, 12, 13, 14, 15, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 71, 73, 86, 87, 98, 102, 103, 105, 106, 185, 191], "typeerror": 71, "typeobj": [98, 102, 103, 105, 106], "typic": [10, 12, 13, 14, 15, 43], "u": 166, "u0010ffff": 166, "u2028": [165, 166], "u2029": [165, 166], "ud7ff": 166, "ue000": 166, "uint8": 3, "unequ": [98, 102, 103, 105, 106], "unexpect": [98, 102, 103, 105, 106], "unexpected_regex": [98, 102, 103, 105, 106], "uniform": 190, "uniniti": 71, "union": [71, 95], "unknown": 182, "unless": [98, 102, 103, 105, 106], "unlik": [98, 102, 103, 105, 106], "unsafe_hash": 19, "unsupervis": 56, "unwind_ind": 166, "up": [98, 102, 103, 105, 106], "updat": 166, "update_raw": 166, "url": [14, 15], "us": [10, 12, 13, 14, 15, 19, 30, 34, 38, 41, 67, 71, 98, 102, 103, 105, 106, 190, 191, 192], "usag": [10, 12, 13, 14, 15, 19], "use_min": 38, "user": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 128, 129, 130, 166], "usual": [98, 102, 103, 105, 106], "util": [34, 71, 95], "uuid": 73, "v": [165, 166], "v1": [10, 12, 13, 14, 15], "v1_debug": [10, 12, 13, 14, 15], "v1_field_to_alia": [10, 12, 13, 14, 15], "v1_key_cas": [10, 12, 13, 14, 15], "v1_on_unknown_kei": [10, 12, 13, 14, 15], "v1_unsafe_parse_dataclass_in_union": [10, 12, 13, 14, 15], "valid": [3, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 86, 87, 90, 91, 92, 93, 98, 102, 103, 105, 106, 128, 129, 130], "validation_fract": 91, "valu": [10, 12, 13, 14, 15, 16, 19, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 98, 102, 103, 105, 106, 165, 166, 182, 185], "valueerror": [41, 42, 43, 44, 45, 46, 47, 48, 73, 98, 102, 103, 105, 106], "vari": 43, "vector": [43, 47], "verbos": [86, 91, 93, 95, 128, 129, 165, 166], "verbose_interv": 128, "verifi": [82, 83], "version": [14, 165], "version_text": 165, "via": [10, 12, 13, 14, 15], "video": 19, "virtual": 192, "visiondataset": 3, "visit": 146, "w": 19, "wa": [19, 98, 102, 103, 105, 106], "wai": 41, "wanted_shap": 153, "warm_start": [71, 86, 87, 90, 91, 92, 93, 128, 129, 130], "warn": [98, 102, 103, 105, 106], "warnclass": [98, 102, 103, 105, 106], "wavelength": [13, 19, 43], "wavelengths_nm": 19, "we": 192, "weight": 42, "weights_init": 128, "wheel": 190, "when": [10, 12, 13, 14, 15, 98, 102, 103, 105, 106], "where": [16, 30, 41, 42, 43, 44, 45, 46, 47, 48, 158], "whether": [98, 102, 103, 105, 106], "which": [10, 12, 13, 14, 15, 41, 42, 43, 44, 45, 46, 47, 48, 71, 98, 102, 103, 105, 106, 158], "white": 19, "whiten": 87, "whitespac": 165, "whose": [98, 102, 103, 105, 106], "width": [13, 43, 165], "within": 71, "without": [98, 102, 103, 105, 106], "worker_init_fn": 25, "working_dir": [41, 42, 43, 44, 45, 46, 47, 48], "wrapper": [67, 71], "write": 19, "write_double_quot": 165, "write_fold": 165, "write_ind": 165, "write_line_break": 165, "write_liter": 165, "write_plain": 165, "write_single_quot": 165, "write_stream_end": 165, "write_stream_start": 165, "write_tag_direct": 165, "write_version_direct": 165, "x": [10, 12, 13, 14, 15, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 57, 59, 71, 73, 86, 87, 90, 91, 92, 93, 95, 128, 129, 130, 166], "x00": [165, 166], "x07": [165, 166], "x08": [165, 166], "x0b": [165, 166], "x0c": [165, 166], "x1b": [165, 166], "x85": [165, 166], "xa0": [165, 166], "y": [10, 12, 13, 14, 15, 19, 54, 71, 73, 90, 91, 92, 93, 95, 165, 166], "yaml": [19, 41, 42, 43, 44, 45, 46, 47, 48, 73, 165, 166], "yaml_constructor": 166, "yaml_implicit_resolv": [165, 166], "yaml_multi_constructor": 166, "yaml_multi_represent": 165, "yaml_path_resolv": [165, 166], "yaml_represent": 165, "yamlwizard": 19, "ye": [165, 166], "year": 166, "yield": [98, 102, 103, 105, 106], "you": [98, 102, 103, 105, 106, 190], "your": 190, "zero": [98, 102, 103, 105, 106, 158], "zip": 73, "\u03c0": 48, "\ud800\udc00": 166}, "titles": ["cuvis_ai", "cuvis_ai.data", "cuvis_ai.data.BaseDataSet", "cuvis_ai.data.BaseDataSet.BaseDataSet", "cuvis_ai.data.CuvisDataSet", "cuvis_ai.data.LiveCuvisDataLoader", "cuvis_ai.data.NumpyDataSet", "cuvis_ai.data.OutputFormat", "cuvis_ai.data.PublicDataSets", "cuvis_ai.data.cocolabels", "cuvis_ai.data.cocolabels.Annotation", "cuvis_ai.data.cocolabels.COCOData", "cuvis_ai.data.cocolabels.Category", "cuvis_ai.data.cocolabels.Image", "cuvis_ai.data.cocolabels.Info", "cuvis_ai.data.cocolabels.License", "cuvis_ai.data.cocolabels.QueryableList", "cuvis_ai.data.cocolabels.RLE2mask", "cuvis_ai.data.metadata", "cuvis_ai.data.metadata.Metadata", "cuvis_ai.data.metadata.get_meta_from_mesu", "cuvis_ai.data.metadata.get_meta_from_path", "cuvis_ai.data.metadata.get_meta_from_session", "cuvis_ai.data.utils_dataloader", "cuvis_ai.data.utils_dataloader.cuvis_collate", "cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset", "cuvis_ai.deciders", "cuvis_ai.deciders.base_decider", "cuvis_ai.deciders.base_decider.BaseDecider", "cuvis_ai.deciders.binary_decider", "cuvis_ai.deciders.binary_decider.BinaryDecider", "cuvis_ai.deciders.cascaded_decider", "cuvis_ai.deciders.cascaded_decider.Cascaded", "cuvis_ai.deciders.combining_decider", "cuvis_ai.deciders.combining_decider.CombiningDecider", "cuvis_ai.deciders.combining_decider.all_agree", "cuvis_ai.deciders.combining_decider.at_least_n_agree", "cuvis_ai.deciders.multiclass_decider", "cuvis_ai.deciders.multiclass_decider.MultiClassDecider", "cuvis_ai.distance", "cuvis_ai.distance.distance", "cuvis_ai.distance.distance.AbstractDistance", "cuvis_ai.distance.distance.Canberra", "cuvis_ai.distance.distance.ECS", "cuvis_ai.distance.distance.Euclidean", "cuvis_ai.distance.distance.GFC", "cuvis_ai.distance.distance.Manhattan", "cuvis_ai.distance.distance.Minkowski", "cuvis_ai.distance.distance.SpectralAngle", "cuvis_ai.node", "cuvis_ai.node.Consumers", "cuvis_ai.node.Consumers.CubeConsumer", "cuvis_ai.node.Consumers.LabelConsumer", "cuvis_ai.node.base", "cuvis_ai.node.base.BaseSupervised", "cuvis_ai.node.base.BaseTransformation", "cuvis_ai.node.base.BaseUnsupervised", "cuvis_ai.node.base.Preprocessor", "cuvis_ai.node.node", "cuvis_ai.node.node.Node", "cuvis_ai.node.sklearn", "cuvis_ai.node.sklearn.SklearnWrapped", "cuvis_ai.node.skorch", "cuvis_ai.node.skorch.SkorchWrapped", "cuvis_ai.node.torch", "cuvis_ai.node.torchvision", "cuvis_ai.node.wrap", "cuvis_ai.node.wrap.make_node", "cuvis_ai.pipeline", "cuvis_ai.pipeline.executor", "cuvis_ai.pipeline.executor.HummingBirdExecutor", "cuvis_ai.pipeline.executor.MemoryExecutor", "cuvis_ai.pipeline.graph", "cuvis_ai.pipeline.graph.Graph", "cuvis_ai.pipeline.graph.maybe_wrap_node", "cuvis_ai.pipeline.meta_routing", "cuvis_ai.pipeline.meta_routing.get_fit_metadata", "cuvis_ai.pipeline.meta_routing.get_forward_metadata", "cuvis_ai.pipeline.meta_routing.get_requested_metadata", "cuvis_ai.pipeline.meta_routing.get_route", "cuvis_ai.pipeline.meta_routing.traverse", "cuvis_ai.pipeline.validator", "cuvis_ai.pipeline.validator.GraphValidator", "cuvis_ai.pipeline.validator.ShapeValidator", "cuvis_ai.preprocessor", "cuvis_ai.preprocessor.sklearn_wrapped", "cuvis_ai.preprocessor.sklearn_wrapped.NMF", "cuvis_ai.preprocessor.sklearn_wrapped.PCA", "cuvis_ai.supervised", "cuvis_ai.supervised.sklearn_wrapped", "cuvis_ai.supervised.sklearn_wrapped.LDA", "cuvis_ai.supervised.sklearn_wrapped.MLP", "cuvis_ai.supervised.sklearn_wrapped.QDA", "cuvis_ai.supervised.sklearn_wrapped.SVM", "cuvis_ai.supervised.skorch_supervised", "cuvis_ai.supervised.skorch_supervised.SkorchSupervised", "cuvis_ai.test", "cuvis_ai.test.test_numpy_utils", "cuvis_ai.test.test_numpy_utils.TestNumpyUtils", "cuvis_ai.test.test_pipeline_graph", "cuvis_ai.test.test_preprocessor_structural", "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode", "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF", "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA", "cuvis_ai.test.test_unsupervised_structural", "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM", "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans", "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode", "cuvis_ai.tv_transforms", "cuvis_ai.tv_transforms.Bandpass", "cuvis_ai.tv_transforms.Bandpass.call_super_init", "cuvis_ai.tv_transforms.Bandpass.dump_patches", "cuvis_ai.tv_transforms.Bandpass.training", "cuvis_ai.tv_transforms.MultiBandpass", "cuvis_ai.tv_transforms.MultiBandpass.call_super_init", "cuvis_ai.tv_transforms.MultiBandpass.dump_patches", "cuvis_ai.tv_transforms.MultiBandpass.training", "cuvis_ai.tv_transforms.NormalizeStdDev", "cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init", "cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches", "cuvis_ai.tv_transforms.NormalizeStdDev.training", "cuvis_ai.tv_transforms.NormalizeToFloat", "cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init", "cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches", "cuvis_ai.tv_transforms.NormalizeToFloat.training", "cuvis_ai.tv_transforms.WavelengthList", "cuvis_ai.unsupervised", "cuvis_ai.unsupervised.sklearn_wrapped", "cuvis_ai.unsupervised.sklearn_wrapped.GMM", "cuvis_ai.unsupervised.sklearn_wrapped.KMeans", "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift", "cuvis_ai.utils", "cuvis_ai.utils.dependencies", "cuvis_ai.utils.dependencies.get_installed_packages", "cuvis_ai.utils.dependencies.get_installed_packages_str", "cuvis_ai.utils.dict", "cuvis_ai.utils.dict.add_prefix", "cuvis_ai.utils.dict.remove_prefix", "cuvis_ai.utils.dict.remove_prefix_str", "cuvis_ai.utils.filesystem", "cuvis_ai.utils.filesystem.change_working_dir", "cuvis_ai.utils.inspect", "cuvis_ai.utils.inspect.get_imports", "cuvis_ai.utils.inspect.get_members", "cuvis_ai.utils.inspect.get_referenced", "cuvis_ai.utils.inspect.get_source_file", "cuvis_ai.utils.inspect.get_src", "cuvis_ai.utils.nn_config", "cuvis_ai.utils.nn_config.Adam", "cuvis_ai.utils.nn_config.Optimizer", "cuvis_ai.utils.nn_config.SGD", "cuvis_ai.utils.numpy", "cuvis_ai.utils.numpy.binary_mask_to_rle", "cuvis_ai.utils.numpy.check_array_shape", "cuvis_ai.utils.numpy.flatten_batch_and_labels", "cuvis_ai.utils.numpy.flatten_batch_and_spatial", "cuvis_ai.utils.numpy.flatten_labels", "cuvis_ai.utils.numpy.flatten_spatial", "cuvis_ai.utils.numpy.gen_coco_labels", "cuvis_ai.utils.numpy.get_shape_without_batch", "cuvis_ai.utils.numpy.unflatten_batch_and_labels", "cuvis_ai.utils.numpy.unflatten_batch_and_spatial", "cuvis_ai.utils.numpy.unflatten_labels", "cuvis_ai.utils.numpy.unflatten_spatial", "cuvis_ai.utils.serializer", "cuvis_ai.utils.serializer.CuvisYamlDumper", "cuvis_ai.utils.serializer.CuvisYamlLoader", "cuvis_ai.utils.serializer.OldSerializer", "cuvis_ai.utils.serializer.Serializer", "cuvis_ai.utils.serializer.YamlSerializer", "cuvis_ai.utils.serializer.numpy_array_binary_representer", "cuvis_ai.utils.serializer.numpy_array_file_representer", "cuvis_ai.utils.serializer.numpy_array_string_representer", "cuvis_ai.utils.serializer.numpy_arrray_file_constructor", "cuvis_ai.utils.serializer.numpy_arrray_string_constructor", "cuvis_ai.utils.serializer.numpy_float32_constructor", "cuvis_ai.utils.serializer.numpy_float32_representer", "cuvis_ai.utils.serializer.numpy_float64_constructor", "cuvis_ai.utils.serializer.numpy_float64_representer", "cuvis_ai.utils.test", "cuvis_ai.utils.test.get_np_dummy_data", "cuvis_ai.utils.torch", "cuvis_ai.utils.torch.InputDimension", "cuvis_ai.utils.torch.extract_state_dict", "cuvis_ai.utils.torch.get_output_shape", "cuvis_ai.utils.torch.guess_input_dimensionalty", "cuvis_ai.utils.torch.guess_state_dict_format", "cuvis_ai.utils.visualize", "cuvis_ai.utils.visualize.visualize_features", "cuvis_ai.utils.visualize.visualize_image", "Welcome to Cuvis AI\u2019s documentation!", "Concepts", "Installation", "Quickstart", "Tutorials"], "titleterms": {"": 190, "The": 191, "abstractdist": 41, "adam": 148, "add_prefix": 136, "ai": 190, "algorithm": 191, "all_agre": 35, "annot": 10, "api": 190, "at_least_n_agre": 36, "bandpass": [109, 110, 111, 112], "base": [53, 54, 55, 56, 57], "base_decid": [27, 28], "basedataset": [2, 3], "basedecid": 28, "basesupervis": 54, "basetransform": 55, "baseunsupervis": 56, "binary_decid": [29, 30], "binary_mask_to_rl": 152, "binarydecid": 30, "call_super_init": [110, 114, 118, 122], "canberra": 42, "cascad": 32, "cascaded_decid": [31, 32], "categori": 12, "change_working_dir": 140, "check_array_shap": 153, "cocodata": 11, "cocolabel": [9, 10, 11, 12, 13, 14, 15, 16, 17], "com": 192, "combining_decid": [33, 34, 35, 36], "combiningdecid": 34, "concept": 191, "consum": [50, 51, 52], "cubeconsum": 51, "cuvi": 190, "cuvis_ai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "cuvis_col": 24, "cuvisdataset": 4, "cuvisyamldump": 165, "cuvisyamlload": 166, "data": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "decid": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 191], "depend": [132, 133, 134], "dict": [135, 136, 137, 138], "distanc": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 191], "document": 190, "dump_patch": [111, 115, 119, 123], "ec": 43, "entri": 19, "euclidean": 44, "executor": [69, 70, 71], "extract_state_dict": 183, "filesystem": [139, 140], "flatten_batch_and_label": 154, "flatten_batch_and_spati": 155, "flatten_label": 156, "flatten_spati": 157, "gen_coco_label": 158, "get_dataloader_from_dataset": 25, "get_fit_metadata": 76, "get_forward_metadata": 77, "get_import": 142, "get_installed_packag": 133, "get_installed_packages_str": 134, "get_memb": 143, "get_meta_from_mesu": 20, "get_meta_from_path": 21, "get_meta_from_sess": 22, "get_np_dummy_data": 180, "get_output_shap": 184, "get_referenc": 144, "get_requested_metadata": 78, "get_rout": 79, "get_shape_without_batch": 159, "get_source_fil": 145, "get_src": 146, "gfc": 45, "gmm": 128, "graph": [72, 73, 74], "graphvalid": 82, "guess_input_dimensionalti": 185, "guess_state_dict_format": 186, "guid": 190, "hummingbirdexecutor": 70, "imag": 13, "info": 14, "inputdimens": 182, "inspect": [141, 142, 143, 144, 145, 146], "instal": 192, "introduct": 190, "kmean": 129, "labelconsum": 52, "lda": 90, "licens": 15, "livecuvisdataload": 5, "make_nod": 67, "manhattan": 46, "maybe_wrap_nod": 74, "meanshift": 130, "memoryexecutor": 71, "meta_rout": [75, 76, 77, 78, 79, 80], "metadata": [18, 19, 20, 21, 22], "minkowski": 47, "mlp": 91, "multibandpass": [113, 114, 115, 116], "multiclass_decid": [37, 38], "multiclassdecid": 38, "nmf": 86, "nn_config": [147, 148, 149, 150], "node": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 191], "normalizestddev": [117, 118, 119, 120], "normalizetofloat": [121, 122, 123, 124], "numpi": [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "numpy_array_binary_represent": 170, "numpy_array_file_represent": 171, "numpy_array_string_represent": 172, "numpy_arrray_file_constructor": 173, "numpy_arrray_string_constructor": 174, "numpy_float32_constructor": 175, "numpy_float32_represent": 176, "numpy_float64_constructor": 177, "numpy_float64_represent": 178, "numpydataset": 6, "oldseri": 167, "optim": 149, "outputformat": 7, "paramat": 30, "pca": 87, "pip": 192, "pipelin": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 191], "possibl": 19, "preprocessor": [57, 84, 85, 86, 87, 191], "publicdataset": 8, "qda": 92, "queryablelist": 16, "quickstart": 193, "refer": 190, "remove_prefix": 137, "remove_prefix_str": 138, "rle2mask": 17, "serial": [164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178], "sgd": 150, "shapevalid": 83, "sklearn": [60, 61], "sklearn_wrap": [85, 86, 87, 89, 90, 91, 92, 93, 127, 128, 129, 130], "sklearnwrap": 61, "skorch": [62, 63], "skorch_supervis": [94, 95], "skorchsupervis": 95, "skorchwrap": 63, "soon": 192, "spectralangl": 48, "supervis": [88, 89, 90, 91, 92, 93, 94, 95, 191], "svm": 93, "test": [96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 179, 180], "test_numpy_util": [97, 98], "test_pipeline_graph": 99, "test_preprocessor_structur": [100, 101, 102, 103], "test_unsupervised_structur": [104, 105, 106, 107], "testnumpyutil": 98, "testpreprocessednod": 101, "testunsupervisedgmm": 105, "testunsupervisedkmean": 106, "testunsupervisednmf": 102, "testunsupervisednod": 107, "testunsupervisedpca": 103, "torch": [64, 181, 182, 183, 184, 185, 186], "torchvis": 65, "train": [112, 116, 120, 124], "transform": 191, "travers": 80, "tree": 191, "tutori": 194, "tv_transform": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "unflatten_batch_and_label": 160, "unflatten_batch_and_spati": 161, "unflatten_label": 162, "unflatten_spati": 163, "unsupervis": [126, 127, 128, 129, 130, 191], "user": 190, "util": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "utils_dataload": [23, 24, 25], "valid": [81, 82, 83], "visual": [187, 188, 189], "visualize_featur": 188, "visualize_imag": 189, "wavelengthlist": 125, "welcom": 190, "wrap": [66, 67], "yamlseri": 169}})
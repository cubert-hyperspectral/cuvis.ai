Search.setIndex({"alltitles": {"API Reference": [[182, "api-reference"]], "Concepts": [[183, null]], "Decider Nodes": [[183, "decider-nodes"]], "Distance Nodes": [[183, "distance-nodes"]], "Installation": [[184, null]], "Introduction": [[182, "introduction"]], "Paramaters": [[30, "paramaters"]], "Possible entries": [[19, "possible-entries"]], "Preprocessor Nodes": [[183, "preprocessor-nodes"]], "Quickstart": [[185, null]], "Supervised Nodes": [[183, "supervised-nodes"]], "The Pipeline or Algorithm Tree": [[183, "the-pipeline-or-algorithm-tree"]], "Transformation Nodes": [[183, "transformation-nodes"]], "Tutorials": [[186, null]], "Unsupervised Nodes": [[183, "unsupervised-nodes"]], "Users\u2019s Guide": [[182, "users-s-guide"]], "Welcome to Cuvis AI\u2019s documentation!": [[182, null]], "cuvis_ai": [[0, null]], "cuvis_ai.data": [[1, null]], "cuvis_ai.data.BaseDataSet": [[2, null]], "cuvis_ai.data.BaseDataSet.BaseDataSet": [[3, null]], "cuvis_ai.data.CuvisDataSet": [[4, null]], "cuvis_ai.data.LiveCuvisDataLoader": [[5, null]], "cuvis_ai.data.NumpyDataSet": [[6, null]], "cuvis_ai.data.OutputFormat": [[7, null]], "cuvis_ai.data.PublicDataSets": [[8, null]], "cuvis_ai.data.cocolabels": [[9, null]], "cuvis_ai.data.cocolabels.Annotation": [[10, null]], "cuvis_ai.data.cocolabels.COCOData": [[11, null]], "cuvis_ai.data.cocolabels.Category": [[12, null]], "cuvis_ai.data.cocolabels.Image": [[13, null]], "cuvis_ai.data.cocolabels.Info": [[14, null]], "cuvis_ai.data.cocolabels.License": [[15, null]], "cuvis_ai.data.cocolabels.QueryableList": [[16, null]], "cuvis_ai.data.cocolabels.RLE2mask": [[17, null]], "cuvis_ai.data.metadata": [[18, null]], "cuvis_ai.data.metadata.Metadata": [[19, null]], "cuvis_ai.data.metadata.get_meta_from_mesu": [[20, null]], "cuvis_ai.data.metadata.get_meta_from_path": [[21, null]], "cuvis_ai.data.metadata.get_meta_from_session": [[22, null]], "cuvis_ai.data.utils_dataloader": [[23, null]], "cuvis_ai.data.utils_dataloader.cuvis_collate": [[24, null]], "cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset": [[25, null]], "cuvis_ai.deciders": [[26, null]], "cuvis_ai.deciders.base_decider": [[27, null]], "cuvis_ai.deciders.base_decider.BaseDecider": [[28, null]], "cuvis_ai.deciders.binary_decider": [[29, null]], "cuvis_ai.deciders.binary_decider.BinaryDecider": [[30, null]], "cuvis_ai.deciders.cascaded_decider": [[31, null]], "cuvis_ai.deciders.cascaded_decider.Cascaded": [[32, null]], "cuvis_ai.deciders.combining_decider": [[33, null]], "cuvis_ai.deciders.combining_decider.CombiningDecider": [[34, null]], "cuvis_ai.deciders.combining_decider.all_agree": [[35, null]], "cuvis_ai.deciders.combining_decider.at_least_n_agree": [[36, null]], "cuvis_ai.deciders.multiclass_decider": [[37, null]], "cuvis_ai.deciders.multiclass_decider.MultiClassDecider": [[38, null]], "cuvis_ai.distance": [[39, null]], "cuvis_ai.distance.distance": [[40, null]], "cuvis_ai.distance.distance.AbstractDistance": [[41, null]], "cuvis_ai.distance.distance.Canberra": [[42, null]], "cuvis_ai.distance.distance.ECS": [[43, null]], "cuvis_ai.distance.distance.Euclidean": [[44, null]], "cuvis_ai.distance.distance.GFC": [[45, null]], "cuvis_ai.distance.distance.Manhattan": [[46, null]], "cuvis_ai.distance.distance.Minkowski": [[47, null]], "cuvis_ai.distance.distance.SpectralAngle": [[48, null]], "cuvis_ai.node": [[49, null]], "cuvis_ai.node.Consumers": [[50, null]], "cuvis_ai.node.Consumers.CubeConsumer": [[51, null]], "cuvis_ai.node.Consumers.LabelConsumer": [[52, null]], "cuvis_ai.node.base": [[53, null]], "cuvis_ai.node.base.BaseSupervised": [[54, null]], "cuvis_ai.node.base.BaseTransformation": [[55, null]], "cuvis_ai.node.base.BaseUnsupervised": [[56, null]], "cuvis_ai.node.base.Preprocessor": [[57, null]], "cuvis_ai.node.node": [[58, null]], "cuvis_ai.node.node.Node": [[59, null]], "cuvis_ai.node.sklearn": [[60, null]], "cuvis_ai.node.sklearn.SklearnWrapped": [[61, null]], "cuvis_ai.node.skorch": [[62, null]], "cuvis_ai.node.skorch.SkorchWrapped": [[63, null]], "cuvis_ai.node.torch": [[64, null]], "cuvis_ai.node.torchvision": [[65, null]], "cuvis_ai.node.wrap": [[66, null]], "cuvis_ai.node.wrap.make_node": [[67, null]], "cuvis_ai.pipeline": [[68, null]], "cuvis_ai.pipeline.executor": [[69, null]], "cuvis_ai.pipeline.executor.HummingBirdExecutor": [[70, null]], "cuvis_ai.pipeline.executor.MemoryExecutor": [[71, null]], "cuvis_ai.pipeline.graph": [[72, null]], "cuvis_ai.pipeline.graph.Graph": [[73, null]], "cuvis_ai.pipeline.meta_routing": [[74, null]], "cuvis_ai.pipeline.meta_routing.get_fit_metadata": [[75, null]], "cuvis_ai.pipeline.meta_routing.get_forward_metadata": [[76, null]], "cuvis_ai.pipeline.meta_routing.get_requested_metadata": [[77, null]], "cuvis_ai.pipeline.meta_routing.get_route": [[78, null]], "cuvis_ai.pipeline.meta_routing.traverse": [[79, null]], "cuvis_ai.pipeline.validator": [[80, null]], "cuvis_ai.pipeline.validator.GraphValidator": [[81, null]], "cuvis_ai.pipeline.validator.ShapeValidator": [[82, null]], "cuvis_ai.preprocessor": [[83, null]], "cuvis_ai.preprocessor.sklearn_wrapped": [[84, null]], "cuvis_ai.preprocessor.sklearn_wrapped.NMF": [[85, null]], "cuvis_ai.preprocessor.sklearn_wrapped.PCA": [[86, null]], "cuvis_ai.supervised": [[87, null]], "cuvis_ai.supervised.sklearn_wrapped": [[88, null]], "cuvis_ai.supervised.sklearn_wrapped.LDA": [[89, null]], "cuvis_ai.supervised.sklearn_wrapped.MLP": [[90, null]], "cuvis_ai.supervised.sklearn_wrapped.QDA": [[91, null]], "cuvis_ai.supervised.sklearn_wrapped.SVM": [[92, null]], "cuvis_ai.supervised.skorch_supervised": [[93, null]], "cuvis_ai.supervised.skorch_supervised.SkorchSupervised": [[94, null]], "cuvis_ai.test": [[95, null]], "cuvis_ai.test.test_numpy_utils": [[96, null]], "cuvis_ai.test.test_numpy_utils.TestNumpyUtils": [[97, null]], "cuvis_ai.test.test_pipeline_graph": [[98, null]], "cuvis_ai.test.test_preprocessor_structural": [[99, null]], "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode": [[100, null]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF": [[101, null]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA": [[102, null]], "cuvis_ai.test.test_unsupervised_structural": [[103, null]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM": [[104, null]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans": [[105, null]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode": [[106, null]], "cuvis_ai.tv_transforms": [[107, null]], "cuvis_ai.tv_transforms.Bandpass": [[108, null]], "cuvis_ai.tv_transforms.Bandpass.call_super_init": [[109, null]], "cuvis_ai.tv_transforms.Bandpass.dump_patches": [[110, null]], "cuvis_ai.tv_transforms.Bandpass.training": [[111, null]], "cuvis_ai.tv_transforms.MultiBandpass": [[112, null]], "cuvis_ai.tv_transforms.MultiBandpass.call_super_init": [[113, null]], "cuvis_ai.tv_transforms.MultiBandpass.dump_patches": [[114, null]], "cuvis_ai.tv_transforms.MultiBandpass.training": [[115, null]], "cuvis_ai.tv_transforms.NormalizeStdDev": [[116, null]], "cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init": [[117, null]], "cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches": [[118, null]], "cuvis_ai.tv_transforms.NormalizeStdDev.training": [[119, null]], "cuvis_ai.tv_transforms.NormalizeToFloat": [[120, null]], "cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init": [[121, null]], "cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches": [[122, null]], "cuvis_ai.tv_transforms.NormalizeToFloat.training": [[123, null]], "cuvis_ai.tv_transforms.WavelengthList": [[124, null]], "cuvis_ai.unsupervised": [[125, null]], "cuvis_ai.unsupervised.sklearn_wrapped": [[126, null]], "cuvis_ai.unsupervised.sklearn_wrapped.GMM": [[127, null]], "cuvis_ai.unsupervised.sklearn_wrapped.KMeans": [[128, null]], "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift": [[129, null]], "cuvis_ai.utils": [[130, null]], "cuvis_ai.utils.dependencies": [[131, null]], "cuvis_ai.utils.dependencies.get_installed_packages": [[132, null]], "cuvis_ai.utils.dependencies.get_installed_packages_str": [[133, null]], "cuvis_ai.utils.dict": [[134, null]], "cuvis_ai.utils.dict.remove_prefix": [[135, null]], "cuvis_ai.utils.dict.remove_prefix_str": [[136, null]], "cuvis_ai.utils.filesystem": [[137, null]], "cuvis_ai.utils.filesystem.change_working_dir": [[138, null]], "cuvis_ai.utils.nn_config": [[139, null]], "cuvis_ai.utils.nn_config.Adam": [[140, null]], "cuvis_ai.utils.nn_config.Optimizer": [[141, null]], "cuvis_ai.utils.nn_config.SGD": [[142, null]], "cuvis_ai.utils.numpy": [[143, null]], "cuvis_ai.utils.numpy.binary_mask_to_rle": [[144, null]], "cuvis_ai.utils.numpy.check_array_shape": [[145, null]], "cuvis_ai.utils.numpy.flatten_batch_and_labels": [[146, null]], "cuvis_ai.utils.numpy.flatten_batch_and_spatial": [[147, null]], "cuvis_ai.utils.numpy.flatten_labels": [[148, null]], "cuvis_ai.utils.numpy.flatten_spatial": [[149, null]], "cuvis_ai.utils.numpy.gen_coco_labels": [[150, null]], "cuvis_ai.utils.numpy.get_shape_without_batch": [[151, null]], "cuvis_ai.utils.numpy.unflatten_batch_and_labels": [[152, null]], "cuvis_ai.utils.numpy.unflatten_batch_and_spatial": [[153, null]], "cuvis_ai.utils.numpy.unflatten_labels": [[154, null]], "cuvis_ai.utils.numpy.unflatten_spatial": [[155, null]], "cuvis_ai.utils.serializer": [[156, null]], "cuvis_ai.utils.serializer.CuvisYamlDumper": [[157, null]], "cuvis_ai.utils.serializer.CuvisYamlLoader": [[158, null]], "cuvis_ai.utils.serializer.OldSerializer": [[159, null]], "cuvis_ai.utils.serializer.Serializer": [[160, null]], "cuvis_ai.utils.serializer.YamlSerializer": [[161, null]], "cuvis_ai.utils.serializer.numpy_array_binary_representer": [[162, null]], "cuvis_ai.utils.serializer.numpy_array_file_representer": [[163, null]], "cuvis_ai.utils.serializer.numpy_array_string_representer": [[164, null]], "cuvis_ai.utils.serializer.numpy_arrray_file_constructor": [[165, null]], "cuvis_ai.utils.serializer.numpy_arrray_string_constructor": [[166, null]], "cuvis_ai.utils.serializer.numpy_float32_constructor": [[167, null]], "cuvis_ai.utils.serializer.numpy_float32_representer": [[168, null]], "cuvis_ai.utils.serializer.numpy_float64_constructor": [[169, null]], "cuvis_ai.utils.serializer.numpy_float64_representer": [[170, null]], "cuvis_ai.utils.test": [[171, null]], "cuvis_ai.utils.test.get_np_dummy_data": [[172, null]], "cuvis_ai.utils.torch": [[173, null]], "cuvis_ai.utils.torch.InputDimension": [[174, null]], "cuvis_ai.utils.torch.extract_state_dict": [[175, null]], "cuvis_ai.utils.torch.get_output_shape": [[176, null]], "cuvis_ai.utils.torch.guess_input_dimensionalty": [[177, null]], "cuvis_ai.utils.torch.guess_state_dict_format": [[178, null]], "cuvis_ai.utils.visualize": [[179, null]], "cuvis_ai.utils.visualize.visualize_features": [[180, null]], "cuvis_ai.utils.visualize.visualize_image": [[181, null]], "pip installation (Comming Soon)": [[184, "pip-installation-comming-soon"]]}, "docnames": ["_autosummary/cuvis_ai", "_autosummary/cuvis_ai.data", "_autosummary/cuvis_ai.data.BaseDataSet", "_autosummary/cuvis_ai.data.BaseDataSet.BaseDataSet", "_autosummary/cuvis_ai.data.CuvisDataSet", "_autosummary/cuvis_ai.data.LiveCuvisDataLoader", "_autosummary/cuvis_ai.data.NumpyDataSet", "_autosummary/cuvis_ai.data.OutputFormat", "_autosummary/cuvis_ai.data.PublicDataSets", "_autosummary/cuvis_ai.data.cocolabels", "_autosummary/cuvis_ai.data.cocolabels.Annotation", "_autosummary/cuvis_ai.data.cocolabels.COCOData", "_autosummary/cuvis_ai.data.cocolabels.Category", "_autosummary/cuvis_ai.data.cocolabels.Image", "_autosummary/cuvis_ai.data.cocolabels.Info", "_autosummary/cuvis_ai.data.cocolabels.License", "_autosummary/cuvis_ai.data.cocolabels.QueryableList", "_autosummary/cuvis_ai.data.cocolabels.RLE2mask", "_autosummary/cuvis_ai.data.metadata", "_autosummary/cuvis_ai.data.metadata.Metadata", "_autosummary/cuvis_ai.data.metadata.get_meta_from_mesu", "_autosummary/cuvis_ai.data.metadata.get_meta_from_path", "_autosummary/cuvis_ai.data.metadata.get_meta_from_session", "_autosummary/cuvis_ai.data.utils_dataloader", "_autosummary/cuvis_ai.data.utils_dataloader.cuvis_collate", "_autosummary/cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset", "_autosummary/cuvis_ai.deciders", "_autosummary/cuvis_ai.deciders.base_decider", "_autosummary/cuvis_ai.deciders.base_decider.BaseDecider", "_autosummary/cuvis_ai.deciders.binary_decider", "_autosummary/cuvis_ai.deciders.binary_decider.BinaryDecider", "_autosummary/cuvis_ai.deciders.cascaded_decider", "_autosummary/cuvis_ai.deciders.cascaded_decider.Cascaded", "_autosummary/cuvis_ai.deciders.combining_decider", "_autosummary/cuvis_ai.deciders.combining_decider.CombiningDecider", "_autosummary/cuvis_ai.deciders.combining_decider.all_agree", "_autosummary/cuvis_ai.deciders.combining_decider.at_least_n_agree", "_autosummary/cuvis_ai.deciders.multiclass_decider", "_autosummary/cuvis_ai.deciders.multiclass_decider.MultiClassDecider", "_autosummary/cuvis_ai.distance", "_autosummary/cuvis_ai.distance.distance", "_autosummary/cuvis_ai.distance.distance.AbstractDistance", "_autosummary/cuvis_ai.distance.distance.Canberra", "_autosummary/cuvis_ai.distance.distance.ECS", "_autosummary/cuvis_ai.distance.distance.Euclidean", "_autosummary/cuvis_ai.distance.distance.GFC", "_autosummary/cuvis_ai.distance.distance.Manhattan", "_autosummary/cuvis_ai.distance.distance.Minkowski", "_autosummary/cuvis_ai.distance.distance.SpectralAngle", "_autosummary/cuvis_ai.node", "_autosummary/cuvis_ai.node.Consumers", "_autosummary/cuvis_ai.node.Consumers.CubeConsumer", "_autosummary/cuvis_ai.node.Consumers.LabelConsumer", "_autosummary/cuvis_ai.node.base", "_autosummary/cuvis_ai.node.base.BaseSupervised", "_autosummary/cuvis_ai.node.base.BaseTransformation", "_autosummary/cuvis_ai.node.base.BaseUnsupervised", "_autosummary/cuvis_ai.node.base.Preprocessor", "_autosummary/cuvis_ai.node.node", "_autosummary/cuvis_ai.node.node.Node", "_autosummary/cuvis_ai.node.sklearn", "_autosummary/cuvis_ai.node.sklearn.SklearnWrapped", "_autosummary/cuvis_ai.node.skorch", "_autosummary/cuvis_ai.node.skorch.SkorchWrapped", "_autosummary/cuvis_ai.node.torch", "_autosummary/cuvis_ai.node.torchvision", "_autosummary/cuvis_ai.node.wrap", "_autosummary/cuvis_ai.node.wrap.make_node", "_autosummary/cuvis_ai.pipeline", "_autosummary/cuvis_ai.pipeline.executor", "_autosummary/cuvis_ai.pipeline.executor.HummingBirdExecutor", "_autosummary/cuvis_ai.pipeline.executor.MemoryExecutor", "_autosummary/cuvis_ai.pipeline.graph", "_autosummary/cuvis_ai.pipeline.graph.Graph", "_autosummary/cuvis_ai.pipeline.meta_routing", "_autosummary/cuvis_ai.pipeline.meta_routing.get_fit_metadata", "_autosummary/cuvis_ai.pipeline.meta_routing.get_forward_metadata", "_autosummary/cuvis_ai.pipeline.meta_routing.get_requested_metadata", "_autosummary/cuvis_ai.pipeline.meta_routing.get_route", "_autosummary/cuvis_ai.pipeline.meta_routing.traverse", "_autosummary/cuvis_ai.pipeline.validator", "_autosummary/cuvis_ai.pipeline.validator.GraphValidator", "_autosummary/cuvis_ai.pipeline.validator.ShapeValidator", "_autosummary/cuvis_ai.preprocessor", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.NMF", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.PCA", "_autosummary/cuvis_ai.supervised", "_autosummary/cuvis_ai.supervised.sklearn_wrapped", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.LDA", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.MLP", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.QDA", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.SVM", "_autosummary/cuvis_ai.supervised.skorch_supervised", "_autosummary/cuvis_ai.supervised.skorch_supervised.SkorchSupervised", "_autosummary/cuvis_ai.test", "_autosummary/cuvis_ai.test.test_numpy_utils", "_autosummary/cuvis_ai.test.test_numpy_utils.TestNumpyUtils", "_autosummary/cuvis_ai.test.test_pipeline_graph", "_autosummary/cuvis_ai.test.test_preprocessor_structural", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA", "_autosummary/cuvis_ai.test.test_unsupervised_structural", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode", "_autosummary/cuvis_ai.tv_transforms", "_autosummary/cuvis_ai.tv_transforms.Bandpass", "_autosummary/cuvis_ai.tv_transforms.Bandpass.call_super_init", "_autosummary/cuvis_ai.tv_transforms.Bandpass.dump_patches", "_autosummary/cuvis_ai.tv_transforms.Bandpass.training", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.call_super_init", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.dump_patches", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.training", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.training", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.training", "_autosummary/cuvis_ai.tv_transforms.WavelengthList", "_autosummary/cuvis_ai.unsupervised", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.GMM", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.KMeans", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.MeanShift", "_autosummary/cuvis_ai.utils", "_autosummary/cuvis_ai.utils.dependencies", "_autosummary/cuvis_ai.utils.dependencies.get_installed_packages", "_autosummary/cuvis_ai.utils.dependencies.get_installed_packages_str", "_autosummary/cuvis_ai.utils.dict", "_autosummary/cuvis_ai.utils.dict.remove_prefix", "_autosummary/cuvis_ai.utils.dict.remove_prefix_str", "_autosummary/cuvis_ai.utils.filesystem", "_autosummary/cuvis_ai.utils.filesystem.change_working_dir", "_autosummary/cuvis_ai.utils.nn_config", "_autosummary/cuvis_ai.utils.nn_config.Adam", "_autosummary/cuvis_ai.utils.nn_config.Optimizer", "_autosummary/cuvis_ai.utils.nn_config.SGD", "_autosummary/cuvis_ai.utils.numpy", "_autosummary/cuvis_ai.utils.numpy.binary_mask_to_rle", "_autosummary/cuvis_ai.utils.numpy.check_array_shape", "_autosummary/cuvis_ai.utils.numpy.flatten_batch_and_labels", "_autosummary/cuvis_ai.utils.numpy.flatten_batch_and_spatial", "_autosummary/cuvis_ai.utils.numpy.flatten_labels", "_autosummary/cuvis_ai.utils.numpy.flatten_spatial", "_autosummary/cuvis_ai.utils.numpy.gen_coco_labels", "_autosummary/cuvis_ai.utils.numpy.get_shape_without_batch", "_autosummary/cuvis_ai.utils.numpy.unflatten_batch_and_labels", "_autosummary/cuvis_ai.utils.numpy.unflatten_batch_and_spatial", "_autosummary/cuvis_ai.utils.numpy.unflatten_labels", "_autosummary/cuvis_ai.utils.numpy.unflatten_spatial", "_autosummary/cuvis_ai.utils.serializer", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlDumper", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlLoader", "_autosummary/cuvis_ai.utils.serializer.OldSerializer", "_autosummary/cuvis_ai.utils.serializer.Serializer", "_autosummary/cuvis_ai.utils.serializer.YamlSerializer", "_autosummary/cuvis_ai.utils.serializer.numpy_array_binary_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_array_file_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_array_string_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_file_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_string_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_float64_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_float64_representer", "_autosummary/cuvis_ai.utils.test", "_autosummary/cuvis_ai.utils.test.get_np_dummy_data", "_autosummary/cuvis_ai.utils.torch", "_autosummary/cuvis_ai.utils.torch.InputDimension", "_autosummary/cuvis_ai.utils.torch.extract_state_dict", "_autosummary/cuvis_ai.utils.torch.get_output_shape", "_autosummary/cuvis_ai.utils.torch.guess_input_dimensionalty", "_autosummary/cuvis_ai.utils.torch.guess_state_dict_format", "_autosummary/cuvis_ai.utils.visualize", "_autosummary/cuvis_ai.utils.visualize.visualize_features", "_autosummary/cuvis_ai.utils.visualize.visualize_image", "index", "user/concepts", "user/installation", "user/quickstart", "user/tutorials"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["_autosummary/cuvis_ai.rst", "_autosummary/cuvis_ai.data.rst", "_autosummary/cuvis_ai.data.BaseDataSet.rst", "_autosummary/cuvis_ai.data.BaseDataSet.BaseDataSet.rst", "_autosummary/cuvis_ai.data.CuvisDataSet.rst", "_autosummary/cuvis_ai.data.LiveCuvisDataLoader.rst", "_autosummary/cuvis_ai.data.NumpyDataSet.rst", "_autosummary/cuvis_ai.data.OutputFormat.rst", "_autosummary/cuvis_ai.data.PublicDataSets.rst", "_autosummary/cuvis_ai.data.cocolabels.rst", "_autosummary/cuvis_ai.data.cocolabels.Annotation.rst", "_autosummary/cuvis_ai.data.cocolabels.COCOData.rst", "_autosummary/cuvis_ai.data.cocolabels.Category.rst", "_autosummary/cuvis_ai.data.cocolabels.Image.rst", "_autosummary/cuvis_ai.data.cocolabels.Info.rst", "_autosummary/cuvis_ai.data.cocolabels.License.rst", "_autosummary/cuvis_ai.data.cocolabels.QueryableList.rst", "_autosummary/cuvis_ai.data.cocolabels.RLE2mask.rst", "_autosummary/cuvis_ai.data.metadata.rst", "_autosummary/cuvis_ai.data.metadata.Metadata.rst", "_autosummary/cuvis_ai.data.metadata.get_meta_from_mesu.rst", "_autosummary/cuvis_ai.data.metadata.get_meta_from_path.rst", "_autosummary/cuvis_ai.data.metadata.get_meta_from_session.rst", "_autosummary/cuvis_ai.data.utils_dataloader.rst", "_autosummary/cuvis_ai.data.utils_dataloader.cuvis_collate.rst", "_autosummary/cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset.rst", "_autosummary/cuvis_ai.deciders.rst", "_autosummary/cuvis_ai.deciders.base_decider.rst", "_autosummary/cuvis_ai.deciders.base_decider.BaseDecider.rst", "_autosummary/cuvis_ai.deciders.binary_decider.rst", "_autosummary/cuvis_ai.deciders.binary_decider.BinaryDecider.rst", "_autosummary/cuvis_ai.deciders.cascaded_decider.rst", "_autosummary/cuvis_ai.deciders.cascaded_decider.Cascaded.rst", "_autosummary/cuvis_ai.deciders.combining_decider.rst", "_autosummary/cuvis_ai.deciders.combining_decider.CombiningDecider.rst", "_autosummary/cuvis_ai.deciders.combining_decider.all_agree.rst", "_autosummary/cuvis_ai.deciders.combining_decider.at_least_n_agree.rst", "_autosummary/cuvis_ai.deciders.multiclass_decider.rst", "_autosummary/cuvis_ai.deciders.multiclass_decider.MultiClassDecider.rst", "_autosummary/cuvis_ai.distance.rst", "_autosummary/cuvis_ai.distance.distance.rst", "_autosummary/cuvis_ai.distance.distance.AbstractDistance.rst", "_autosummary/cuvis_ai.distance.distance.Canberra.rst", "_autosummary/cuvis_ai.distance.distance.ECS.rst", "_autosummary/cuvis_ai.distance.distance.Euclidean.rst", "_autosummary/cuvis_ai.distance.distance.GFC.rst", "_autosummary/cuvis_ai.distance.distance.Manhattan.rst", "_autosummary/cuvis_ai.distance.distance.Minkowski.rst", "_autosummary/cuvis_ai.distance.distance.SpectralAngle.rst", "_autosummary/cuvis_ai.node.rst", "_autosummary/cuvis_ai.node.Consumers.rst", "_autosummary/cuvis_ai.node.Consumers.CubeConsumer.rst", "_autosummary/cuvis_ai.node.Consumers.LabelConsumer.rst", "_autosummary/cuvis_ai.node.base.rst", "_autosummary/cuvis_ai.node.base.BaseSupervised.rst", "_autosummary/cuvis_ai.node.base.BaseTransformation.rst", "_autosummary/cuvis_ai.node.base.BaseUnsupervised.rst", "_autosummary/cuvis_ai.node.base.Preprocessor.rst", "_autosummary/cuvis_ai.node.node.rst", "_autosummary/cuvis_ai.node.node.Node.rst", "_autosummary/cuvis_ai.node.sklearn.rst", "_autosummary/cuvis_ai.node.sklearn.SklearnWrapped.rst", "_autosummary/cuvis_ai.node.skorch.rst", "_autosummary/cuvis_ai.node.skorch.SkorchWrapped.rst", "_autosummary/cuvis_ai.node.torch.rst", "_autosummary/cuvis_ai.node.torchvision.rst", "_autosummary/cuvis_ai.node.wrap.rst", "_autosummary/cuvis_ai.node.wrap.make_node.rst", "_autosummary/cuvis_ai.pipeline.rst", "_autosummary/cuvis_ai.pipeline.executor.rst", "_autosummary/cuvis_ai.pipeline.executor.HummingBirdExecutor.rst", "_autosummary/cuvis_ai.pipeline.executor.MemoryExecutor.rst", "_autosummary/cuvis_ai.pipeline.graph.rst", "_autosummary/cuvis_ai.pipeline.graph.Graph.rst", "_autosummary/cuvis_ai.pipeline.meta_routing.rst", "_autosummary/cuvis_ai.pipeline.meta_routing.get_fit_metadata.rst", "_autosummary/cuvis_ai.pipeline.meta_routing.get_forward_metadata.rst", "_autosummary/cuvis_ai.pipeline.meta_routing.get_requested_metadata.rst", "_autosummary/cuvis_ai.pipeline.meta_routing.get_route.rst", "_autosummary/cuvis_ai.pipeline.meta_routing.traverse.rst", "_autosummary/cuvis_ai.pipeline.validator.rst", "_autosummary/cuvis_ai.pipeline.validator.GraphValidator.rst", "_autosummary/cuvis_ai.pipeline.validator.ShapeValidator.rst", "_autosummary/cuvis_ai.preprocessor.rst", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.rst", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.NMF.rst", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.PCA.rst", "_autosummary/cuvis_ai.supervised.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.LDA.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.MLP.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.QDA.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.SVM.rst", "_autosummary/cuvis_ai.supervised.skorch_supervised.rst", "_autosummary/cuvis_ai.supervised.skorch_supervised.SkorchSupervised.rst", "_autosummary/cuvis_ai.test.rst", "_autosummary/cuvis_ai.test.test_numpy_utils.rst", "_autosummary/cuvis_ai.test.test_numpy_utils.TestNumpyUtils.rst", "_autosummary/cuvis_ai.test.test_pipeline_graph.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.rst", "_autosummary/cuvis_ai.tv_transforms.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.training.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.training.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.training.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.training.rst", "_autosummary/cuvis_ai.tv_transforms.WavelengthList.rst", "_autosummary/cuvis_ai.unsupervised.rst", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.rst", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.GMM.rst", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.KMeans.rst", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.rst", "_autosummary/cuvis_ai.utils.rst", "_autosummary/cuvis_ai.utils.dependencies.rst", "_autosummary/cuvis_ai.utils.dependencies.get_installed_packages.rst", "_autosummary/cuvis_ai.utils.dependencies.get_installed_packages_str.rst", "_autosummary/cuvis_ai.utils.dict.rst", "_autosummary/cuvis_ai.utils.dict.remove_prefix.rst", "_autosummary/cuvis_ai.utils.dict.remove_prefix_str.rst", "_autosummary/cuvis_ai.utils.filesystem.rst", "_autosummary/cuvis_ai.utils.filesystem.change_working_dir.rst", "_autosummary/cuvis_ai.utils.nn_config.rst", "_autosummary/cuvis_ai.utils.nn_config.Adam.rst", "_autosummary/cuvis_ai.utils.nn_config.Optimizer.rst", "_autosummary/cuvis_ai.utils.nn_config.SGD.rst", "_autosummary/cuvis_ai.utils.numpy.rst", "_autosummary/cuvis_ai.utils.numpy.binary_mask_to_rle.rst", "_autosummary/cuvis_ai.utils.numpy.check_array_shape.rst", "_autosummary/cuvis_ai.utils.numpy.flatten_batch_and_labels.rst", "_autosummary/cuvis_ai.utils.numpy.flatten_batch_and_spatial.rst", "_autosummary/cuvis_ai.utils.numpy.flatten_labels.rst", "_autosummary/cuvis_ai.utils.numpy.flatten_spatial.rst", "_autosummary/cuvis_ai.utils.numpy.gen_coco_labels.rst", "_autosummary/cuvis_ai.utils.numpy.get_shape_without_batch.rst", "_autosummary/cuvis_ai.utils.numpy.unflatten_batch_and_labels.rst", "_autosummary/cuvis_ai.utils.numpy.unflatten_batch_and_spatial.rst", "_autosummary/cuvis_ai.utils.numpy.unflatten_labels.rst", "_autosummary/cuvis_ai.utils.numpy.unflatten_spatial.rst", "_autosummary/cuvis_ai.utils.serializer.rst", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlDumper.rst", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlLoader.rst", "_autosummary/cuvis_ai.utils.serializer.OldSerializer.rst", "_autosummary/cuvis_ai.utils.serializer.Serializer.rst", "_autosummary/cuvis_ai.utils.serializer.YamlSerializer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_array_binary_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_array_file_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_array_string_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_file_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_string_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float64_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float64_representer.rst", "_autosummary/cuvis_ai.utils.test.rst", "_autosummary/cuvis_ai.utils.test.get_np_dummy_data.rst", "_autosummary/cuvis_ai.utils.torch.rst", "_autosummary/cuvis_ai.utils.torch.InputDimension.rst", "_autosummary/cuvis_ai.utils.torch.extract_state_dict.rst", "_autosummary/cuvis_ai.utils.torch.get_output_shape.rst", "_autosummary/cuvis_ai.utils.torch.guess_input_dimensionalty.rst", "_autosummary/cuvis_ai.utils.torch.guess_state_dict_format.rst", "_autosummary/cuvis_ai.utils.visualize.rst", "_autosummary/cuvis_ai.utils.visualize.visualize_features.rst", "_autosummary/cuvis_ai.utils.visualize.visualize_image.rst", "index.rst", "user/concepts.rst", "user/installation.rst", "user/quickstart.rst", "user/tutorials.rst"], "indexentries": {"__init__() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.annotation method)": [[10, "cuvis_ai.data.cocolabels.Annotation.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.category method)": [[12, "cuvis_ai.data.cocolabels.Category.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.cocodata method)": [[11, "cuvis_ai.data.cocolabels.COCOData.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.image method)": [[13, "cuvis_ai.data.cocolabels.Image.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.info method)": [[14, "cuvis_ai.data.cocolabels.Info.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.license method)": [[15, "cuvis_ai.data.cocolabels.License.__init__", false]], "__init__() (cuvis_ai.data.cocolabels.queryablelist method)": [[16, "cuvis_ai.data.cocolabels.QueryableList.__init__", false]], "__init__() (cuvis_ai.data.metadata.metadata method)": [[19, "cuvis_ai.data.metadata.Metadata.__init__", false]], "__init__() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.__init__", false]], "__init__() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.__init__", false]], "__init__() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.__init__", false]], "__init__() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.__init__", false]], "__init__() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.__init__", false]], "__init__() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.__init__", false]], "__init__() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.__init__", false]], "__init__() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.__init__", false]], "__init__() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.__init__", false]], "__init__() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.__init__", false]], "__init__() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.__init__", false]], "__init__() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.__init__", false]], "__init__() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.__init__", false]], "__init__() (cuvis_ai.node.base.basesupervised method)": [[54, "cuvis_ai.node.base.BaseSupervised.__init__", false]], "__init__() (cuvis_ai.node.base.basetransformation method)": [[55, "cuvis_ai.node.base.BaseTransformation.__init__", false]], "__init__() (cuvis_ai.node.base.baseunsupervised method)": [[56, "cuvis_ai.node.base.BaseUnsupervised.__init__", false]], "__init__() (cuvis_ai.node.base.preprocessor method)": [[57, "cuvis_ai.node.base.Preprocessor.__init__", false]], "__init__() (cuvis_ai.node.consumers.cubeconsumer method)": [[51, "cuvis_ai.node.Consumers.CubeConsumer.__init__", false]], "__init__() (cuvis_ai.node.consumers.labelconsumer method)": [[52, "cuvis_ai.node.Consumers.LabelConsumer.__init__", false]], "__init__() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.__init__", false]], "__init__() (cuvis_ai.node.sklearn.sklearnwrapped method)": [[61, "cuvis_ai.node.sklearn.SklearnWrapped.__init__", false]], "__init__() (cuvis_ai.node.skorch.skorchwrapped method)": [[63, "cuvis_ai.node.skorch.SkorchWrapped.__init__", false]], "__init__() (cuvis_ai.pipeline.executor.hummingbirdexecutor method)": [[70, "cuvis_ai.pipeline.executor.HummingBirdExecutor.__init__", false]], "__init__() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor.__init__", false]], "__init__() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.__init__", false]], "__init__() (cuvis_ai.pipeline.validator.graphvalidator method)": [[81, "cuvis_ai.pipeline.validator.GraphValidator.__init__", false]], "__init__() (cuvis_ai.pipeline.validator.shapevalidator method)": [[82, "cuvis_ai.pipeline.validator.ShapeValidator.__init__", false]], "__init__() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.__init__", false]], "__init__() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.__init__", false]], "__init__() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.__init__", false]], "__init__() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.__init__", false]], "__init__() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.__init__", false]], "__init__() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.__init__", false]], "__init__() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[94, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.__init__", false]], "__init__() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.__init__", false]], "__init__() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[100, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.__init__", false]], "__init__() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.__init__", false]], "__init__() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.__init__", false]], "__init__() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.__init__", false]], "__init__() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.__init__", false]], "__init__() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.__init__", false]], "__init__() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.__init__", false]], "__init__() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.__init__", false]], "__init__() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.__init__", false]], "__init__() (cuvis_ai.utils.nn_config.adam method)": [[140, "cuvis_ai.utils.nn_config.Adam.__init__", false]], "__init__() (cuvis_ai.utils.nn_config.optimizer method)": [[141, "cuvis_ai.utils.nn_config.Optimizer.__init__", false]], "__init__() (cuvis_ai.utils.nn_config.sgd method)": [[142, "cuvis_ai.utils.nn_config.SGD.__init__", false]], "__init__() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.__init__", false]], "__init__() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.__init__", false]], "__init__() (cuvis_ai.utils.serializer.oldserializer method)": [[159, "cuvis_ai.utils.serializer.OldSerializer.__init__", false]], "__init__() (cuvis_ai.utils.serializer.serializer method)": [[160, "cuvis_ai.utils.serializer.Serializer.__init__", false]], "__init__() (cuvis_ai.utils.serializer.yamlserializer method)": [[161, "cuvis_ai.utils.serializer.YamlSerializer.__init__", false]], "__init__() (cuvis_ai.utils.torch.inputdimension method)": [[174, "cuvis_ai.utils.torch.InputDimension.__init__", false]], "abstractdistance (class in cuvis_ai.distance.distance)": [[41, "cuvis_ai.distance.distance.AbstractDistance", false]], "adam (class in cuvis_ai.utils.nn_config)": [[140, "cuvis_ai.utils.nn_config.Adam", false]], "add_base_node() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.add_base_node", false]], "add_constructor() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_constructor", false]], "add_edge() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.add_edge", false]], "add_implicit_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_implicit_resolver", false]], "add_implicit_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_implicit_resolver", false]], "add_indent() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_indent", false]], "add_multi_constructor() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_multi_constructor", false]], "add_multi_representer() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_multi_representer", false]], "add_node() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.add_node", false]], "add_path_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_path_resolver", false]], "add_path_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_path_resolver", false]], "add_representer() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_representer", false]], "addclasscleanup() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.addClassCleanup", false]], "addcleanup() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.addCleanup", false]], "addtypeequalityfunc() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.addTypeEqualityFunc", false]], "all_agree() (in module cuvis_ai.deciders.combining_decider)": [[35, "cuvis_ai.deciders.combining_decider.all_agree", false]], "all_fields (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.all_fields", false]], "all_fields (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.all_fields", false]], "all_fields (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.all_fields", false]], "all_fields (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.all_fields", false]], "all_fields (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.all_fields", false]], "alpha (cuvis_ai.utils.nn_config.adam attribute)": [[140, "cuvis_ai.utils.nn_config.Adam.alpha", false]], "alpha (cuvis_ai.utils.nn_config.sgd attribute)": [[142, "cuvis_ai.utils.nn_config.SGD.alpha", false]], "analyze_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.analyze_scalar", false]], "anchor_node() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.anchor_node", false]], "anchor_template (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.ANCHOR_TEMPLATE", false]], "annotation (class in cuvis_ai.data.cocolabels)": [[10, "cuvis_ai.data.cocolabels.Annotation", false]], "annotation.meta (class in cuvis_ai.data.cocolabels)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta", false]], "annotations (cuvis_ai.data.cocolabels.cocodata property)": [[11, "cuvis_ai.data.cocolabels.COCOData.annotations", false]], "area (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.area", false]], "args (cuvis_ai.utils.nn_config.adam property)": [[140, "cuvis_ai.utils.nn_config.Adam.args", false]], "args (cuvis_ai.utils.nn_config.optimizer property)": [[141, "cuvis_ai.utils.nn_config.Optimizer.args", false]], "args (cuvis_ai.utils.nn_config.sgd property)": [[142, "cuvis_ai.utils.nn_config.SGD.args", false]], "ascend_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.ascend_resolver", false]], "ascend_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.ascend_resolver", false]], "asdict() (cuvis_ai.data.metadata.metadata method)": [[19, "cuvis_ai.data.metadata.Metadata.asdict", false]], "assert_() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assert_", false]], "assert_() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assert_", false]], "assert_() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assert_", false]], "assert_() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assert_", false]], "assert_() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assert_", false]], "assertalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertAlmostEqual", false]], "assertalmostequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertAlmostEquals", false]], "assertcountequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertCountEqual", false]], "assertdictcontainssubset() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertDictContainsSubset", false]], "assertdictequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertDictEqual", false]], "assertequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertEqual", false]], "assertequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertEqual", false]], "assertequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertEqual", false]], "assertequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertEqual", false]], "assertequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertEqual", false]], "assertequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertEquals", false]], "assertequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertEquals", false]], "assertequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertEquals", false]], "assertequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertEquals", false]], "assertequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertEquals", false]], "assertfalse() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertFalse", false]], "assertgreater() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertGreater", false]], "assertgreaterequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertGreaterEqual", false]], "assertin() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIn", false]], "assertin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIn", false]], "assertin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIn", false]], "assertin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIn", false]], "assertin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIn", false]], "assertis() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIs", false]], "assertis() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIs", false]], "assertis() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIs", false]], "assertis() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIs", false]], "assertis() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIs", false]], "assertisinstance() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsInstance", false]], "assertisnone() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsNone", false]], "assertisnot() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsNot", false]], "assertisnotnone() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsNotNone", false]], "assertless() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertLess", false]], "assertless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertLess", false]], "assertless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertLess", false]], "assertless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertLess", false]], "assertless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertLess", false]], "assertlessequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertLessEqual", false]], "assertlistequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertListEqual", false]], "assertlogs() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertLogs", false]], "assertmultilineequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertMultiLineEqual", false]], "assertnologs() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNoLogs", false]], "assertnotalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotAlmostEqual", false]], "assertnotalmostequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotAlmostEquals", false]], "assertnotequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotEqual", false]], "assertnotequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotEquals", false]], "assertnotin() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotIn", false]], "assertnotisinstance() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotIsInstance", false]], "assertnotregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotRegex", false]], "assertnotregexpmatches() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotRegexpMatches", false]], "assertraises() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRaises", false]], "assertraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRaises", false]], "assertraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRaises", false]], "assertraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRaises", false]], "assertraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRaises", false]], "assertraisesregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRaisesRegex", false]], "assertraisesregexp() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRaisesRegexp", false]], "assertregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRegex", false]], "assertregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRegex", false]], "assertregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRegex", false]], "assertregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRegex", false]], "assertregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRegex", false]], "assertregexpmatches() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRegexpMatches", false]], "assertsequenceequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertSequenceEqual", false]], "assertsetequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertSetEqual", false]], "asserttrue() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertTrue", false]], "asserttupleequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertTupleEqual", false]], "assertwarns() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertWarns", false]], "assertwarnsregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertWarnsRegex", false]], "at_least_n_agree() (in module cuvis_ai.deciders.combining_decider)": [[36, "cuvis_ai.deciders.combining_decider.at_least_n_agree", false]], "auto_assign_tags (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.auto_assign_tags", false]], "auto_assign_tags (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.auto_assign_tags", false]], "auto_assign_tags (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.auto_assign_tags", false]], "auto_assign_tags (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.auto_assign_tags", false]], "auto_assign_tags (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.auto_assign_tags", false]], "auxiliary (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.auxiliary", false]], "basedataset (class in cuvis_ai.data.basedataset)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet", false]], "basedecider (class in cuvis_ai.deciders.base_decider)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider", false]], "basesupervised (class in cuvis_ai.node.base)": [[54, "cuvis_ai.node.base.BaseSupervised", false]], "basetransformation (class in cuvis_ai.node.base)": [[55, "cuvis_ai.node.base.BaseTransformation", false]], "baseunsupervised (class in cuvis_ai.node.base)": [[56, "cuvis_ai.node.base.BaseUnsupervised", false]], "bbox (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.bbox", false]], "beta_1 (cuvis_ai.utils.nn_config.adam attribute)": [[140, "cuvis_ai.utils.nn_config.Adam.beta_1", false]], "beta_2 (cuvis_ai.utils.nn_config.adam attribute)": [[140, "cuvis_ai.utils.nn_config.Adam.beta_2", false]], "binary_mask_to_rle() (in module cuvis_ai.utils.numpy)": [[144, "cuvis_ai.utils.numpy.binary_mask_to_rle", false]], "binarydecider (class in cuvis_ai.deciders.binary_decider)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider", false]], "bind_to() (cuvis_ai.data.cocolabels.annotation.meta class method)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.bind_to", false]], "bind_to() (cuvis_ai.data.cocolabels.category.meta class method)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.bind_to", false]], "bind_to() (cuvis_ai.data.cocolabels.image.meta class method)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.bind_to", false]], "bind_to() (cuvis_ai.data.cocolabels.info.meta class method)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.bind_to", false]], "bind_to() (cuvis_ai.data.cocolabels.license.meta class method)": [[15, "cuvis_ai.data.cocolabels.License.Meta.bind_to", false]], "bit_depth (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.bit_depth", false]], "bool_values (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.bool_values", false]], "call_super_init (cuvis_ai.tv_transforms.bandpass attribute)": [[109, "cuvis_ai.tv_transforms.Bandpass.call_super_init", false]], "call_super_init (cuvis_ai.tv_transforms.multibandpass attribute)": [[113, "cuvis_ai.tv_transforms.MultiBandpass.call_super_init", false]], "call_super_init (cuvis_ai.tv_transforms.normalizestddev attribute)": [[117, "cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init", false]], "call_super_init (cuvis_ai.tv_transforms.normalizetofloat attribute)": [[121, "cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init", false]], "canberra (class in cuvis_ai.distance.distance)": [[42, "cuvis_ai.distance.distance.Canberra", false]], "cascaded (class in cuvis_ai.deciders.cascaded_decider)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded", false]], "category (class in cuvis_ai.data.cocolabels)": [[12, "cuvis_ai.data.cocolabels.Category", false]], "category.meta (class in cuvis_ai.data.cocolabels)": [[12, "cuvis_ai.data.cocolabels.Category.Meta", false]], "category_id (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.category_id", false]], "change_working_dir() (in module cuvis_ai.utils.filesystem)": [[138, "cuvis_ai.utils.filesystem.change_working_dir", false]], "check_array_shape() (in module cuvis_ai.utils.numpy)": [[145, "cuvis_ai.utils.numpy.check_array_shape", false]], "check_block_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_block_entry", false]], "check_data() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_data", false]], "check_directive() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_directive", false]], "check_document_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_document_end", false]], "check_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_document_start", false]], "check_empty_document() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_empty_document", false]], "check_empty_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_empty_mapping", false]], "check_empty_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_empty_sequence", false]], "check_event() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_event", false]], "check_input_dim() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.check_input_dim", false]], "check_input_dim() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.check_input_dim", false]], "check_input_dim() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.check_input_dim", false]], "check_input_dim() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.check_input_dim", false]], "check_input_dim() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.check_input_dim", false]], "check_input_dim() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.check_input_dim", false]], "check_input_dim() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.check_input_dim", false]], "check_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_key", false]], "check_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_node", false]], "check_output_dim() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.check_output_dim", false]], "check_output_dim() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.check_output_dim", false]], "check_output_dim() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.check_output_dim", false]], "check_output_dim() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.check_output_dim", false]], "check_output_dim() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.check_output_dim", false]], "check_output_dim() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.check_output_dim", false]], "check_output_dim() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.check_output_dim", false]], "check_plain() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_plain", false]], "check_printable() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_printable", false]], "check_resolver_prefix() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_resolver_prefix", false]], "check_resolver_prefix() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_resolver_prefix", false]], "check_simple_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_simple_key", false]], "check_state_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_state_key", false]], "check_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_token", false]], "check_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_value", false]], "choose_scalar_style() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.choose_scalar_style", false]], "close() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.close", false]], "coco_url (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.coco_url", false]], "cocodata (class in cuvis_ai.data.cocolabels)": [[11, "cuvis_ai.data.cocolabels.COCOData", false]], "combiningdecider (class in cuvis_ai.deciders.combining_decider)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider", false]], "compose_document() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_document", false]], "compose_mapping_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_mapping_node", false]], "compose_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_node", false]], "compose_scalar_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_scalar_node", false]], "compose_sequence_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_sequence_node", false]], "construct_document() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_document", false]], "construct_mapping() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_mapping", false]], "construct_object() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_object", false]], "construct_pairs() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_pairs", false]], "construct_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_scalar", false]], "construct_sequence() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_sequence", false]], "construct_undefined() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_undefined", false]], "construct_yaml_binary() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_binary", false]], "construct_yaml_bool() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_bool", false]], "construct_yaml_float() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_float", false]], "construct_yaml_int() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_int", false]], "construct_yaml_map() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_map", false]], "construct_yaml_null() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_null", false]], "construct_yaml_object() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_object", false]], "construct_yaml_omap() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_omap", false]], "construct_yaml_pairs() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_pairs", false]], "construct_yaml_seq() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_seq", false]], "construct_yaml_set() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_set", false]], "construct_yaml_str() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_str", false]], "construct_yaml_timestamp() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_timestamp", false]], "contributor (cuvis_ai.data.cocolabels.info attribute)": [[14, "cuvis_ai.data.cocolabels.Info.contributor", false]], "counttestcases() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.countTestCases", false]], "cubeconsumer (class in cuvis_ai.node.consumers)": [[51, "cuvis_ai.node.Consumers.CubeConsumer", false]], "custom_copy() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.custom_copy", false]], "cuvis_ai": [[0, "module-cuvis_ai", false]], "cuvis_ai.data": [[1, "module-cuvis_ai.data", false]], "cuvis_ai.data.basedataset": [[2, "module-cuvis_ai.data.BaseDataSet", false]], "cuvis_ai.data.cocolabels": [[9, "module-cuvis_ai.data.cocolabels", false]], "cuvis_ai.data.cuvisdataset": [[4, "module-cuvis_ai.data.CuvisDataSet", false]], "cuvis_ai.data.livecuvisdataloader": [[5, "module-cuvis_ai.data.LiveCuvisDataLoader", false]], "cuvis_ai.data.metadata": [[18, "module-cuvis_ai.data.metadata", false]], "cuvis_ai.data.numpydataset": [[6, "module-cuvis_ai.data.NumpyDataSet", false]], "cuvis_ai.data.outputformat": [[7, "module-cuvis_ai.data.OutputFormat", false]], "cuvis_ai.data.publicdatasets": [[8, "module-cuvis_ai.data.PublicDataSets", false]], "cuvis_ai.data.utils_dataloader": [[23, "module-cuvis_ai.data.utils_dataloader", false]], "cuvis_ai.deciders": [[26, "module-cuvis_ai.deciders", false]], "cuvis_ai.deciders.base_decider": [[27, "module-cuvis_ai.deciders.base_decider", false]], "cuvis_ai.deciders.binary_decider": [[29, "module-cuvis_ai.deciders.binary_decider", false]], "cuvis_ai.deciders.cascaded_decider": [[31, "module-cuvis_ai.deciders.cascaded_decider", false]], "cuvis_ai.deciders.combining_decider": [[33, "module-cuvis_ai.deciders.combining_decider", false]], "cuvis_ai.deciders.multiclass_decider": [[37, "module-cuvis_ai.deciders.multiclass_decider", false]], "cuvis_ai.distance": [[39, "module-cuvis_ai.distance", false]], "cuvis_ai.distance.distance": [[40, "module-cuvis_ai.distance.distance", false]], "cuvis_ai.node": [[49, "module-cuvis_ai.node", false]], "cuvis_ai.node.base": [[53, "module-cuvis_ai.node.base", false]], "cuvis_ai.node.consumers": [[50, "module-cuvis_ai.node.Consumers", false]], "cuvis_ai.node.node": [[58, "module-cuvis_ai.node.node", false]], "cuvis_ai.node.sklearn": [[60, "module-cuvis_ai.node.sklearn", false]], "cuvis_ai.node.skorch": [[62, "module-cuvis_ai.node.skorch", false]], "cuvis_ai.node.torch": [[64, "module-cuvis_ai.node.torch", false]], "cuvis_ai.node.torchvision": [[65, "module-cuvis_ai.node.torchvision", false]], "cuvis_ai.node.wrap": [[66, "module-cuvis_ai.node.wrap", false]], "cuvis_ai.pipeline": [[68, "module-cuvis_ai.pipeline", false]], "cuvis_ai.pipeline.executor": [[69, "module-cuvis_ai.pipeline.executor", false]], "cuvis_ai.pipeline.graph": [[72, "module-cuvis_ai.pipeline.graph", false]], "cuvis_ai.pipeline.meta_routing": [[74, "module-cuvis_ai.pipeline.meta_routing", false]], "cuvis_ai.pipeline.validator": [[80, "module-cuvis_ai.pipeline.validator", false]], "cuvis_ai.preprocessor": [[83, "module-cuvis_ai.preprocessor", false]], "cuvis_ai.preprocessor.sklearn_wrapped": [[84, "module-cuvis_ai.preprocessor.sklearn_wrapped", false]], "cuvis_ai.supervised": [[87, "module-cuvis_ai.supervised", false]], "cuvis_ai.supervised.sklearn_wrapped": [[88, "module-cuvis_ai.supervised.sklearn_wrapped", false]], "cuvis_ai.supervised.skorch_supervised": [[93, "module-cuvis_ai.supervised.skorch_supervised", false]], "cuvis_ai.test": [[95, "module-cuvis_ai.test", false]], "cuvis_ai.test.test_numpy_utils": [[96, "module-cuvis_ai.test.test_numpy_utils", false]], "cuvis_ai.test.test_pipeline_graph": [[98, "module-cuvis_ai.test.test_pipeline_graph", false]], "cuvis_ai.test.test_preprocessor_structural": [[99, "module-cuvis_ai.test.test_preprocessor_structural", false]], "cuvis_ai.test.test_unsupervised_structural": [[103, "module-cuvis_ai.test.test_unsupervised_structural", false]], "cuvis_ai.tv_transforms": [[107, "module-cuvis_ai.tv_transforms", false]], "cuvis_ai.tv_transforms.bandpass": [[108, "module-cuvis_ai.tv_transforms.Bandpass", false]], "cuvis_ai.tv_transforms.multibandpass": [[112, "module-cuvis_ai.tv_transforms.MultiBandpass", false]], "cuvis_ai.tv_transforms.normalizestddev": [[116, "module-cuvis_ai.tv_transforms.NormalizeStdDev", false]], "cuvis_ai.tv_transforms.normalizetofloat": [[120, "module-cuvis_ai.tv_transforms.NormalizeToFloat", false]], "cuvis_ai.tv_transforms.wavelengthlist": [[124, "module-cuvis_ai.tv_transforms.WavelengthList", false]], "cuvis_ai.unsupervised": [[125, "module-cuvis_ai.unsupervised", false]], "cuvis_ai.unsupervised.sklearn_wrapped": [[126, "module-cuvis_ai.unsupervised.sklearn_wrapped", false]], "cuvis_ai.utils": [[130, "module-cuvis_ai.utils", false]], "cuvis_ai.utils.dependencies": [[131, "module-cuvis_ai.utils.dependencies", false]], "cuvis_ai.utils.dict": [[134, "module-cuvis_ai.utils.dict", false]], "cuvis_ai.utils.filesystem": [[137, "module-cuvis_ai.utils.filesystem", false]], "cuvis_ai.utils.nn_config": [[139, "module-cuvis_ai.utils.nn_config", false]], "cuvis_ai.utils.numpy": [[143, "module-cuvis_ai.utils.numpy", false]], "cuvis_ai.utils.serializer": [[156, "module-cuvis_ai.utils.serializer", false]], "cuvis_ai.utils.test": [[171, "module-cuvis_ai.utils.test", false]], "cuvis_ai.utils.torch": [[173, "module-cuvis_ai.utils.torch", false]], "cuvis_ai.utils.visualize": [[179, "module-cuvis_ai.utils.visualize", false]], "cuvis_collate() (in module cuvis_ai.data.utils_dataloader)": [[24, "cuvis_ai.data.utils_dataloader.cuvis_collate", false]], "cuvisyamldumper (class in cuvis_ai.utils.serializer)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper", false]], "cuvisyamlloader (class in cuvis_ai.utils.serializer)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader", false]], "dataclass() (cuvis_ai.data.metadata.metadata method)": [[19, "cuvis_ai.data.metadata.Metadata.dataclass", false]], "date_captured (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.date_captured", false]], "date_created (cuvis_ai.data.cocolabels.info attribute)": [[14, "cuvis_ai.data.cocolabels.Info.date_created", false]], "debug() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.debug", false]], "debug() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.debug", false]], "debug() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.debug", false]], "debug() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.debug", false]], "debug() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.debug", false]], "debug_enabled (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.debug_enabled", false]], "debug_enabled (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.debug_enabled", false]], "debug_enabled (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.debug_enabled", false]], "debug_enabled (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.debug_enabled", false]], "debug_enabled (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.debug_enabled", false]], "default_mapping_tag (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_MAPPING_TAG", false]], "default_mapping_tag (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_MAPPING_TAG", false]], "default_scalar_tag (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_SCALAR_TAG", false]], "default_scalar_tag (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_SCALAR_TAG", false]], "default_sequence_tag (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_SEQUENCE_TAG", false]], "default_sequence_tag (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_SEQUENCE_TAG", false]], "default_tag_prefixes (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_TAG_PREFIXES", false]], "default_tags (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_TAGS", false]], "defaulttestresult() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.defaultTestResult", false]], "delete_node() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.delete_node", false]], "descend_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.descend_resolver", false]], "descend_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.descend_resolver", false]], "description (cuvis_ai.data.cocolabels.info attribute)": [[14, "cuvis_ai.data.cocolabels.Info.description", false]], "determine_block_hints() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.determine_block_hints", false]], "determine_encoding() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.determine_encoding", false]], "dict() (cuvis_ai.data.metadata.metadata method)": [[19, "cuvis_ai.data.metadata.Metadata.dict", false]], "dispose() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.dispose", false]], "dispose() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.dispose", false]], "doclasscleanups() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.doClassCleanups", false]], "docleanups() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.doCleanups", false]], "docleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.doCleanups", false]], "docleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.doCleanups", false]], "docleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.doCleanups", false]], "docleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.doCleanups", false]], "dump_patches (cuvis_ai.tv_transforms.bandpass attribute)": [[110, "cuvis_ai.tv_transforms.Bandpass.dump_patches", false]], "dump_patches (cuvis_ai.tv_transforms.multibandpass attribute)": [[114, "cuvis_ai.tv_transforms.MultiBandpass.dump_patches", false]], "dump_patches (cuvis_ai.tv_transforms.normalizestddev attribute)": [[118, "cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches", false]], "dump_patches (cuvis_ai.tv_transforms.normalizetofloat attribute)": [[122, "cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches", false]], "ecs (class in cuvis_ai.distance.distance)": [[43, "cuvis_ai.distance.distance.ECS", false]], "emit() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.emit", false]], "epochs (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[94, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.epochs", false]], "epsilon (cuvis_ai.utils.nn_config.adam attribute)": [[140, "cuvis_ai.utils.nn_config.Adam.epsilon", false]], "escape_codes (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.ESCAPE_CODES", false]], "escape_replacements (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.ESCAPE_REPLACEMENTS", false]], "escape_replacements (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.ESCAPE_REPLACEMENTS", false]], "euclidean (class in cuvis_ai.distance.distance)": [[44, "cuvis_ai.distance.distance.Euclidean", false]], "expect_alias() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_alias", false]], "expect_block_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping", false]], "expect_block_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping_key", false]], "expect_block_mapping_simple_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping_simple_value", false]], "expect_block_mapping_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping_value", false]], "expect_block_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_sequence", false]], "expect_block_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_sequence_item", false]], "expect_document_end() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_document_end", false]], "expect_document_root() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_document_root", false]], "expect_document_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_document_start", false]], "expect_first_block_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_block_mapping_key", false]], "expect_first_block_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_block_sequence_item", false]], "expect_first_document_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_document_start", false]], "expect_first_flow_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_flow_mapping_key", false]], "expect_first_flow_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_flow_sequence_item", false]], "expect_flow_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping", false]], "expect_flow_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping_key", false]], "expect_flow_mapping_simple_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping_simple_value", false]], "expect_flow_mapping_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping_value", false]], "expect_flow_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_sequence", false]], "expect_flow_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_sequence_item", false]], "expect_node() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_node", false]], "expect_nothing() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_nothing", false]], "expect_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_scalar", false]], "expect_stream_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_stream_start", false]], "extra_repr() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.extra_repr", false]], "extract_state_dict() (in module cuvis_ai.utils.torch)": [[175, "cuvis_ai.utils.torch.extract_state_dict", false]], "fail() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.fail", false]], "fail() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.fail", false]], "fail() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.fail", false]], "fail() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.fail", false]], "fail() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.fail", false]], "failif() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failIf", false]], "failif() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failIf", false]], "failif() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failIf", false]], "failif() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failIf", false]], "failif() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failIf", false]], "failifalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failIfAlmostEqual", false]], "failifequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failIfEqual", false]], "failunless() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnless", false]], "failunless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnless", false]], "failunless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnless", false]], "failunless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnless", false]], "failunless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnless", false]], "failunlessalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnlessAlmostEqual", false]], "failunlessequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnlessEqual", false]], "failunlessraises() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnlessRaises", false]], "failureexception (cuvis_ai.test.test_numpy_utils.testnumpyutils attribute)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failureException", false]], "failureexception (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf attribute)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failureException", false]], "failureexception (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca attribute)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failureException", false]], "failureexception (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm attribute)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failureException", false]], "failureexception (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans attribute)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failureException", false]], "fetch_alias() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_alias", false]], "fetch_anchor() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_anchor", false]], "fetch_block_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_block_entry", false]], "fetch_block_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_block_scalar", false]], "fetch_directive() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_directive", false]], "fetch_document_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_document_end", false]], "fetch_document_indicator() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_document_indicator", false]], "fetch_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_document_start", false]], "fetch_double() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_double", false]], "fetch_flow_collection_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_collection_end", false]], "fetch_flow_collection_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_collection_start", false]], "fetch_flow_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_entry", false]], "fetch_flow_mapping_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_mapping_end", false]], "fetch_flow_mapping_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_mapping_start", false]], "fetch_flow_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_scalar", false]], "fetch_flow_sequence_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_sequence_end", false]], "fetch_flow_sequence_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_sequence_start", false]], "fetch_folded() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_folded", false]], "fetch_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_key", false]], "fetch_literal() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_literal", false]], "fetch_more_tokens() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_more_tokens", false]], "fetch_plain() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_plain", false]], "fetch_single() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_single", false]], "fetch_stream_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_stream_end", false]], "fetch_stream_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_stream_start", false]], "fetch_tag() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_tag", false]], "fetch_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_value", false]], "fields_to_merge (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.fields_to_merge", false]], "fields_to_merge (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.fields_to_merge", false]], "fields_to_merge (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.fields_to_merge", false]], "fields_to_merge (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.fields_to_merge", false]], "fields_to_merge (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.fields_to_merge", false]], "file_name (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.file_name", false]], "fit() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.fit", false]], "fit() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.fit", false]], "fit() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.fit", false]], "fit() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.fit", false]], "fit() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.fit", false]], "fit() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.fit", false]], "fit() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.fit", false]], "fit() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.fit", false]], "fit() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.fit", false]], "fit() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.fit", false]], "fit() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.fit", false]], "fit() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.fit", false]], "fit() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.fit", false]], "fit() (cuvis_ai.node.base.basesupervised method)": [[54, "cuvis_ai.node.base.BaseSupervised.fit", false]], "fit() (cuvis_ai.node.base.baseunsupervised method)": [[56, "cuvis_ai.node.base.BaseUnsupervised.fit", false]], "fit() (cuvis_ai.node.base.preprocessor method)": [[57, "cuvis_ai.node.base.Preprocessor.fit", false]], "fit() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor.fit", false]], "fit() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.fit", false]], "fit() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.fit", false]], "fit() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.fit", false]], "fit() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.fit", false]], "fit() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.fit", false]], "fit() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.fit", false]], "fit() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.fit", false]], "fit() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[94, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.fit", false]], "fit() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.fit", false]], "fit() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.fit", false]], "fit() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.fit", false]], "fit_node() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor.fit_node", false]], "flags (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.flags", false]], "flatten_batch_and_labels() (in module cuvis_ai.utils.numpy)": [[146, "cuvis_ai.utils.numpy.flatten_batch_and_labels", false]], "flatten_batch_and_spatial() (in module cuvis_ai.utils.numpy)": [[147, "cuvis_ai.utils.numpy.flatten_batch_and_spatial", false]], "flatten_labels() (in module cuvis_ai.utils.numpy)": [[148, "cuvis_ai.utils.numpy.flatten_labels", false]], "flatten_mapping() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.flatten_mapping", false]], "flatten_spatial() (in module cuvis_ai.utils.numpy)": [[149, "cuvis_ai.utils.numpy.flatten_spatial", false]], "flickr_url (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.flickr_url", false]], "flush_stream() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.flush_stream", false]], "forward() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.forward", false]], "forward() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.forward", false]], "forward() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.forward", false]], "forward() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.forward", false]], "forward() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.forward", false]], "forward() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.forward", false]], "forward() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.forward", false]], "forward() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.forward", false]], "forward() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.forward", false]], "forward() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.forward", false]], "forward() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.forward", false]], "forward() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.forward", false]], "forward() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.forward", false]], "forward() (cuvis_ai.node.base.basesupervised method)": [[54, "cuvis_ai.node.base.BaseSupervised.forward", false]], "forward() (cuvis_ai.node.base.basetransformation method)": [[55, "cuvis_ai.node.base.BaseTransformation.forward", false]], "forward() (cuvis_ai.node.base.baseunsupervised method)": [[56, "cuvis_ai.node.base.BaseUnsupervised.forward", false]], "forward() (cuvis_ai.node.base.preprocessor method)": [[57, "cuvis_ai.node.base.Preprocessor.forward", false]], "forward() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.forward", false]], "forward() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor.forward", false]], "forward() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.forward", false]], "forward() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.forward", false]], "forward() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.forward", false]], "forward() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.forward", false]], "forward() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.forward", false]], "forward() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.forward", false]], "forward() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.forward", false]], "forward() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[94, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.forward", false]], "forward() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.forward", false]], "forward() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.forward", false]], "forward() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.forward", false]], "forward() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.forward", false]], "forward_node() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor.forward_node", false]], "framerate (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.framerate", false]], "freeze() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.freeze", false]], "from_dict() (cuvis_ai.data.cocolabels.annotation class method)": [[10, "cuvis_ai.data.cocolabels.Annotation.from_dict", false]], "from_dict() (cuvis_ai.data.cocolabels.category class method)": [[12, "cuvis_ai.data.cocolabels.Category.from_dict", false]], "from_dict() (cuvis_ai.data.cocolabels.image class method)": [[13, "cuvis_ai.data.cocolabels.Image.from_dict", false]], "from_dict() (cuvis_ai.data.cocolabels.info class method)": [[14, "cuvis_ai.data.cocolabels.Info.from_dict", false]], "from_dict() (cuvis_ai.data.cocolabels.license class method)": [[15, "cuvis_ai.data.cocolabels.License.from_dict", false]], "from_json() (cuvis_ai.data.cocolabels.annotation class method)": [[10, "cuvis_ai.data.cocolabels.Annotation.from_json", false]], "from_json() (cuvis_ai.data.cocolabels.category class method)": [[12, "cuvis_ai.data.cocolabels.Category.from_json", false]], "from_json() (cuvis_ai.data.cocolabels.image class method)": [[13, "cuvis_ai.data.cocolabels.Image.from_json", false]], "from_json() (cuvis_ai.data.cocolabels.info class method)": [[14, "cuvis_ai.data.cocolabels.Info.from_json", false]], "from_json() (cuvis_ai.data.cocolabels.license class method)": [[15, "cuvis_ai.data.cocolabels.License.from_json", false]], "from_list() (cuvis_ai.data.cocolabels.annotation class method)": [[10, "cuvis_ai.data.cocolabels.Annotation.from_list", false]], "from_list() (cuvis_ai.data.cocolabels.category class method)": [[12, "cuvis_ai.data.cocolabels.Category.from_list", false]], "from_list() (cuvis_ai.data.cocolabels.image class method)": [[13, "cuvis_ai.data.cocolabels.Image.from_list", false]], "from_list() (cuvis_ai.data.cocolabels.info class method)": [[14, "cuvis_ai.data.cocolabels.Info.from_list", false]], "from_list() (cuvis_ai.data.cocolabels.license class method)": [[15, "cuvis_ai.data.cocolabels.License.from_list", false]], "from_path() (cuvis_ai.data.cocolabels.cocodata class method)": [[11, "cuvis_ai.data.cocolabels.COCOData.from_path", false]], "from_yaml() (cuvis_ai.data.metadata.metadata class method)": [[19, "cuvis_ai.data.metadata.Metadata.from_yaml", false]], "from_yaml_file() (cuvis_ai.data.metadata.metadata class method)": [[19, "cuvis_ai.data.metadata.Metadata.from_yaml_file", false]], "gen_coco_labels() (in module cuvis_ai.utils.numpy)": [[150, "cuvis_ai.utils.numpy.gen_coco_labels", false]], "generate_anchor() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.generate_anchor", false]], "get_data() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_data", false]], "get_dataloader_from_dataset() (in module cuvis_ai.data.utils_dataloader)": [[25, "cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset", false]], "get_datatype() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.get_datatype", false]], "get_event() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_event", false]], "get_fit_metadata() (in module cuvis_ai.pipeline.meta_routing)": [[75, "cuvis_ai.pipeline.meta_routing.get_fit_metadata", false]], "get_fit_requested_meta() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.get_fit_requested_meta", false]], "get_fit_requested_meta() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.get_fit_requested_meta", false]], "get_forward_metadata() (in module cuvis_ai.pipeline.meta_routing)": [[76, "cuvis_ai.pipeline.meta_routing.get_forward_metadata", false]], "get_forward_requested_meta() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.get_forward_requested_meta", false]], "get_forward_requested_meta() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.get_forward_requested_meta", false]], "get_installed_packages() (in module cuvis_ai.utils.dependencies)": [[132, "cuvis_ai.utils.dependencies.get_installed_packages", false]], "get_installed_packages_str() (in module cuvis_ai.utils.dependencies)": [[133, "cuvis_ai.utils.dependencies.get_installed_packages_str", false]], "get_mark() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_mark", false]], "get_meta_from_mesu() (in module cuvis_ai.data.metadata)": [[20, "cuvis_ai.data.metadata.get_meta_from_mesu", false]], "get_meta_from_path() (in module cuvis_ai.data.metadata)": [[21, "cuvis_ai.data.metadata.get_meta_from_path", false]], "get_meta_from_session() (in module cuvis_ai.data.metadata)": [[22, "cuvis_ai.data.metadata.get_meta_from_session", false]], "get_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_node", false]], "get_np_dummy_data() (in module cuvis_ai.utils.test)": [[172, "cuvis_ai.utils.test.get_np_dummy_data", false]], "get_output_shape() (in module cuvis_ai.utils.torch)": [[176, "cuvis_ai.utils.torch.get_output_shape", false]], "get_requested_metadata() (in module cuvis_ai.pipeline.meta_routing)": [[77, "cuvis_ai.pipeline.meta_routing.get_requested_metadata", false]], "get_route() (in module cuvis_ai.pipeline.meta_routing)": [[78, "cuvis_ai.pipeline.meta_routing.get_route", false]], "get_shape_without_batch() (in module cuvis_ai.utils.numpy)": [[151, "cuvis_ai.utils.numpy.get_shape_without_batch", false]], "get_single_data() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_single_data", false]], "get_single_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_single_node", false]], "get_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_token", false]], "gfc (class in cuvis_ai.distance.distance)": [[45, "cuvis_ai.distance.distance.GFC", false]], "gmm (class in cuvis_ai.unsupervised.sklearn_wrapped)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM", false]], "graph (class in cuvis_ai.pipeline.graph)": [[73, "cuvis_ai.pipeline.graph.Graph", false]], "graphvalidator (class in cuvis_ai.pipeline.validator)": [[81, "cuvis_ai.pipeline.validator.GraphValidator", false]], "guess_input_dimensionalty() (in module cuvis_ai.utils.torch)": [[177, "cuvis_ai.utils.torch.guess_input_dimensionalty", false]], "guess_state_dict_format() (in module cuvis_ai.utils.torch)": [[178, "cuvis_ai.utils.torch.guess_state_dict_format", false]], "height (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.height", false]], "hummingbirdexecutor (class in cuvis_ai.pipeline.executor)": [[70, "cuvis_ai.pipeline.executor.HummingBirdExecutor", false]], "id (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.id", false]], "id (cuvis_ai.data.cocolabels.category attribute)": [[12, "cuvis_ai.data.cocolabels.Category.id", false]], "id (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.id", false]], "id (cuvis_ai.data.cocolabels.license attribute)": [[15, "cuvis_ai.data.cocolabels.License.id", false]], "id() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.id", false]], "id() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.id", false]], "id() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.id", false]], "id() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.id", false]], "id() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.id", false]], "ignore_aliases() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.ignore_aliases", false]], "image (class in cuvis_ai.data.cocolabels)": [[13, "cuvis_ai.data.cocolabels.Image", false]], "image.meta (class in cuvis_ai.data.cocolabels)": [[13, "cuvis_ai.data.cocolabels.Image.Meta", false]], "image_id (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.image_id", false]], "image_ids (cuvis_ai.data.cocolabels.cocodata property)": [[11, "cuvis_ai.data.cocolabels.COCOData.image_ids", false]], "images (cuvis_ai.data.cocolabels.cocodata property)": [[11, "cuvis_ai.data.cocolabels.COCOData.images", false]], "increase_indent() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.increase_indent", false]], "inf_value (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.inf_value", false]], "inf_value (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.inf_value", false]], "info (class in cuvis_ai.data.cocolabels)": [[14, "cuvis_ai.data.cocolabels.Info", false]], "info (cuvis_ai.data.cocolabels.cocodata property)": [[11, "cuvis_ai.data.cocolabels.COCOData.info", false]], "info.meta (class in cuvis_ai.data.cocolabels)": [[14, "cuvis_ai.data.cocolabels.Info.Meta", false]], "input_dim (cuvis_ai.deciders.base_decider.basedecider property)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.input_dim", false]], "input_dim (cuvis_ai.deciders.binary_decider.binarydecider property)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.input_dim", false]], "input_dim (cuvis_ai.deciders.cascaded_decider.cascaded property)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.input_dim", false]], "input_dim (cuvis_ai.deciders.combining_decider.combiningdecider property)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.input_dim", false]], "input_dim (cuvis_ai.deciders.multiclass_decider.multiclassdecider property)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.input_dim", false]], "input_dim (cuvis_ai.distance.distance.abstractdistance property)": [[41, "cuvis_ai.distance.distance.AbstractDistance.input_dim", false]], "input_dim (cuvis_ai.distance.distance.canberra property)": [[42, "cuvis_ai.distance.distance.Canberra.input_dim", false]], "input_dim (cuvis_ai.distance.distance.ecs property)": [[43, "cuvis_ai.distance.distance.ECS.input_dim", false]], "input_dim (cuvis_ai.distance.distance.euclidean property)": [[44, "cuvis_ai.distance.distance.Euclidean.input_dim", false]], "input_dim (cuvis_ai.distance.distance.gfc property)": [[45, "cuvis_ai.distance.distance.GFC.input_dim", false]], "input_dim (cuvis_ai.distance.distance.manhattan property)": [[46, "cuvis_ai.distance.distance.Manhattan.input_dim", false]], "input_dim (cuvis_ai.distance.distance.minkowski property)": [[47, "cuvis_ai.distance.distance.Minkowski.input_dim", false]], "input_dim (cuvis_ai.distance.distance.spectralangle property)": [[48, "cuvis_ai.distance.distance.SpectralAngle.input_dim", false]], "input_dim (cuvis_ai.node.node.node property)": [[59, "cuvis_ai.node.node.Node.input_dim", false]], "input_dim (cuvis_ai.preprocessor.sklearn_wrapped.nmf property)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.input_dim", false]], "input_dim (cuvis_ai.preprocessor.sklearn_wrapped.pca property)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.input_dim", false]], "input_dim (cuvis_ai.supervised.sklearn_wrapped.lda property)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.input_dim", false]], "input_dim (cuvis_ai.supervised.sklearn_wrapped.mlp property)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.input_dim", false]], "input_dim (cuvis_ai.supervised.sklearn_wrapped.qda property)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.input_dim", false]], "input_dim (cuvis_ai.supervised.sklearn_wrapped.svm property)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.input_dim", false]], "input_dim (cuvis_ai.unsupervised.sklearn_wrapped.gmm property)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.input_dim", false]], "input_dim (cuvis_ai.unsupervised.sklearn_wrapped.kmeans property)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.input_dim", false]], "input_dim (cuvis_ai.unsupervised.sklearn_wrapped.meanshift property)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.input_dim", false]], "inputdimension (class in cuvis_ai.utils.torch)": [[174, "cuvis_ai.utils.torch.InputDimension", false]], "integration_time_us (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.integration_time_us", false]], "iscrowd (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.iscrowd", false]], "json_key_to_field (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.json_key_to_field", false]], "json_key_to_field (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.json_key_to_field", false]], "json_key_to_field (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.json_key_to_field", false]], "json_key_to_field (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.json_key_to_field", false]], "json_key_to_field (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.json_key_to_field", false]], "key_transform_with_dump (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.key_transform_with_dump", false]], "key_transform_with_dump (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.key_transform_with_dump", false]], "key_transform_with_dump (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.key_transform_with_dump", false]], "key_transform_with_dump (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.key_transform_with_dump", false]], "key_transform_with_dump (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.key_transform_with_dump", false]], "key_transform_with_load (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.key_transform_with_load", false]], "key_transform_with_load (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.key_transform_with_load", false]], "key_transform_with_load (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.key_transform_with_load", false]], "key_transform_with_load (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.key_transform_with_load", false]], "key_transform_with_load (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.key_transform_with_load", false]], "kmeans (class in cuvis_ai.unsupervised.sklearn_wrapped)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans", false]], "labelconsumer (class in cuvis_ai.node.consumers)": [[52, "cuvis_ai.node.Consumers.LabelConsumer", false]], "lda (class in cuvis_ai.supervised.sklearn_wrapped)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA", false]], "license (class in cuvis_ai.data.cocolabels)": [[15, "cuvis_ai.data.cocolabels.License", false]], "license (cuvis_ai.data.cocolabels.cocodata property)": [[11, "cuvis_ai.data.cocolabels.COCOData.license", false]], "license (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.license", false]], "license.meta (class in cuvis_ai.data.cocolabels)": [[15, "cuvis_ai.data.cocolabels.License.Meta", false]], "list_to_json() (cuvis_ai.data.cocolabels.annotation class method)": [[10, "cuvis_ai.data.cocolabels.Annotation.list_to_json", false]], "list_to_json() (cuvis_ai.data.cocolabels.category class method)": [[12, "cuvis_ai.data.cocolabels.Category.list_to_json", false]], "list_to_json() (cuvis_ai.data.cocolabels.image class method)": [[13, "cuvis_ai.data.cocolabels.Image.list_to_json", false]], "list_to_json() (cuvis_ai.data.cocolabels.info class method)": [[14, "cuvis_ai.data.cocolabels.Info.list_to_json", false]], "list_to_json() (cuvis_ai.data.cocolabels.license class method)": [[15, "cuvis_ai.data.cocolabels.License.list_to_json", false]], "list_to_yaml() (cuvis_ai.data.metadata.metadata class method)": [[19, "cuvis_ai.data.metadata.Metadata.list_to_yaml", false]], "load() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.load", false]], "load() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.load", false]], "load() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.load", false]], "load() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.load", false]], "load() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.load", false]], "load() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.load", false]], "load() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.load", false]], "load() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.load", false]], "load() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.load", false]], "load() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.load", false]], "load() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.load", false]], "load() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.load", false]], "load() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.load", false]], "load() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.load", false]], "load() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.load", false]], "load() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.load", false]], "load() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.load", false]], "load() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.load", false]], "load() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.load", false]], "load() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.load", false]], "load() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.load", false]], "load() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[94, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.load", false]], "load() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.load", false]], "load() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.load", false]], "load() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.load", false]], "load() (cuvis_ai.utils.serializer.serializer method)": [[160, "cuvis_ai.utils.serializer.Serializer.load", false]], "load() (cuvis_ai.utils.serializer.yamlserializer method)": [[161, "cuvis_ai.utils.serializer.YamlSerializer.load", false]], "load_from_file() (cuvis_ai.pipeline.graph.graph class method)": [[73, "cuvis_ai.pipeline.graph.Graph.load_from_file", false]], "load_node() (cuvis_ai.utils.serializer.oldserializer method)": [[159, "cuvis_ai.utils.serializer.OldSerializer.load_node", false]], "longmessage (cuvis_ai.test.test_numpy_utils.testnumpyutils attribute)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.longMessage", false]], "longmessage (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf attribute)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.longMessage", false]], "longmessage (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca attribute)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.longMessage", false]], "longmessage (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm attribute)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.longMessage", false]], "longmessage (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans attribute)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.longMessage", false]], "lr (cuvis_ai.utils.nn_config.adam attribute)": [[140, "cuvis_ai.utils.nn_config.Adam.lr", false]], "lr (cuvis_ai.utils.nn_config.sgd attribute)": [[142, "cuvis_ai.utils.nn_config.SGD.lr", false]], "make_node() (in module cuvis_ai.node.wrap)": [[67, "cuvis_ai.node.wrap.make_node", false]], "manhattan (class in cuvis_ai.distance.distance)": [[46, "cuvis_ai.distance.distance.Manhattan", false]], "marshal_date_time_as (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.marshal_date_time_as", false]], "marshal_date_time_as (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.marshal_date_time_as", false]], "marshal_date_time_as (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.marshal_date_time_as", false]], "marshal_date_time_as (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.marshal_date_time_as", false]], "marshal_date_time_as (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.marshal_date_time_as", false]], "mask (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.mask", false]], "maxdiff (cuvis_ai.test.test_numpy_utils.testnumpyutils attribute)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.maxDiff", false]], "maxdiff (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf attribute)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.maxDiff", false]], "maxdiff (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca attribute)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.maxDiff", false]], "maxdiff (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm attribute)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.maxDiff", false]], "maxdiff (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans attribute)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.maxDiff", false]], "meanshift (class in cuvis_ai.unsupervised.sklearn_wrapped)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift", false]], "memoryexecutor (class in cuvis_ai.pipeline.executor)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor", false]], "metadata (class in cuvis_ai.data.metadata)": [[19, "cuvis_ai.data.metadata.Metadata", false]], "minkowski (class in cuvis_ai.distance.distance)": [[47, "cuvis_ai.distance.distance.Minkowski", false]], "mlp (class in cuvis_ai.supervised.sklearn_wrapped)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP", false]], "model (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[94, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.model", false]], "model_args (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[94, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.model_args", false]], "module": [[0, "module-cuvis_ai", false], [1, "module-cuvis_ai.data", false], [2, "module-cuvis_ai.data.BaseDataSet", false], [4, "module-cuvis_ai.data.CuvisDataSet", false], [5, "module-cuvis_ai.data.LiveCuvisDataLoader", false], [6, "module-cuvis_ai.data.NumpyDataSet", false], [7, "module-cuvis_ai.data.OutputFormat", false], [8, "module-cuvis_ai.data.PublicDataSets", false], [9, "module-cuvis_ai.data.cocolabels", false], [18, "module-cuvis_ai.data.metadata", false], [23, "module-cuvis_ai.data.utils_dataloader", false], [26, "module-cuvis_ai.deciders", false], [27, "module-cuvis_ai.deciders.base_decider", false], [29, "module-cuvis_ai.deciders.binary_decider", false], [31, "module-cuvis_ai.deciders.cascaded_decider", false], [33, "module-cuvis_ai.deciders.combining_decider", false], [37, "module-cuvis_ai.deciders.multiclass_decider", false], [39, "module-cuvis_ai.distance", false], [40, "module-cuvis_ai.distance.distance", false], [49, "module-cuvis_ai.node", false], [50, "module-cuvis_ai.node.Consumers", false], [53, "module-cuvis_ai.node.base", false], [58, "module-cuvis_ai.node.node", false], [60, "module-cuvis_ai.node.sklearn", false], [62, "module-cuvis_ai.node.skorch", false], [64, "module-cuvis_ai.node.torch", false], [65, "module-cuvis_ai.node.torchvision", false], [66, "module-cuvis_ai.node.wrap", false], [68, "module-cuvis_ai.pipeline", false], [69, "module-cuvis_ai.pipeline.executor", false], [72, "module-cuvis_ai.pipeline.graph", false], [74, "module-cuvis_ai.pipeline.meta_routing", false], [80, "module-cuvis_ai.pipeline.validator", false], [83, "module-cuvis_ai.preprocessor", false], [84, "module-cuvis_ai.preprocessor.sklearn_wrapped", false], [87, "module-cuvis_ai.supervised", false], [88, "module-cuvis_ai.supervised.sklearn_wrapped", false], [93, "module-cuvis_ai.supervised.skorch_supervised", false], [95, "module-cuvis_ai.test", false], [96, "module-cuvis_ai.test.test_numpy_utils", false], [98, "module-cuvis_ai.test.test_pipeline_graph", false], [99, "module-cuvis_ai.test.test_preprocessor_structural", false], [103, "module-cuvis_ai.test.test_unsupervised_structural", false], [107, "module-cuvis_ai.tv_transforms", false], [108, "module-cuvis_ai.tv_transforms.Bandpass", false], [112, "module-cuvis_ai.tv_transforms.MultiBandpass", false], [116, "module-cuvis_ai.tv_transforms.NormalizeStdDev", false], [120, "module-cuvis_ai.tv_transforms.NormalizeToFloat", false], [124, "module-cuvis_ai.tv_transforms.WavelengthList", false], [125, "module-cuvis_ai.unsupervised", false], [126, "module-cuvis_ai.unsupervised.sklearn_wrapped", false], [130, "module-cuvis_ai.utils", false], [131, "module-cuvis_ai.utils.dependencies", false], [134, "module-cuvis_ai.utils.dict", false], [137, "module-cuvis_ai.utils.filesystem", false], [139, "module-cuvis_ai.utils.nn_config", false], [143, "module-cuvis_ai.utils.numpy", false], [156, "module-cuvis_ai.utils.serializer", false], [171, "module-cuvis_ai.utils.test", false], [173, "module-cuvis_ai.utils.torch", false], [179, "module-cuvis_ai.utils.visualize", false]], "momentum (cuvis_ai.utils.nn_config.sgd attribute)": [[142, "cuvis_ai.utils.nn_config.SGD.momentum", false]], "multiclassdecider (class in cuvis_ai.deciders.multiclass_decider)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider", false]], "name (cuvis_ai.data.cocolabels.category attribute)": [[12, "cuvis_ai.data.cocolabels.Category.name", false]], "name (cuvis_ai.data.cocolabels.license attribute)": [[15, "cuvis_ai.data.cocolabels.License.name", false]], "name (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.name", false]], "name (cuvis_ai.utils.nn_config.adam property)": [[140, "cuvis_ai.utils.nn_config.Adam.name", false]], "name (cuvis_ai.utils.nn_config.optimizer property)": [[141, "cuvis_ai.utils.nn_config.Optimizer.name", false]], "name (cuvis_ai.utils.nn_config.sgd property)": [[142, "cuvis_ai.utils.nn_config.SGD.name", false]], "nan_value (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.nan_value", false]], "need_events() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.need_events", false]], "need_more_events() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.need_more_events", false]], "need_more_tokens() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.need_more_tokens", false]], "nesterov (cuvis_ai.utils.nn_config.sgd attribute)": [[142, "cuvis_ai.utils.nn_config.SGD.nesterov", false]], "next_possible_simple_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.next_possible_simple_key", false]], "nmf (class in cuvis_ai.preprocessor.sklearn_wrapped)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF", false]], "node (class in cuvis_ai.node.node)": [[59, "cuvis_ai.node.node.Node", false]], "non_printable (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.NON_PRINTABLE", false]], "numpy_array_binary_representer() (in module cuvis_ai.utils.serializer)": [[162, "cuvis_ai.utils.serializer.numpy_array_binary_representer", false]], "numpy_array_file_representer() (in module cuvis_ai.utils.serializer)": [[163, "cuvis_ai.utils.serializer.numpy_array_file_representer", false]], "numpy_array_string_representer() (in module cuvis_ai.utils.serializer)": [[164, "cuvis_ai.utils.serializer.numpy_array_string_representer", false]], "numpy_arrray_file_constructor() (in module cuvis_ai.utils.serializer)": [[165, "cuvis_ai.utils.serializer.numpy_arrray_file_constructor", false]], "numpy_arrray_string_constructor() (in module cuvis_ai.utils.serializer)": [[166, "cuvis_ai.utils.serializer.numpy_arrray_string_constructor", false]], "numpy_float32_constructor() (in module cuvis_ai.utils.serializer)": [[167, "cuvis_ai.utils.serializer.numpy_float32_constructor", false]], "numpy_float32_representer() (in module cuvis_ai.utils.serializer)": [[168, "cuvis_ai.utils.serializer.numpy_float32_representer", false]], "numpy_float64_constructor() (in module cuvis_ai.utils.serializer)": [[169, "cuvis_ai.utils.serializer.numpy_float64_constructor", false]], "numpy_float64_representer() (in module cuvis_ai.utils.serializer)": [[170, "cuvis_ai.utils.serializer.numpy_float64_representer", false]], "oldserializer (class in cuvis_ai.utils.serializer)": [[159, "cuvis_ai.utils.serializer.OldSerializer", false]], "one (cuvis_ai.utils.torch.inputdimension attribute)": [[174, "cuvis_ai.utils.torch.InputDimension.One", false]], "open() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.open", false]], "optimizer (class in cuvis_ai.utils.nn_config)": [[141, "cuvis_ai.utils.nn_config.Optimizer", false]], "optimizer (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[94, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.optimizer", false]], "output_dim (cuvis_ai.deciders.base_decider.basedecider property)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.output_dim", false]], "output_dim (cuvis_ai.deciders.binary_decider.binarydecider property)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.output_dim", false]], "output_dim (cuvis_ai.deciders.cascaded_decider.cascaded property)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.output_dim", false]], "output_dim (cuvis_ai.deciders.combining_decider.combiningdecider property)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.output_dim", false]], "output_dim (cuvis_ai.deciders.multiclass_decider.multiclassdecider property)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.output_dim", false]], "output_dim (cuvis_ai.distance.distance.abstractdistance property)": [[41, "cuvis_ai.distance.distance.AbstractDistance.output_dim", false]], "output_dim (cuvis_ai.distance.distance.canberra property)": [[42, "cuvis_ai.distance.distance.Canberra.output_dim", false]], "output_dim (cuvis_ai.distance.distance.ecs property)": [[43, "cuvis_ai.distance.distance.ECS.output_dim", false]], "output_dim (cuvis_ai.distance.distance.euclidean property)": [[44, "cuvis_ai.distance.distance.Euclidean.output_dim", false]], "output_dim (cuvis_ai.distance.distance.gfc property)": [[45, "cuvis_ai.distance.distance.GFC.output_dim", false]], "output_dim (cuvis_ai.distance.distance.manhattan property)": [[46, "cuvis_ai.distance.distance.Manhattan.output_dim", false]], "output_dim (cuvis_ai.distance.distance.minkowski property)": [[47, "cuvis_ai.distance.distance.Minkowski.output_dim", false]], "output_dim (cuvis_ai.distance.distance.spectralangle property)": [[48, "cuvis_ai.distance.distance.SpectralAngle.output_dim", false]], "output_dim (cuvis_ai.node.node.node property)": [[59, "cuvis_ai.node.node.Node.output_dim", false]], "output_dim (cuvis_ai.preprocessor.sklearn_wrapped.nmf property)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.output_dim", false]], "output_dim (cuvis_ai.preprocessor.sklearn_wrapped.pca property)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.output_dim", false]], "output_dim (cuvis_ai.supervised.sklearn_wrapped.lda property)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.output_dim", false]], "output_dim (cuvis_ai.supervised.sklearn_wrapped.mlp property)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.output_dim", false]], "output_dim (cuvis_ai.supervised.sklearn_wrapped.qda property)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.output_dim", false]], "output_dim (cuvis_ai.supervised.sklearn_wrapped.svm property)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.output_dim", false]], "output_dim (cuvis_ai.unsupervised.sklearn_wrapped.gmm property)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.output_dim", false]], "output_dim (cuvis_ai.unsupervised.sklearn_wrapped.kmeans property)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.output_dim", false]], "output_dim (cuvis_ai.unsupervised.sklearn_wrapped.meanshift property)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.output_dim", false]], "parameters() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.parameters", false]], "parse_block_mapping_first_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_mapping_first_key", false]], "parse_block_mapping_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_mapping_key", false]], "parse_block_mapping_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_mapping_value", false]], "parse_block_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_node", false]], "parse_block_node_or_indentless_sequence() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_node_or_indentless_sequence", false]], "parse_block_sequence_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_sequence_entry", false]], "parse_block_sequence_first_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_sequence_first_entry", false]], "parse_document_content() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_document_content", false]], "parse_document_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_document_end", false]], "parse_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_document_start", false]], "parse_flow_mapping_empty_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_empty_value", false]], "parse_flow_mapping_first_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_first_key", false]], "parse_flow_mapping_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_key", false]], "parse_flow_mapping_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_value", false]], "parse_flow_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_node", false]], "parse_flow_sequence_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry", false]], "parse_flow_sequence_entry_mapping_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry_mapping_end", false]], "parse_flow_sequence_entry_mapping_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry_mapping_key", false]], "parse_flow_sequence_entry_mapping_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry_mapping_value", false]], "parse_flow_sequence_first_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_first_entry", false]], "parse_implicit_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_implicit_document_start", false]], "parse_indentless_sequence_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_indentless_sequence_entry", false]], "parse_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_node", false]], "parse_stream_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_stream_start", false]], "pca (class in cuvis_ai.preprocessor.sklearn_wrapped)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA", false]], "peek() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.peek", false]], "peek_event() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.peek_event", false]], "peek_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.peek_token", false]], "power_t (cuvis_ai.utils.nn_config.sgd attribute)": [[142, "cuvis_ai.utils.nn_config.SGD.power_t", false]], "prefix() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.prefix", false]], "prepare_anchor() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_anchor", false]], "prepare_tag() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_tag", false]], "prepare_tag_handle() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_tag_handle", false]], "prepare_tag_prefix() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_tag_prefix", false]], "prepare_version() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_version", false]], "preprocessor (class in cuvis_ai.node.base)": [[57, "cuvis_ai.node.base.Preprocessor", false]], "process_anchor() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.process_anchor", false]], "process_directives() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.process_directives", false]], "process_empty_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.process_empty_scalar", false]], "process_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.process_scalar", false]], "process_tag() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.process_tag", false]], "processing_mode (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.processing_mode", false]], "pytorch_args (cuvis_ai.utils.nn_config.adam property)": [[140, "cuvis_ai.utils.nn_config.Adam.pytorch_args", false]], "pytorch_args (cuvis_ai.utils.nn_config.optimizer property)": [[141, "cuvis_ai.utils.nn_config.Optimizer.pytorch_args", false]], "pytorch_args (cuvis_ai.utils.nn_config.sgd property)": [[142, "cuvis_ai.utils.nn_config.SGD.pytorch_args", false]], "qda (class in cuvis_ai.supervised.sklearn_wrapped)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA", false]], "queryablelist (class in cuvis_ai.data.cocolabels)": [[16, "cuvis_ai.data.cocolabels.QueryableList", false]], "raise_on_unknown_json_key (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.raise_on_unknown_json_key", false]], "raise_on_unknown_json_key (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.raise_on_unknown_json_key", false]], "raise_on_unknown_json_key (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.raise_on_unknown_json_key", false]], "raise_on_unknown_json_key (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.raise_on_unknown_json_key", false]], "raise_on_unknown_json_key (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.raise_on_unknown_json_key", false]], "recursive (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.recursive", false]], "recursive (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.recursive", false]], "recursive (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.recursive", false]], "recursive (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.recursive", false]], "recursive (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.recursive", false]], "recursive_classes (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.recursive_classes", false]], "recursive_classes (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.recursive_classes", false]], "recursive_classes (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.recursive_classes", false]], "recursive_classes (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.recursive_classes", false]], "recursive_classes (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.recursive_classes", false]], "references (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.references", false]], "remove_possible_simple_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.remove_possible_simple_key", false]], "remove_prefix() (in module cuvis_ai.utils.dict)": [[135, "cuvis_ai.utils.dict.remove_prefix", false]], "remove_prefix_str() (in module cuvis_ai.utils.dict)": [[136, "cuvis_ai.utils.dict.remove_prefix_str", false]], "represent() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent", false]], "represent_binary() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_binary", false]], "represent_bool() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_bool", false]], "represent_data() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_data", false]], "represent_date() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_date", false]], "represent_datetime() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_datetime", false]], "represent_dict() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_dict", false]], "represent_float() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_float", false]], "represent_int() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_int", false]], "represent_list() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_list", false]], "represent_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_mapping", false]], "represent_none() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_none", false]], "represent_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_scalar", false]], "represent_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_sequence", false]], "represent_set() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_set", false]], "represent_str() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_str", false]], "represent_undefined() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_undefined", false]], "represent_yaml_object() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_yaml_object", false]], "resolve() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.resolve", false]], "resolve() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.resolve", false]], "rle2mask() (in module cuvis_ai.data.cocolabels)": [[17, "cuvis_ai.data.cocolabels.RLE2mask", false]], "run() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.run", false]], "run() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.run", false]], "run() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.run", false]], "run() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.run", false]], "run() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.run", false]], "save_possible_simple_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.save_possible_simple_key", false]], "save_to_file() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.save_to_file", false]], "scan_anchor() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_anchor", false]], "scan_block_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar", false]], "scan_block_scalar_breaks() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_breaks", false]], "scan_block_scalar_ignored_line() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_ignored_line", false]], "scan_block_scalar_indentation() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_indentation", false]], "scan_block_scalar_indicators() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_indicators", false]], "scan_directive() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_directive", false]], "scan_directive_ignored_line() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_directive_ignored_line", false]], "scan_directive_name() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_directive_name", false]], "scan_flow_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar", false]], "scan_flow_scalar_breaks() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar_breaks", false]], "scan_flow_scalar_non_spaces() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar_non_spaces", false]], "scan_flow_scalar_spaces() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar_spaces", false]], "scan_line_break() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_line_break", false]], "scan_plain() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_plain", false]], "scan_plain_spaces() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_plain_spaces", false]], "scan_tag() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag", false]], "scan_tag_directive_handle() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_directive_handle", false]], "scan_tag_directive_prefix() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_directive_prefix", false]], "scan_tag_directive_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_directive_value", false]], "scan_tag_handle() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_handle", false]], "scan_tag_uri() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_uri", false]], "scan_to_next_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_to_next_token", false]], "scan_uri_escapes() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_uri_escapes", false]], "scan_yaml_directive_number() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_yaml_directive_number", false]], "scan_yaml_directive_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_yaml_directive_value", false]], "score() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.score", false]], "score() (cuvis_ai.distance.distance.canberra static method)": [[42, "cuvis_ai.distance.distance.Canberra.score", false]], "score() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.score", false]], "score() (cuvis_ai.distance.distance.euclidean static method)": [[44, "cuvis_ai.distance.distance.Euclidean.score", false]], "score() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.score", false]], "score() (cuvis_ai.distance.distance.manhattan static method)": [[46, "cuvis_ai.distance.distance.Manhattan.score", false]], "score() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.score", false]], "score() (cuvis_ai.distance.distance.spectralangle static method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.score", false]], "segmentation (cuvis_ai.data.cocolabels.annotation attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.segmentation", false]], "serialize() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.serialize", false]], "serialize() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.serialize", false]], "serialize() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.serialize", false]], "serialize() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.serialize", false]], "serialize() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.serialize", false]], "serialize() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.serialize", false]], "serialize() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.serialize", false]], "serialize() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.serialize", false]], "serialize() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.serialize", false]], "serialize() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.serialize", false]], "serialize() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.serialize", false]], "serialize() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.serialize", false]], "serialize() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.serialize", false]], "serialize() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.serialize", false]], "serialize() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.serialize", false]], "serialize() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.serialize", false]], "serialize() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.serialize", false]], "serialize() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.serialize", false]], "serialize() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.serialize", false]], "serialize() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.serialize", false]], "serialize() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.serialize", false]], "serialize() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[94, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.serialize", false]], "serialize() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.serialize", false]], "serialize() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.serialize", false]], "serialize() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.serialize", false]], "serialize() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.serialize", false]], "serialize() (cuvis_ai.utils.serializer.serializer method)": [[160, "cuvis_ai.utils.serializer.Serializer.serialize", false]], "serialize() (cuvis_ai.utils.serializer.yamlserializer method)": [[161, "cuvis_ai.utils.serializer.YamlSerializer.serialize", false]], "serialize_node() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.serialize_node", false]], "serialize_node() (cuvis_ai.utils.serializer.oldserializer method)": [[159, "cuvis_ai.utils.serializer.OldSerializer.serialize_node", false]], "serializer (class in cuvis_ai.utils.serializer)": [[160, "cuvis_ai.utils.serializer.Serializer", false]], "set_datatype() (cuvis_ai.data.basedataset.basedataset method)": [[3, "cuvis_ai.data.BaseDataSet.BaseDataSet.set_datatype", false]], "set_fit_meta_request() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.set_fit_meta_request", false]], "set_fit_meta_request() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.set_fit_meta_request", false]], "set_forward_meta_request() (cuvis_ai.deciders.base_decider.basedecider method)": [[28, "cuvis_ai.deciders.base_decider.BaseDecider.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[30, "cuvis_ai.deciders.binary_decider.BinaryDecider.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[32, "cuvis_ai.deciders.cascaded_decider.Cascaded.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[34, "cuvis_ai.deciders.combining_decider.CombiningDecider.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[38, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.abstractdistance method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.canberra method)": [[42, "cuvis_ai.distance.distance.Canberra.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.ecs method)": [[43, "cuvis_ai.distance.distance.ECS.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.euclidean method)": [[44, "cuvis_ai.distance.distance.Euclidean.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.gfc method)": [[45, "cuvis_ai.distance.distance.GFC.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.manhattan method)": [[46, "cuvis_ai.distance.distance.Manhattan.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.minkowski method)": [[47, "cuvis_ai.distance.distance.Minkowski.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.distance.distance.spectralangle method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.node.node.node method)": [[59, "cuvis_ai.node.node.Node.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[85, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[86, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[89, "cuvis_ai.supervised.sklearn_wrapped.LDA.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[90, "cuvis_ai.supervised.sklearn_wrapped.MLP.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[91, "cuvis_ai.supervised.sklearn_wrapped.QDA.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[127, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[128, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.set_forward_meta_request", false]], "set_forward_meta_request() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[129, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.set_forward_meta_request", false]], "setup() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.setUp", false]], "setup() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[100, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.setUp", false]], "setup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.setUp", false]], "setup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.setUp", false]], "setup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.setUp", false]], "setup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.setUp", false]], "setup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.setUp", false]], "setupclass() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.setUpClass", false]], "setupclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.setUpClass", false]], "setupclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.setUpClass", false]], "setupclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.setUpClass", false]], "setupclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.setUpClass", false]], "sgd (class in cuvis_ai.utils.nn_config)": [[142, "cuvis_ai.utils.nn_config.SGD", false]], "shape (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.shape", false]], "shapevalidator (class in cuvis_ai.pipeline.validator)": [[82, "cuvis_ai.pipeline.validator.ShapeValidator", false]], "shortdescription() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.shortDescription", false]], "skip_defaults (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.skip_defaults", false]], "skip_defaults (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.skip_defaults", false]], "skip_defaults (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.skip_defaults", false]], "skip_defaults (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.skip_defaults", false]], "skip_defaults (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.skip_defaults", false]], "skip_defaults_if (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.skip_defaults_if", false]], "skip_defaults_if (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.skip_defaults_if", false]], "skip_defaults_if (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.skip_defaults_if", false]], "skip_defaults_if (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.skip_defaults_if", false]], "skip_defaults_if (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.skip_defaults_if", false]], "skip_if (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.skip_if", false]], "skip_if (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.skip_if", false]], "skip_if (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.skip_if", false]], "skip_if (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.skip_if", false]], "skip_if (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.skip_if", false]], "skiptest() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.skipTest", false]], "skiptest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.skipTest", false]], "skiptest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.skipTest", false]], "skiptest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.skipTest", false]], "skiptest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.skipTest", false]], "sklearn_args (cuvis_ai.utils.nn_config.adam property)": [[140, "cuvis_ai.utils.nn_config.Adam.sklearn_args", false]], "sklearn_args (cuvis_ai.utils.nn_config.optimizer property)": [[141, "cuvis_ai.utils.nn_config.Optimizer.sklearn_args", false]], "sklearn_args (cuvis_ai.utils.nn_config.sgd property)": [[142, "cuvis_ai.utils.nn_config.SGD.sklearn_args", false]], "sklearnwrapped (class in cuvis_ai.node.sklearn)": [[61, "cuvis_ai.node.sklearn.SklearnWrapped", false]], "skorchsupervised (class in cuvis_ai.supervised.skorch_supervised)": [[94, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised", false]], "skorchwrapped (class in cuvis_ai.node.skorch)": [[63, "cuvis_ai.node.skorch.SkorchWrapped", false]], "spectra_to_array() (cuvis_ai.distance.distance.abstractdistance static method)": [[41, "cuvis_ai.distance.distance.AbstractDistance.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.canberra static method)": [[42, "cuvis_ai.distance.distance.Canberra.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.ecs static method)": [[43, "cuvis_ai.distance.distance.ECS.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.euclidean static method)": [[44, "cuvis_ai.distance.distance.Euclidean.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.gfc static method)": [[45, "cuvis_ai.distance.distance.GFC.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.manhattan static method)": [[46, "cuvis_ai.distance.distance.Manhattan.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.minkowski static method)": [[47, "cuvis_ai.distance.distance.Minkowski.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.spectralangle static method)": [[48, "cuvis_ai.distance.distance.SpectralAngle.spectra_to_array", false]], "spectralangle (class in cuvis_ai.distance.distance)": [[48, "cuvis_ai.distance.distance.SpectralAngle", false]], "stale_possible_simple_keys() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.stale_possible_simple_keys", false]], "subtest() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.subTest", false]], "subtest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.subTest", false]], "subtest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.subTest", false]], "subtest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.subTest", false]], "subtest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.subTest", false]], "supercategory (cuvis_ai.data.cocolabels.category attribute)": [[12, "cuvis_ai.data.cocolabels.Category.supercategory", false]], "svm (class in cuvis_ai.supervised.sklearn_wrapped)": [[92, "cuvis_ai.supervised.sklearn_wrapped.SVM", false]], "tag (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.tag", false]], "tag (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.tag", false]], "tag (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.tag", false]], "tag (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.tag", false]], "tag (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.tag", false]], "tag_key (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.tag_key", false]], "tag_key (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.tag_key", false]], "tag_key (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.tag_key", false]], "tag_key (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.tag_key", false]], "tag_key (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.tag_key", false]], "teardown() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.tearDown", false]], "teardown() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.tearDown", false]], "teardown() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.tearDown", false]], "teardown() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.tearDown", false]], "teardown() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.tearDown", false]], "teardownclass() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.tearDownClass", false]], "test_correct_input_dim() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[100, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_correct_input_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[100, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_correct_output_dim", false]], "test_get_shape_without_batch() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.test_get_shape_without_batch", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[100, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_incorrect_input_dim", false]], "test_initialization() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[100, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_initialization", false]], "test_passthrough() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[100, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_passthrough", false]], "testnumpyutils (class in cuvis_ai.test.test_numpy_utils)": [[97, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils", false]], "testpreprocessednode (class in cuvis_ai.test.test_preprocessor_structural)": [[100, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode", false]], "testunsupervisedgmm (class in cuvis_ai.test.test_unsupervised_structural)": [[104, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM", false]], "testunsupervisedkmeans (class in cuvis_ai.test.test_unsupervised_structural)": [[105, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans", false]], "testunsupervisednmf (class in cuvis_ai.test.test_preprocessor_structural)": [[101, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF", false]], "testunsupervisednode (class in cuvis_ai.test.test_unsupervised_structural)": [[106, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode", false]], "testunsupervisedpca (class in cuvis_ai.test.test_preprocessor_structural)": [[102, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA", false]], "three (cuvis_ai.utils.torch.inputdimension attribute)": [[174, "cuvis_ai.utils.torch.InputDimension.Three", false]], "timestamp_regexp (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.timestamp_regexp", false]], "to_dict() (cuvis_ai.data.cocolabels.annotation method)": [[10, "cuvis_ai.data.cocolabels.Annotation.to_dict", false]], "to_dict() (cuvis_ai.data.cocolabels.category method)": [[12, "cuvis_ai.data.cocolabels.Category.to_dict", false]], "to_dict() (cuvis_ai.data.cocolabels.image method)": [[13, "cuvis_ai.data.cocolabels.Image.to_dict", false]], "to_dict() (cuvis_ai.data.cocolabels.info method)": [[14, "cuvis_ai.data.cocolabels.Info.to_dict", false]], "to_dict() (cuvis_ai.data.cocolabels.license method)": [[15, "cuvis_ai.data.cocolabels.License.to_dict", false]], "to_json() (cuvis_ai.data.cocolabels.annotation method)": [[10, "cuvis_ai.data.cocolabels.Annotation.to_json", false]], "to_json() (cuvis_ai.data.cocolabels.category method)": [[12, "cuvis_ai.data.cocolabels.Category.to_json", false]], "to_json() (cuvis_ai.data.cocolabels.image method)": [[13, "cuvis_ai.data.cocolabels.Image.to_json", false]], "to_json() (cuvis_ai.data.cocolabels.info method)": [[14, "cuvis_ai.data.cocolabels.Info.to_json", false]], "to_json() (cuvis_ai.data.cocolabels.license method)": [[15, "cuvis_ai.data.cocolabels.License.to_json", false]], "to_torchvision() (cuvis_ai.data.cocolabels.annotation method)": [[10, "cuvis_ai.data.cocolabels.Annotation.to_torchvision", false]], "to_yaml() (cuvis_ai.data.metadata.metadata method)": [[19, "cuvis_ai.data.metadata.Metadata.to_yaml", false]], "to_yaml_file() (cuvis_ai.data.metadata.metadata method)": [[19, "cuvis_ai.data.metadata.Metadata.to_yaml_file", false]], "torch_layers (cuvis_ai.pipeline.graph.graph property)": [[73, "cuvis_ai.pipeline.graph.Graph.torch_layers", false]], "train() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[71, "cuvis_ai.pipeline.executor.MemoryExecutor.train", false]], "train() (cuvis_ai.pipeline.graph.graph method)": [[73, "cuvis_ai.pipeline.graph.Graph.train", false]], "training (cuvis_ai.tv_transforms.bandpass attribute)": [[111, "cuvis_ai.tv_transforms.Bandpass.training", false]], "training (cuvis_ai.tv_transforms.multibandpass attribute)": [[115, "cuvis_ai.tv_transforms.MultiBandpass.training", false]], "training (cuvis_ai.tv_transforms.normalizestddev attribute)": [[119, "cuvis_ai.tv_transforms.NormalizeStdDev.training", false]], "training (cuvis_ai.tv_transforms.normalizetofloat attribute)": [[123, "cuvis_ai.tv_transforms.NormalizeToFloat.training", false]], "traverse() (in module cuvis_ai.pipeline.meta_routing)": [[79, "cuvis_ai.pipeline.meta_routing.traverse", false]], "two (cuvis_ai.utils.torch.inputdimension attribute)": [[174, "cuvis_ai.utils.torch.InputDimension.Two", false]], "unflatten_batch_and_labels() (in module cuvis_ai.utils.numpy)": [[152, "cuvis_ai.utils.numpy.unflatten_batch_and_labels", false]], "unflatten_batch_and_spatial() (in module cuvis_ai.utils.numpy)": [[153, "cuvis_ai.utils.numpy.unflatten_batch_and_spatial", false]], "unflatten_labels() (in module cuvis_ai.utils.numpy)": [[154, "cuvis_ai.utils.numpy.unflatten_labels", false]], "unflatten_spatial() (in module cuvis_ai.utils.numpy)": [[155, "cuvis_ai.utils.numpy.unflatten_spatial", false]], "unknown (cuvis_ai.utils.torch.inputdimension attribute)": [[174, "cuvis_ai.utils.torch.InputDimension.Unknown", false]], "unwind_indent() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.unwind_indent", false]], "update() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.update", false]], "update_raw() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.update_raw", false]], "url (cuvis_ai.data.cocolabels.info attribute)": [[14, "cuvis_ai.data.cocolabels.Info.url", false]], "url (cuvis_ai.data.cocolabels.license attribute)": [[15, "cuvis_ai.data.cocolabels.License.url", false]], "v1 (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.v1", false]], "v1 (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.v1", false]], "v1 (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.v1", false]], "v1 (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.v1", false]], "v1 (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.v1", false]], "v1_debug (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.v1_debug", false]], "v1_debug (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.v1_debug", false]], "v1_debug (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.v1_debug", false]], "v1_debug (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.v1_debug", false]], "v1_debug (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.v1_debug", false]], "v1_field_to_alias (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.v1_field_to_alias", false]], "v1_field_to_alias (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.v1_field_to_alias", false]], "v1_field_to_alias (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.v1_field_to_alias", false]], "v1_field_to_alias (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.v1_field_to_alias", false]], "v1_field_to_alias (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.v1_field_to_alias", false]], "v1_key_case (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.v1_key_case", false]], "v1_key_case (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.v1_key_case", false]], "v1_key_case (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.v1_key_case", false]], "v1_key_case (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.v1_key_case", false]], "v1_key_case (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.v1_key_case", false]], "v1_on_unknown_key (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.v1_on_unknown_key", false]], "v1_on_unknown_key (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.v1_on_unknown_key", false]], "v1_on_unknown_key (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.v1_on_unknown_key", false]], "v1_on_unknown_key (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.v1_on_unknown_key", false]], "v1_on_unknown_key (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.v1_on_unknown_key", false]], "v1_unsafe_parse_dataclass_in_union (cuvis_ai.data.cocolabels.annotation.meta attribute)": [[10, "cuvis_ai.data.cocolabels.Annotation.Meta.v1_unsafe_parse_dataclass_in_union", false]], "v1_unsafe_parse_dataclass_in_union (cuvis_ai.data.cocolabels.category.meta attribute)": [[12, "cuvis_ai.data.cocolabels.Category.Meta.v1_unsafe_parse_dataclass_in_union", false]], "v1_unsafe_parse_dataclass_in_union (cuvis_ai.data.cocolabels.image.meta attribute)": [[13, "cuvis_ai.data.cocolabels.Image.Meta.v1_unsafe_parse_dataclass_in_union", false]], "v1_unsafe_parse_dataclass_in_union (cuvis_ai.data.cocolabels.info.meta attribute)": [[14, "cuvis_ai.data.cocolabels.Info.Meta.v1_unsafe_parse_dataclass_in_union", false]], "v1_unsafe_parse_dataclass_in_union (cuvis_ai.data.cocolabels.license.meta attribute)": [[15, "cuvis_ai.data.cocolabels.License.Meta.v1_unsafe_parse_dataclass_in_union", false]], "verbose (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[94, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.verbose", false]], "verify() (cuvis_ai.pipeline.validator.graphvalidator method)": [[81, "cuvis_ai.pipeline.validator.GraphValidator.verify", false]], "verify() (cuvis_ai.pipeline.validator.shapevalidator method)": [[82, "cuvis_ai.pipeline.validator.ShapeValidator.verify", false]], "version (cuvis_ai.data.cocolabels.info attribute)": [[14, "cuvis_ai.data.cocolabels.Info.version", false]], "visualize_features() (in module cuvis_ai.utils.visualize)": [[180, "cuvis_ai.utils.visualize.visualize_features", false]], "visualize_image() (in module cuvis_ai.utils.visualize)": [[181, "cuvis_ai.utils.visualize.visualize_image", false]], "wavelength (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.wavelength", false]], "wavelengths_nm (cuvis_ai.data.metadata.metadata attribute)": [[19, "cuvis_ai.data.metadata.Metadata.wavelengths_nm", false]], "where() (cuvis_ai.data.cocolabels.queryablelist method)": [[16, "cuvis_ai.data.cocolabels.QueryableList.where", false]], "width (cuvis_ai.data.cocolabels.image attribute)": [[13, "cuvis_ai.data.cocolabels.Image.width", false]], "write_double_quoted() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_double_quoted", false]], "write_folded() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_folded", false]], "write_indent() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_indent", false]], "write_indicator() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_indicator", false]], "write_line_break() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_line_break", false]], "write_literal() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_literal", false]], "write_plain() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_plain", false]], "write_single_quoted() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_single_quoted", false]], "write_stream_end() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_stream_end", false]], "write_stream_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_stream_start", false]], "write_tag_directive() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_tag_directive", false]], "write_version_directive() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_version_directive", false]], "yaml_constructors (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_constructors", false]], "yaml_implicit_resolvers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_implicit_resolvers", false]], "yaml_implicit_resolvers (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_implicit_resolvers", false]], "yaml_multi_constructors (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_multi_constructors", false]], "yaml_multi_representers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_multi_representers", false]], "yaml_path_resolvers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_path_resolvers", false]], "yaml_path_resolvers (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[158, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_path_resolvers", false]], "yaml_representers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[157, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_representers", false]], "yamlserializer (class in cuvis_ai.utils.serializer)": [[161, "cuvis_ai.utils.serializer.YamlSerializer", false]]}, "objects": {"": [[0, 0, 0, "-", "cuvis_ai"]], "cuvis_ai": [[1, 0, 0, "-", "data"], [26, 0, 0, "-", "deciders"], [39, 0, 0, "-", "distance"], [49, 0, 0, "-", "node"], [68, 0, 0, "-", "pipeline"], [83, 0, 0, "-", "preprocessor"], [87, 0, 0, "-", "supervised"], [95, 0, 0, "-", "test"], [107, 0, 0, "-", "tv_transforms"], [125, 0, 0, "-", "unsupervised"], [130, 0, 0, "-", "utils"]], "cuvis_ai.data": [[2, 0, 0, "-", "BaseDataSet"], [4, 0, 0, "-", "CuvisDataSet"], [5, 0, 0, "-", "LiveCuvisDataLoader"], [6, 0, 0, "-", "NumpyDataSet"], [7, 0, 0, "-", "OutputFormat"], [8, 0, 0, "-", "PublicDataSets"], [9, 0, 0, "-", "cocolabels"], [18, 0, 0, "-", "metadata"], [23, 0, 0, "-", "utils_dataloader"]], "cuvis_ai.data.BaseDataSet": [[3, 1, 1, "", "BaseDataSet"]], "cuvis_ai.data.BaseDataSet.BaseDataSet": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "extra_repr"], [3, 2, 1, "", "get_datatype"], [3, 2, 1, "", "set_datatype"]], "cuvis_ai.data.cocolabels": [[10, 1, 1, "", "Annotation"], [11, 1, 1, "", "COCOData"], [12, 1, 1, "", "Category"], [13, 1, 1, "", "Image"], [14, 1, 1, "", "Info"], [15, 1, 1, "", "License"], [16, 1, 1, "", "QueryableList"], [17, 5, 1, "", "RLE2mask"]], "cuvis_ai.data.cocolabels.Annotation": [[10, 1, 1, "", "Meta"], [10, 2, 1, "", "__init__"], [10, 3, 1, "", "area"], [10, 3, 1, "", "auxiliary"], [10, 3, 1, "", "bbox"], [10, 3, 1, "", "category_id"], [10, 2, 1, "", "from_dict"], [10, 2, 1, "", "from_json"], [10, 2, 1, "", "from_list"], [10, 3, 1, "", "id"], [10, 3, 1, "", "image_id"], [10, 3, 1, "", "iscrowd"], [10, 2, 1, "", "list_to_json"], [10, 3, 1, "", "mask"], [10, 3, 1, "", "segmentation"], [10, 2, 1, "", "to_dict"], [10, 2, 1, "", "to_json"], [10, 2, 1, "", "to_torchvision"]], "cuvis_ai.data.cocolabels.Annotation.Meta": [[10, 3, 1, "", "all_fields"], [10, 3, 1, "", "auto_assign_tags"], [10, 2, 1, "", "bind_to"], [10, 3, 1, "", "debug_enabled"], [10, 3, 1, "", "fields_to_merge"], [10, 3, 1, "", "json_key_to_field"], [10, 3, 1, "", "key_transform_with_dump"], [10, 3, 1, "", "key_transform_with_load"], [10, 3, 1, "", "marshal_date_time_as"], [10, 3, 1, "", "raise_on_unknown_json_key"], [10, 3, 1, "", "recursive"], [10, 3, 1, "", "recursive_classes"], [10, 3, 1, "", "skip_defaults"], [10, 3, 1, "", "skip_defaults_if"], [10, 3, 1, "", "skip_if"], [10, 3, 1, "", "tag"], [10, 3, 1, "", "tag_key"], [10, 3, 1, "", "v1"], [10, 3, 1, "", "v1_debug"], [10, 3, 1, "", "v1_field_to_alias"], [10, 3, 1, "", "v1_key_case"], [10, 3, 1, "", "v1_on_unknown_key"], [10, 3, 1, "", "v1_unsafe_parse_dataclass_in_union"]], "cuvis_ai.data.cocolabels.COCOData": [[11, 2, 1, "", "__init__"], [11, 4, 1, "", "annotations"], [11, 2, 1, "", "from_path"], [11, 4, 1, "", "image_ids"], [11, 4, 1, "", "images"], [11, 4, 1, "", "info"], [11, 4, 1, "", "license"]], "cuvis_ai.data.cocolabels.Category": [[12, 1, 1, "", "Meta"], [12, 2, 1, "", "__init__"], [12, 2, 1, "", "from_dict"], [12, 2, 1, "", "from_json"], [12, 2, 1, "", "from_list"], [12, 3, 1, "", "id"], [12, 2, 1, "", "list_to_json"], [12, 3, 1, "", "name"], [12, 3, 1, "", "supercategory"], [12, 2, 1, "", "to_dict"], [12, 2, 1, "", "to_json"]], "cuvis_ai.data.cocolabels.Category.Meta": [[12, 3, 1, "", "all_fields"], [12, 3, 1, "", "auto_assign_tags"], [12, 2, 1, "", "bind_to"], [12, 3, 1, "", "debug_enabled"], [12, 3, 1, "", "fields_to_merge"], [12, 3, 1, "", "json_key_to_field"], [12, 3, 1, "", "key_transform_with_dump"], [12, 3, 1, "", "key_transform_with_load"], [12, 3, 1, "", "marshal_date_time_as"], [12, 3, 1, "", "raise_on_unknown_json_key"], [12, 3, 1, "", "recursive"], [12, 3, 1, "", "recursive_classes"], [12, 3, 1, "", "skip_defaults"], [12, 3, 1, "", "skip_defaults_if"], [12, 3, 1, "", "skip_if"], [12, 3, 1, "", "tag"], [12, 3, 1, "", "tag_key"], [12, 3, 1, "", "v1"], [12, 3, 1, "", "v1_debug"], [12, 3, 1, "", "v1_field_to_alias"], [12, 3, 1, "", "v1_key_case"], [12, 3, 1, "", "v1_on_unknown_key"], [12, 3, 1, "", "v1_unsafe_parse_dataclass_in_union"]], "cuvis_ai.data.cocolabels.Image": [[13, 1, 1, "", "Meta"], [13, 2, 1, "", "__init__"], [13, 3, 1, "", "coco_url"], [13, 3, 1, "", "date_captured"], [13, 3, 1, "", "file_name"], [13, 3, 1, "", "flickr_url"], [13, 2, 1, "", "from_dict"], [13, 2, 1, "", "from_json"], [13, 2, 1, "", "from_list"], [13, 3, 1, "", "height"], [13, 3, 1, "", "id"], [13, 3, 1, "", "license"], [13, 2, 1, "", "list_to_json"], [13, 2, 1, "", "to_dict"], [13, 2, 1, "", "to_json"], [13, 3, 1, "", "wavelength"], [13, 3, 1, "", "width"]], "cuvis_ai.data.cocolabels.Image.Meta": [[13, 3, 1, "", "all_fields"], [13, 3, 1, "", "auto_assign_tags"], [13, 2, 1, "", "bind_to"], [13, 3, 1, "", "debug_enabled"], [13, 3, 1, "", "fields_to_merge"], [13, 3, 1, "", "json_key_to_field"], [13, 3, 1, "", "key_transform_with_dump"], [13, 3, 1, "", "key_transform_with_load"], [13, 3, 1, "", "marshal_date_time_as"], [13, 3, 1, "", "raise_on_unknown_json_key"], [13, 3, 1, "", "recursive"], [13, 3, 1, "", "recursive_classes"], [13, 3, 1, "", "skip_defaults"], [13, 3, 1, "", "skip_defaults_if"], [13, 3, 1, "", "skip_if"], [13, 3, 1, "", "tag"], [13, 3, 1, "", "tag_key"], [13, 3, 1, "", "v1"], [13, 3, 1, "", "v1_debug"], [13, 3, 1, "", "v1_field_to_alias"], [13, 3, 1, "", "v1_key_case"], [13, 3, 1, "", "v1_on_unknown_key"], [13, 3, 1, "", "v1_unsafe_parse_dataclass_in_union"]], "cuvis_ai.data.cocolabels.Info": [[14, 1, 1, "", "Meta"], [14, 2, 1, "", "__init__"], [14, 3, 1, "", "contributor"], [14, 3, 1, "", "date_created"], [14, 3, 1, "", "description"], [14, 2, 1, "", "from_dict"], [14, 2, 1, "", "from_json"], [14, 2, 1, "", "from_list"], [14, 2, 1, "", "list_to_json"], [14, 2, 1, "", "to_dict"], [14, 2, 1, "", "to_json"], [14, 3, 1, "", "url"], [14, 3, 1, "", "version"]], "cuvis_ai.data.cocolabels.Info.Meta": [[14, 3, 1, "", "all_fields"], [14, 3, 1, "", "auto_assign_tags"], [14, 2, 1, "", "bind_to"], [14, 3, 1, "", "debug_enabled"], [14, 3, 1, "", "fields_to_merge"], [14, 3, 1, "", "json_key_to_field"], [14, 3, 1, "", "key_transform_with_dump"], [14, 3, 1, "", "key_transform_with_load"], [14, 3, 1, "", "marshal_date_time_as"], [14, 3, 1, "", "raise_on_unknown_json_key"], [14, 3, 1, "", "recursive"], [14, 3, 1, "", "recursive_classes"], [14, 3, 1, "", "skip_defaults"], [14, 3, 1, "", "skip_defaults_if"], [14, 3, 1, "", "skip_if"], [14, 3, 1, "", "tag"], [14, 3, 1, "", "tag_key"], [14, 3, 1, "", "v1"], [14, 3, 1, "", "v1_debug"], [14, 3, 1, "", "v1_field_to_alias"], [14, 3, 1, "", "v1_key_case"], [14, 3, 1, "", "v1_on_unknown_key"], [14, 3, 1, "", "v1_unsafe_parse_dataclass_in_union"]], "cuvis_ai.data.cocolabels.License": [[15, 1, 1, "", "Meta"], [15, 2, 1, "", "__init__"], [15, 2, 1, "", "from_dict"], [15, 2, 1, "", "from_json"], [15, 2, 1, "", "from_list"], [15, 3, 1, "", "id"], [15, 2, 1, "", "list_to_json"], [15, 3, 1, "", "name"], [15, 2, 1, "", "to_dict"], [15, 2, 1, "", "to_json"], [15, 3, 1, "", "url"]], "cuvis_ai.data.cocolabels.License.Meta": [[15, 3, 1, "", "all_fields"], [15, 3, 1, "", "auto_assign_tags"], [15, 2, 1, "", "bind_to"], [15, 3, 1, "", "debug_enabled"], [15, 3, 1, "", "fields_to_merge"], [15, 3, 1, "", "json_key_to_field"], [15, 3, 1, "", "key_transform_with_dump"], [15, 3, 1, "", "key_transform_with_load"], [15, 3, 1, "", "marshal_date_time_as"], [15, 3, 1, "", "raise_on_unknown_json_key"], [15, 3, 1, "", "recursive"], [15, 3, 1, "", "recursive_classes"], [15, 3, 1, "", "skip_defaults"], [15, 3, 1, "", "skip_defaults_if"], [15, 3, 1, "", "skip_if"], [15, 3, 1, "", "tag"], [15, 3, 1, "", "tag_key"], [15, 3, 1, "", "v1"], [15, 3, 1, "", "v1_debug"], [15, 3, 1, "", "v1_field_to_alias"], [15, 3, 1, "", "v1_key_case"], [15, 3, 1, "", "v1_on_unknown_key"], [15, 3, 1, "", "v1_unsafe_parse_dataclass_in_union"]], "cuvis_ai.data.cocolabels.QueryableList": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "where"]], "cuvis_ai.data.metadata": [[19, 1, 1, "", "Metadata"], [20, 5, 1, "", "get_meta_from_mesu"], [21, 5, 1, "", "get_meta_from_path"], [22, 5, 1, "", "get_meta_from_session"]], "cuvis_ai.data.metadata.Metadata": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "asdict"], [19, 3, 1, "", "bit_depth"], [19, 2, 1, "", "dataclass"], [19, 2, 1, "", "dict"], [19, 3, 1, "", "flags"], [19, 3, 1, "", "framerate"], [19, 2, 1, "", "from_yaml"], [19, 2, 1, "", "from_yaml_file"], [19, 3, 1, "", "integration_time_us"], [19, 2, 1, "", "list_to_yaml"], [19, 3, 1, "", "name"], [19, 3, 1, "", "processing_mode"], [19, 3, 1, "", "references"], [19, 3, 1, "", "shape"], [19, 2, 1, "", "to_yaml"], [19, 2, 1, "", "to_yaml_file"], [19, 3, 1, "", "wavelengths_nm"]], "cuvis_ai.data.utils_dataloader": [[24, 5, 1, "", "cuvis_collate"], [25, 5, 1, "", "get_dataloader_from_dataset"]], "cuvis_ai.deciders": [[27, 0, 0, "-", "base_decider"], [29, 0, 0, "-", "binary_decider"], [31, 0, 0, "-", "cascaded_decider"], [33, 0, 0, "-", "combining_decider"], [37, 0, 0, "-", "multiclass_decider"]], "cuvis_ai.deciders.base_decider": [[28, 1, 1, "", "BaseDecider"]], "cuvis_ai.deciders.base_decider.BaseDecider": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "check_input_dim"], [28, 2, 1, "", "check_output_dim"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "forward"], [28, 2, 1, "", "get_fit_requested_meta"], [28, 2, 1, "", "get_forward_requested_meta"], [28, 4, 1, "", "input_dim"], [28, 2, 1, "", "load"], [28, 4, 1, "", "output_dim"], [28, 2, 1, "", "serialize"], [28, 2, 1, "", "set_fit_meta_request"], [28, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.deciders.binary_decider": [[30, 1, 1, "", "BinaryDecider"]], "cuvis_ai.deciders.binary_decider.BinaryDecider": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "check_input_dim"], [30, 2, 1, "", "check_output_dim"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "forward"], [30, 2, 1, "", "get_fit_requested_meta"], [30, 2, 1, "", "get_forward_requested_meta"], [30, 4, 1, "", "input_dim"], [30, 2, 1, "", "load"], [30, 4, 1, "", "output_dim"], [30, 2, 1, "", "serialize"], [30, 2, 1, "", "set_fit_meta_request"], [30, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.deciders.cascaded_decider": [[32, 1, 1, "", "Cascaded"]], "cuvis_ai.deciders.cascaded_decider.Cascaded": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "check_input_dim"], [32, 2, 1, "", "check_output_dim"], [32, 2, 1, "", "fit"], [32, 2, 1, "", "forward"], [32, 2, 1, "", "get_fit_requested_meta"], [32, 2, 1, "", "get_forward_requested_meta"], [32, 4, 1, "", "input_dim"], [32, 2, 1, "", "load"], [32, 4, 1, "", "output_dim"], [32, 2, 1, "", "serialize"], [32, 2, 1, "", "set_fit_meta_request"], [32, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.deciders.combining_decider": [[34, 1, 1, "", "CombiningDecider"], [35, 5, 1, "", "all_agree"], [36, 5, 1, "", "at_least_n_agree"]], "cuvis_ai.deciders.combining_decider.CombiningDecider": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "check_input_dim"], [34, 2, 1, "", "check_output_dim"], [34, 2, 1, "", "fit"], [34, 2, 1, "", "forward"], [34, 2, 1, "", "get_fit_requested_meta"], [34, 2, 1, "", "get_forward_requested_meta"], [34, 4, 1, "", "input_dim"], [34, 2, 1, "", "load"], [34, 4, 1, "", "output_dim"], [34, 2, 1, "", "serialize"], [34, 2, 1, "", "set_fit_meta_request"], [34, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.deciders.multiclass_decider": [[38, 1, 1, "", "MultiClassDecider"]], "cuvis_ai.deciders.multiclass_decider.MultiClassDecider": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "check_input_dim"], [38, 2, 1, "", "check_output_dim"], [38, 2, 1, "", "fit"], [38, 2, 1, "", "forward"], [38, 2, 1, "", "get_fit_requested_meta"], [38, 2, 1, "", "get_forward_requested_meta"], [38, 4, 1, "", "input_dim"], [38, 2, 1, "", "load"], [38, 4, 1, "", "output_dim"], [38, 2, 1, "", "serialize"], [38, 2, 1, "", "set_fit_meta_request"], [38, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.distance": [[40, 0, 0, "-", "distance"]], "cuvis_ai.distance.distance": [[41, 1, 1, "", "AbstractDistance"], [42, 1, 1, "", "Canberra"], [43, 1, 1, "", "ECS"], [44, 1, 1, "", "Euclidean"], [45, 1, 1, "", "GFC"], [46, 1, 1, "", "Manhattan"], [47, 1, 1, "", "Minkowski"], [48, 1, 1, "", "SpectralAngle"]], "cuvis_ai.distance.distance.AbstractDistance": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "check_input_dim"], [41, 2, 1, "", "check_output_dim"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "forward"], [41, 2, 1, "", "get_fit_requested_meta"], [41, 2, 1, "", "get_forward_requested_meta"], [41, 4, 1, "", "input_dim"], [41, 2, 1, "", "load"], [41, 4, 1, "", "output_dim"], [41, 2, 1, "", "score"], [41, 2, 1, "", "serialize"], [41, 2, 1, "", "set_fit_meta_request"], [41, 2, 1, "", "set_forward_meta_request"], [41, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Canberra": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "check_input_dim"], [42, 2, 1, "", "check_output_dim"], [42, 2, 1, "", "fit"], [42, 2, 1, "", "forward"], [42, 2, 1, "", "get_fit_requested_meta"], [42, 2, 1, "", "get_forward_requested_meta"], [42, 4, 1, "", "input_dim"], [42, 2, 1, "", "load"], [42, 4, 1, "", "output_dim"], [42, 2, 1, "", "score"], [42, 2, 1, "", "serialize"], [42, 2, 1, "", "set_fit_meta_request"], [42, 2, 1, "", "set_forward_meta_request"], [42, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.ECS": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "check_input_dim"], [43, 2, 1, "", "check_output_dim"], [43, 2, 1, "", "fit"], [43, 2, 1, "", "forward"], [43, 2, 1, "", "get_fit_requested_meta"], [43, 2, 1, "", "get_forward_requested_meta"], [43, 4, 1, "", "input_dim"], [43, 2, 1, "", "load"], [43, 4, 1, "", "output_dim"], [43, 2, 1, "", "score"], [43, 2, 1, "", "serialize"], [43, 2, 1, "", "set_fit_meta_request"], [43, 2, 1, "", "set_forward_meta_request"], [43, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Euclidean": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "check_input_dim"], [44, 2, 1, "", "check_output_dim"], [44, 2, 1, "", "fit"], [44, 2, 1, "", "forward"], [44, 2, 1, "", "get_fit_requested_meta"], [44, 2, 1, "", "get_forward_requested_meta"], [44, 4, 1, "", "input_dim"], [44, 2, 1, "", "load"], [44, 4, 1, "", "output_dim"], [44, 2, 1, "", "score"], [44, 2, 1, "", "serialize"], [44, 2, 1, "", "set_fit_meta_request"], [44, 2, 1, "", "set_forward_meta_request"], [44, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.GFC": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "check_input_dim"], [45, 2, 1, "", "check_output_dim"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "forward"], [45, 2, 1, "", "get_fit_requested_meta"], [45, 2, 1, "", "get_forward_requested_meta"], [45, 4, 1, "", "input_dim"], [45, 2, 1, "", "load"], [45, 4, 1, "", "output_dim"], [45, 2, 1, "", "score"], [45, 2, 1, "", "serialize"], [45, 2, 1, "", "set_fit_meta_request"], [45, 2, 1, "", "set_forward_meta_request"], [45, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Manhattan": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "check_input_dim"], [46, 2, 1, "", "check_output_dim"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "forward"], [46, 2, 1, "", "get_fit_requested_meta"], [46, 2, 1, "", "get_forward_requested_meta"], [46, 4, 1, "", "input_dim"], [46, 2, 1, "", "load"], [46, 4, 1, "", "output_dim"], [46, 2, 1, "", "score"], [46, 2, 1, "", "serialize"], [46, 2, 1, "", "set_fit_meta_request"], [46, 2, 1, "", "set_forward_meta_request"], [46, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Minkowski": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "check_input_dim"], [47, 2, 1, "", "check_output_dim"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "forward"], [47, 2, 1, "", "get_fit_requested_meta"], [47, 2, 1, "", "get_forward_requested_meta"], [47, 4, 1, "", "input_dim"], [47, 2, 1, "", "load"], [47, 4, 1, "", "output_dim"], [47, 2, 1, "", "score"], [47, 2, 1, "", "serialize"], [47, 2, 1, "", "set_fit_meta_request"], [47, 2, 1, "", "set_forward_meta_request"], [47, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.SpectralAngle": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "check_input_dim"], [48, 2, 1, "", "check_output_dim"], [48, 2, 1, "", "fit"], [48, 2, 1, "", "forward"], [48, 2, 1, "", "get_fit_requested_meta"], [48, 2, 1, "", "get_forward_requested_meta"], [48, 4, 1, "", "input_dim"], [48, 2, 1, "", "load"], [48, 4, 1, "", "output_dim"], [48, 2, 1, "", "score"], [48, 2, 1, "", "serialize"], [48, 2, 1, "", "set_fit_meta_request"], [48, 2, 1, "", "set_forward_meta_request"], [48, 2, 1, "", "spectra_to_array"]], "cuvis_ai.node": [[50, 0, 0, "-", "Consumers"], [53, 0, 0, "-", "base"], [58, 0, 0, "-", "node"], [60, 0, 0, "-", "sklearn"], [62, 0, 0, "-", "skorch"], [64, 0, 0, "-", "torch"], [65, 0, 0, "-", "torchvision"], [66, 0, 0, "-", "wrap"]], "cuvis_ai.node.Consumers": [[51, 1, 1, "", "CubeConsumer"], [52, 1, 1, "", "LabelConsumer"]], "cuvis_ai.node.Consumers.CubeConsumer": [[51, 2, 1, "", "__init__"]], "cuvis_ai.node.Consumers.LabelConsumer": [[52, 2, 1, "", "__init__"]], "cuvis_ai.node.base": [[54, 1, 1, "", "BaseSupervised"], [55, 1, 1, "", "BaseTransformation"], [56, 1, 1, "", "BaseUnsupervised"], [57, 1, 1, "", "Preprocessor"]], "cuvis_ai.node.base.BaseSupervised": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "forward"]], "cuvis_ai.node.base.BaseTransformation": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "forward"]], "cuvis_ai.node.base.BaseUnsupervised": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "fit"], [56, 2, 1, "", "forward"]], "cuvis_ai.node.base.Preprocessor": [[57, 2, 1, "", "__init__"], [57, 2, 1, "", "fit"], [57, 2, 1, "", "forward"]], "cuvis_ai.node.node": [[59, 1, 1, "", "Node"]], "cuvis_ai.node.node.Node": [[59, 2, 1, "", "__init__"], [59, 2, 1, "", "check_input_dim"], [59, 2, 1, "", "check_output_dim"], [59, 2, 1, "", "forward"], [59, 2, 1, "", "get_fit_requested_meta"], [59, 2, 1, "", "get_forward_requested_meta"], [59, 4, 1, "", "input_dim"], [59, 2, 1, "", "load"], [59, 4, 1, "", "output_dim"], [59, 2, 1, "", "serialize"], [59, 2, 1, "", "set_fit_meta_request"], [59, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.node.sklearn": [[61, 1, 1, "", "SklearnWrapped"]], "cuvis_ai.node.sklearn.SklearnWrapped": [[61, 2, 1, "", "__init__"]], "cuvis_ai.node.skorch": [[63, 1, 1, "", "SkorchWrapped"]], "cuvis_ai.node.skorch.SkorchWrapped": [[63, 2, 1, "", "__init__"]], "cuvis_ai.node.wrap": [[67, 5, 1, "", "make_node"]], "cuvis_ai.pipeline": [[69, 0, 0, "-", "executor"], [72, 0, 0, "-", "graph"], [74, 0, 0, "-", "meta_routing"], [80, 0, 0, "-", "validator"]], "cuvis_ai.pipeline.executor": [[70, 1, 1, "", "HummingBirdExecutor"], [71, 1, 1, "", "MemoryExecutor"]], "cuvis_ai.pipeline.executor.HummingBirdExecutor": [[70, 2, 1, "", "__init__"]], "cuvis_ai.pipeline.executor.MemoryExecutor": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "fit"], [71, 2, 1, "", "fit_node"], [71, 2, 1, "", "forward"], [71, 2, 1, "", "forward_node"], [71, 2, 1, "", "train"]], "cuvis_ai.pipeline.graph": [[73, 1, 1, "", "Graph"]], "cuvis_ai.pipeline.graph.Graph": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "add_base_node"], [73, 2, 1, "", "add_edge"], [73, 2, 1, "", "add_node"], [73, 2, 1, "", "custom_copy"], [73, 2, 1, "", "delete_node"], [73, 2, 1, "", "fit"], [73, 2, 1, "", "forward"], [73, 2, 1, "", "freeze"], [73, 2, 1, "", "load"], [73, 2, 1, "", "load_from_file"], [73, 2, 1, "", "parameters"], [73, 2, 1, "", "save_to_file"], [73, 2, 1, "", "serialize"], [73, 4, 1, "", "torch_layers"], [73, 2, 1, "", "train"]], "cuvis_ai.pipeline.meta_routing": [[75, 5, 1, "", "get_fit_metadata"], [76, 5, 1, "", "get_forward_metadata"], [77, 5, 1, "", "get_requested_metadata"], [78, 5, 1, "", "get_route"], [79, 5, 1, "", "traverse"]], "cuvis_ai.pipeline.validator": [[81, 1, 1, "", "GraphValidator"], [82, 1, 1, "", "ShapeValidator"]], "cuvis_ai.pipeline.validator.GraphValidator": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "verify"]], "cuvis_ai.pipeline.validator.ShapeValidator": [[82, 2, 1, "", "__init__"], [82, 2, 1, "", "verify"]], "cuvis_ai.preprocessor": [[84, 0, 0, "-", "sklearn_wrapped"]], "cuvis_ai.preprocessor.sklearn_wrapped": [[85, 1, 1, "", "NMF"], [86, 1, 1, "", "PCA"]], "cuvis_ai.preprocessor.sklearn_wrapped.NMF": [[85, 2, 1, "", "__init__"], [85, 2, 1, "", "check_input_dim"], [85, 2, 1, "", "check_output_dim"], [85, 2, 1, "", "fit"], [85, 2, 1, "", "forward"], [85, 2, 1, "", "get_fit_requested_meta"], [85, 2, 1, "", "get_forward_requested_meta"], [85, 4, 1, "", "input_dim"], [85, 2, 1, "", "load"], [85, 4, 1, "", "output_dim"], [85, 2, 1, "", "serialize"], [85, 2, 1, "", "set_fit_meta_request"], [85, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.preprocessor.sklearn_wrapped.PCA": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "check_input_dim"], [86, 2, 1, "", "check_output_dim"], [86, 2, 1, "", "fit"], [86, 2, 1, "", "forward"], [86, 2, 1, "", "get_fit_requested_meta"], [86, 2, 1, "", "get_forward_requested_meta"], [86, 4, 1, "", "input_dim"], [86, 2, 1, "", "load"], [86, 4, 1, "", "output_dim"], [86, 2, 1, "", "serialize"], [86, 2, 1, "", "set_fit_meta_request"], [86, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.supervised": [[88, 0, 0, "-", "sklearn_wrapped"], [93, 0, 0, "-", "skorch_supervised"]], "cuvis_ai.supervised.sklearn_wrapped": [[89, 1, 1, "", "LDA"], [90, 1, 1, "", "MLP"], [91, 1, 1, "", "QDA"], [92, 1, 1, "", "SVM"]], "cuvis_ai.supervised.sklearn_wrapped.LDA": [[89, 2, 1, "", "__init__"], [89, 2, 1, "", "check_input_dim"], [89, 2, 1, "", "check_output_dim"], [89, 2, 1, "", "fit"], [89, 2, 1, "", "forward"], [89, 2, 1, "", "get_fit_requested_meta"], [89, 2, 1, "", "get_forward_requested_meta"], [89, 4, 1, "", "input_dim"], [89, 2, 1, "", "load"], [89, 4, 1, "", "output_dim"], [89, 2, 1, "", "serialize"], [89, 2, 1, "", "set_fit_meta_request"], [89, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.supervised.sklearn_wrapped.MLP": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "check_input_dim"], [90, 2, 1, "", "check_output_dim"], [90, 2, 1, "", "fit"], [90, 2, 1, "", "forward"], [90, 2, 1, "", "get_fit_requested_meta"], [90, 2, 1, "", "get_forward_requested_meta"], [90, 4, 1, "", "input_dim"], [90, 2, 1, "", "load"], [90, 4, 1, "", "output_dim"], [90, 2, 1, "", "serialize"], [90, 2, 1, "", "set_fit_meta_request"], [90, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.supervised.sklearn_wrapped.QDA": [[91, 2, 1, "", "__init__"], [91, 2, 1, "", "check_input_dim"], [91, 2, 1, "", "check_output_dim"], [91, 2, 1, "", "fit"], [91, 2, 1, "", "forward"], [91, 2, 1, "", "get_fit_requested_meta"], [91, 2, 1, "", "get_forward_requested_meta"], [91, 4, 1, "", "input_dim"], [91, 2, 1, "", "load"], [91, 4, 1, "", "output_dim"], [91, 2, 1, "", "serialize"], [91, 2, 1, "", "set_fit_meta_request"], [91, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.supervised.sklearn_wrapped.SVM": [[92, 2, 1, "", "__init__"], [92, 2, 1, "", "check_input_dim"], [92, 2, 1, "", "check_output_dim"], [92, 2, 1, "", "fit"], [92, 2, 1, "", "forward"], [92, 2, 1, "", "get_fit_requested_meta"], [92, 2, 1, "", "get_forward_requested_meta"], [92, 4, 1, "", "input_dim"], [92, 2, 1, "", "load"], [92, 4, 1, "", "output_dim"], [92, 2, 1, "", "serialize"], [92, 2, 1, "", "set_fit_meta_request"], [92, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.supervised.skorch_supervised": [[94, 1, 1, "", "SkorchSupervised"]], "cuvis_ai.supervised.skorch_supervised.SkorchSupervised": [[94, 2, 1, "", "__init__"], [94, 3, 1, "", "epochs"], [94, 2, 1, "", "fit"], [94, 2, 1, "", "forward"], [94, 2, 1, "", "load"], [94, 3, 1, "", "model"], [94, 3, 1, "", "model_args"], [94, 3, 1, "", "optimizer"], [94, 2, 1, "", "serialize"], [94, 3, 1, "", "verbose"]], "cuvis_ai.test": [[96, 0, 0, "-", "test_numpy_utils"], [98, 0, 0, "-", "test_pipeline_graph"], [99, 0, 0, "-", "test_preprocessor_structural"], [103, 0, 0, "-", "test_unsupervised_structural"]], "cuvis_ai.test.test_numpy_utils": [[97, 1, 1, "", "TestNumpyUtils"]], "cuvis_ai.test.test_numpy_utils.TestNumpyUtils": [[97, 2, 1, "", "__init__"], [97, 2, 1, "", "addClassCleanup"], [97, 2, 1, "", "addCleanup"], [97, 2, 1, "", "addTypeEqualityFunc"], [97, 2, 1, "", "assertAlmostEqual"], [97, 2, 1, "", "assertAlmostEquals"], [97, 2, 1, "", "assertCountEqual"], [97, 2, 1, "", "assertDictContainsSubset"], [97, 2, 1, "", "assertDictEqual"], [97, 2, 1, "", "assertEqual"], [97, 2, 1, "", "assertEquals"], [97, 2, 1, "", "assertFalse"], [97, 2, 1, "", "assertGreater"], [97, 2, 1, "", "assertGreaterEqual"], [97, 2, 1, "", "assertIn"], [97, 2, 1, "", "assertIs"], [97, 2, 1, "", "assertIsInstance"], [97, 2, 1, "", "assertIsNone"], [97, 2, 1, "", "assertIsNot"], [97, 2, 1, "", "assertIsNotNone"], [97, 2, 1, "", "assertLess"], [97, 2, 1, "", "assertLessEqual"], [97, 2, 1, "", "assertListEqual"], [97, 2, 1, "", "assertLogs"], [97, 2, 1, "", "assertMultiLineEqual"], [97, 2, 1, "", "assertNoLogs"], [97, 2, 1, "", "assertNotAlmostEqual"], [97, 2, 1, "", "assertNotAlmostEquals"], [97, 2, 1, "", "assertNotEqual"], [97, 2, 1, "", "assertNotEquals"], [97, 2, 1, "", "assertNotIn"], [97, 2, 1, "", "assertNotIsInstance"], [97, 2, 1, "", "assertNotRegex"], [97, 2, 1, "", "assertNotRegexpMatches"], [97, 2, 1, "", "assertRaises"], [97, 2, 1, "", "assertRaisesRegex"], [97, 2, 1, "", "assertRaisesRegexp"], [97, 2, 1, "", "assertRegex"], [97, 2, 1, "", "assertRegexpMatches"], [97, 2, 1, "", "assertSequenceEqual"], [97, 2, 1, "", "assertSetEqual"], [97, 2, 1, "", "assertTrue"], [97, 2, 1, "", "assertTupleEqual"], [97, 2, 1, "", "assertWarns"], [97, 2, 1, "", "assertWarnsRegex"], [97, 2, 1, "", "assert_"], [97, 2, 1, "", "countTestCases"], [97, 2, 1, "", "debug"], [97, 2, 1, "", "defaultTestResult"], [97, 2, 1, "", "doClassCleanups"], [97, 2, 1, "", "doCleanups"], [97, 2, 1, "", "fail"], [97, 2, 1, "", "failIf"], [97, 2, 1, "", "failIfAlmostEqual"], [97, 2, 1, "", "failIfEqual"], [97, 2, 1, "", "failUnless"], [97, 2, 1, "", "failUnlessAlmostEqual"], [97, 2, 1, "", "failUnlessEqual"], [97, 2, 1, "", "failUnlessRaises"], [97, 3, 1, "", "failureException"], [97, 2, 1, "", "id"], [97, 3, 1, "", "longMessage"], [97, 3, 1, "", "maxDiff"], [97, 2, 1, "", "run"], [97, 2, 1, "", "setUp"], [97, 2, 1, "", "setUpClass"], [97, 2, 1, "", "shortDescription"], [97, 2, 1, "", "skipTest"], [97, 2, 1, "", "subTest"], [97, 2, 1, "", "tearDown"], [97, 2, 1, "", "tearDownClass"], [97, 2, 1, "", "test_get_shape_without_batch"]], "cuvis_ai.test.test_preprocessor_structural": [[100, 1, 1, "", "TestPreprocessedNode"], [101, 1, 1, "", "TestUnsupervisedNMF"], [102, 1, 1, "", "TestUnsupervisedPCA"]], "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode": [[100, 2, 1, "", "__init__"], [100, 2, 1, "", "setUp"], [100, 2, 1, "", "test_correct_input_dim"], [100, 2, 1, "", "test_correct_output_dim"], [100, 2, 1, "", "test_incorrect_input_dim"], [100, 2, 1, "", "test_initialization"], [100, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF": [[101, 2, 1, "", "__init__"], [101, 2, 1, "", "addClassCleanup"], [101, 2, 1, "", "addCleanup"], [101, 2, 1, "", "addTypeEqualityFunc"], [101, 2, 1, "", "assertAlmostEqual"], [101, 2, 1, "", "assertAlmostEquals"], [101, 2, 1, "", "assertCountEqual"], [101, 2, 1, "", "assertDictContainsSubset"], [101, 2, 1, "", "assertDictEqual"], [101, 2, 1, "", "assertEqual"], [101, 2, 1, "", "assertEquals"], [101, 2, 1, "", "assertFalse"], [101, 2, 1, "", "assertGreater"], [101, 2, 1, "", "assertGreaterEqual"], [101, 2, 1, "", "assertIn"], [101, 2, 1, "", "assertIs"], [101, 2, 1, "", "assertIsInstance"], [101, 2, 1, "", "assertIsNone"], [101, 2, 1, "", "assertIsNot"], [101, 2, 1, "", "assertIsNotNone"], [101, 2, 1, "", "assertLess"], [101, 2, 1, "", "assertLessEqual"], [101, 2, 1, "", "assertListEqual"], [101, 2, 1, "", "assertLogs"], [101, 2, 1, "", "assertMultiLineEqual"], [101, 2, 1, "", "assertNoLogs"], [101, 2, 1, "", "assertNotAlmostEqual"], [101, 2, 1, "", "assertNotAlmostEquals"], [101, 2, 1, "", "assertNotEqual"], [101, 2, 1, "", "assertNotEquals"], [101, 2, 1, "", "assertNotIn"], [101, 2, 1, "", "assertNotIsInstance"], [101, 2, 1, "", "assertNotRegex"], [101, 2, 1, "", "assertNotRegexpMatches"], [101, 2, 1, "", "assertRaises"], [101, 2, 1, "", "assertRaisesRegex"], [101, 2, 1, "", "assertRaisesRegexp"], [101, 2, 1, "", "assertRegex"], [101, 2, 1, "", "assertRegexpMatches"], [101, 2, 1, "", "assertSequenceEqual"], [101, 2, 1, "", "assertSetEqual"], [101, 2, 1, "", "assertTrue"], [101, 2, 1, "", "assertTupleEqual"], [101, 2, 1, "", "assertWarns"], [101, 2, 1, "", "assertWarnsRegex"], [101, 2, 1, "", "assert_"], [101, 2, 1, "", "countTestCases"], [101, 2, 1, "", "debug"], [101, 2, 1, "", "defaultTestResult"], [101, 2, 1, "", "doClassCleanups"], [101, 2, 1, "", "doCleanups"], [101, 2, 1, "", "fail"], [101, 2, 1, "", "failIf"], [101, 2, 1, "", "failIfAlmostEqual"], [101, 2, 1, "", "failIfEqual"], [101, 2, 1, "", "failUnless"], [101, 2, 1, "", "failUnlessAlmostEqual"], [101, 2, 1, "", "failUnlessEqual"], [101, 2, 1, "", "failUnlessRaises"], [101, 3, 1, "", "failureException"], [101, 2, 1, "", "id"], [101, 3, 1, "", "longMessage"], [101, 3, 1, "", "maxDiff"], [101, 2, 1, "", "run"], [101, 2, 1, "", "setUp"], [101, 2, 1, "", "setUpClass"], [101, 2, 1, "", "shortDescription"], [101, 2, 1, "", "skipTest"], [101, 2, 1, "", "subTest"], [101, 2, 1, "", "tearDown"], [101, 2, 1, "", "tearDownClass"], [101, 2, 1, "", "test_correct_input_dim"], [101, 2, 1, "", "test_correct_output_dim"], [101, 2, 1, "", "test_incorrect_input_dim"], [101, 2, 1, "", "test_initialization"], [101, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA": [[102, 2, 1, "", "__init__"], [102, 2, 1, "", "addClassCleanup"], [102, 2, 1, "", "addCleanup"], [102, 2, 1, "", "addTypeEqualityFunc"], [102, 2, 1, "", "assertAlmostEqual"], [102, 2, 1, "", "assertAlmostEquals"], [102, 2, 1, "", "assertCountEqual"], [102, 2, 1, "", "assertDictContainsSubset"], [102, 2, 1, "", "assertDictEqual"], [102, 2, 1, "", "assertEqual"], [102, 2, 1, "", "assertEquals"], [102, 2, 1, "", "assertFalse"], [102, 2, 1, "", "assertGreater"], [102, 2, 1, "", "assertGreaterEqual"], [102, 2, 1, "", "assertIn"], [102, 2, 1, "", "assertIs"], [102, 2, 1, "", "assertIsInstance"], [102, 2, 1, "", "assertIsNone"], [102, 2, 1, "", "assertIsNot"], [102, 2, 1, "", "assertIsNotNone"], [102, 2, 1, "", "assertLess"], [102, 2, 1, "", "assertLessEqual"], [102, 2, 1, "", "assertListEqual"], [102, 2, 1, "", "assertLogs"], [102, 2, 1, "", "assertMultiLineEqual"], [102, 2, 1, "", "assertNoLogs"], [102, 2, 1, "", "assertNotAlmostEqual"], [102, 2, 1, "", "assertNotAlmostEquals"], [102, 2, 1, "", "assertNotEqual"], [102, 2, 1, "", "assertNotEquals"], [102, 2, 1, "", "assertNotIn"], [102, 2, 1, "", "assertNotIsInstance"], [102, 2, 1, "", "assertNotRegex"], [102, 2, 1, "", "assertNotRegexpMatches"], [102, 2, 1, "", "assertRaises"], [102, 2, 1, "", "assertRaisesRegex"], [102, 2, 1, "", "assertRaisesRegexp"], [102, 2, 1, "", "assertRegex"], [102, 2, 1, "", "assertRegexpMatches"], [102, 2, 1, "", "assertSequenceEqual"], [102, 2, 1, "", "assertSetEqual"], [102, 2, 1, "", "assertTrue"], [102, 2, 1, "", "assertTupleEqual"], [102, 2, 1, "", "assertWarns"], [102, 2, 1, "", "assertWarnsRegex"], [102, 2, 1, "", "assert_"], [102, 2, 1, "", "countTestCases"], [102, 2, 1, "", "debug"], [102, 2, 1, "", "defaultTestResult"], [102, 2, 1, "", "doClassCleanups"], [102, 2, 1, "", "doCleanups"], [102, 2, 1, "", "fail"], [102, 2, 1, "", "failIf"], [102, 2, 1, "", "failIfAlmostEqual"], [102, 2, 1, "", "failIfEqual"], [102, 2, 1, "", "failUnless"], [102, 2, 1, "", "failUnlessAlmostEqual"], [102, 2, 1, "", "failUnlessEqual"], [102, 2, 1, "", "failUnlessRaises"], [102, 3, 1, "", "failureException"], [102, 2, 1, "", "id"], [102, 3, 1, "", "longMessage"], [102, 3, 1, "", "maxDiff"], [102, 2, 1, "", "run"], [102, 2, 1, "", "setUp"], [102, 2, 1, "", "setUpClass"], [102, 2, 1, "", "shortDescription"], [102, 2, 1, "", "skipTest"], [102, 2, 1, "", "subTest"], [102, 2, 1, "", "tearDown"], [102, 2, 1, "", "tearDownClass"], [102, 2, 1, "", "test_correct_input_dim"], [102, 2, 1, "", "test_correct_output_dim"], [102, 2, 1, "", "test_incorrect_input_dim"], [102, 2, 1, "", "test_initialization"], [102, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_unsupervised_structural": [[104, 1, 1, "", "TestUnsupervisedGMM"], [105, 1, 1, "", "TestUnsupervisedKMeans"], [106, 1, 1, "", "TestUnsupervisedNode"]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "addClassCleanup"], [104, 2, 1, "", "addCleanup"], [104, 2, 1, "", "addTypeEqualityFunc"], [104, 2, 1, "", "assertAlmostEqual"], [104, 2, 1, "", "assertAlmostEquals"], [104, 2, 1, "", "assertCountEqual"], [104, 2, 1, "", "assertDictContainsSubset"], [104, 2, 1, "", "assertDictEqual"], [104, 2, 1, "", "assertEqual"], [104, 2, 1, "", "assertEquals"], [104, 2, 1, "", "assertFalse"], [104, 2, 1, "", "assertGreater"], [104, 2, 1, "", "assertGreaterEqual"], [104, 2, 1, "", "assertIn"], [104, 2, 1, "", "assertIs"], [104, 2, 1, "", "assertIsInstance"], [104, 2, 1, "", "assertIsNone"], [104, 2, 1, "", "assertIsNot"], [104, 2, 1, "", "assertIsNotNone"], [104, 2, 1, "", "assertLess"], [104, 2, 1, "", "assertLessEqual"], [104, 2, 1, "", "assertListEqual"], [104, 2, 1, "", "assertLogs"], [104, 2, 1, "", "assertMultiLineEqual"], [104, 2, 1, "", "assertNoLogs"], [104, 2, 1, "", "assertNotAlmostEqual"], [104, 2, 1, "", "assertNotAlmostEquals"], [104, 2, 1, "", "assertNotEqual"], [104, 2, 1, "", "assertNotEquals"], [104, 2, 1, "", "assertNotIn"], [104, 2, 1, "", "assertNotIsInstance"], [104, 2, 1, "", "assertNotRegex"], [104, 2, 1, "", "assertNotRegexpMatches"], [104, 2, 1, "", "assertRaises"], [104, 2, 1, "", "assertRaisesRegex"], [104, 2, 1, "", "assertRaisesRegexp"], [104, 2, 1, "", "assertRegex"], [104, 2, 1, "", "assertRegexpMatches"], [104, 2, 1, "", "assertSequenceEqual"], [104, 2, 1, "", "assertSetEqual"], [104, 2, 1, "", "assertTrue"], [104, 2, 1, "", "assertTupleEqual"], [104, 2, 1, "", "assertWarns"], [104, 2, 1, "", "assertWarnsRegex"], [104, 2, 1, "", "assert_"], [104, 2, 1, "", "countTestCases"], [104, 2, 1, "", "debug"], [104, 2, 1, "", "defaultTestResult"], [104, 2, 1, "", "doClassCleanups"], [104, 2, 1, "", "doCleanups"], [104, 2, 1, "", "fail"], [104, 2, 1, "", "failIf"], [104, 2, 1, "", "failIfAlmostEqual"], [104, 2, 1, "", "failIfEqual"], [104, 2, 1, "", "failUnless"], [104, 2, 1, "", "failUnlessAlmostEqual"], [104, 2, 1, "", "failUnlessEqual"], [104, 2, 1, "", "failUnlessRaises"], [104, 3, 1, "", "failureException"], [104, 2, 1, "", "id"], [104, 3, 1, "", "longMessage"], [104, 3, 1, "", "maxDiff"], [104, 2, 1, "", "run"], [104, 2, 1, "", "setUp"], [104, 2, 1, "", "setUpClass"], [104, 2, 1, "", "shortDescription"], [104, 2, 1, "", "skipTest"], [104, 2, 1, "", "subTest"], [104, 2, 1, "", "tearDown"], [104, 2, 1, "", "tearDownClass"], [104, 2, 1, "", "test_correct_input_dim"], [104, 2, 1, "", "test_correct_output_dim"], [104, 2, 1, "", "test_incorrect_input_dim"], [104, 2, 1, "", "test_initialization"], [104, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans": [[105, 2, 1, "", "__init__"], [105, 2, 1, "", "addClassCleanup"], [105, 2, 1, "", "addCleanup"], [105, 2, 1, "", "addTypeEqualityFunc"], [105, 2, 1, "", "assertAlmostEqual"], [105, 2, 1, "", "assertAlmostEquals"], [105, 2, 1, "", "assertCountEqual"], [105, 2, 1, "", "assertDictContainsSubset"], [105, 2, 1, "", "assertDictEqual"], [105, 2, 1, "", "assertEqual"], [105, 2, 1, "", "assertEquals"], [105, 2, 1, "", "assertFalse"], [105, 2, 1, "", "assertGreater"], [105, 2, 1, "", "assertGreaterEqual"], [105, 2, 1, "", "assertIn"], [105, 2, 1, "", "assertIs"], [105, 2, 1, "", "assertIsInstance"], [105, 2, 1, "", "assertIsNone"], [105, 2, 1, "", "assertIsNot"], [105, 2, 1, "", "assertIsNotNone"], [105, 2, 1, "", "assertLess"], [105, 2, 1, "", "assertLessEqual"], [105, 2, 1, "", "assertListEqual"], [105, 2, 1, "", "assertLogs"], [105, 2, 1, "", "assertMultiLineEqual"], [105, 2, 1, "", "assertNoLogs"], [105, 2, 1, "", "assertNotAlmostEqual"], [105, 2, 1, "", "assertNotAlmostEquals"], [105, 2, 1, "", "assertNotEqual"], [105, 2, 1, "", "assertNotEquals"], [105, 2, 1, "", "assertNotIn"], [105, 2, 1, "", "assertNotIsInstance"], [105, 2, 1, "", "assertNotRegex"], [105, 2, 1, "", "assertNotRegexpMatches"], [105, 2, 1, "", "assertRaises"], [105, 2, 1, "", "assertRaisesRegex"], [105, 2, 1, "", "assertRaisesRegexp"], [105, 2, 1, "", "assertRegex"], [105, 2, 1, "", "assertRegexpMatches"], [105, 2, 1, "", "assertSequenceEqual"], [105, 2, 1, "", "assertSetEqual"], [105, 2, 1, "", "assertTrue"], [105, 2, 1, "", "assertTupleEqual"], [105, 2, 1, "", "assertWarns"], [105, 2, 1, "", "assertWarnsRegex"], [105, 2, 1, "", "assert_"], [105, 2, 1, "", "countTestCases"], [105, 2, 1, "", "debug"], [105, 2, 1, "", "defaultTestResult"], [105, 2, 1, "", "doClassCleanups"], [105, 2, 1, "", "doCleanups"], [105, 2, 1, "", "fail"], [105, 2, 1, "", "failIf"], [105, 2, 1, "", "failIfAlmostEqual"], [105, 2, 1, "", "failIfEqual"], [105, 2, 1, "", "failUnless"], [105, 2, 1, "", "failUnlessAlmostEqual"], [105, 2, 1, "", "failUnlessEqual"], [105, 2, 1, "", "failUnlessRaises"], [105, 3, 1, "", "failureException"], [105, 2, 1, "", "id"], [105, 3, 1, "", "longMessage"], [105, 3, 1, "", "maxDiff"], [105, 2, 1, "", "run"], [105, 2, 1, "", "setUp"], [105, 2, 1, "", "setUpClass"], [105, 2, 1, "", "shortDescription"], [105, 2, 1, "", "skipTest"], [105, 2, 1, "", "subTest"], [105, 2, 1, "", "tearDown"], [105, 2, 1, "", "tearDownClass"], [105, 2, 1, "", "test_correct_input_dim"], [105, 2, 1, "", "test_correct_output_dim"], [105, 2, 1, "", "test_incorrect_input_dim"], [105, 2, 1, "", "test_initialization"], [105, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode": [[106, 2, 1, "", "__init__"], [106, 2, 1, "", "setUp"], [106, 2, 1, "", "test_correct_input_dim"], [106, 2, 1, "", "test_correct_output_dim"], [106, 2, 1, "", "test_incorrect_input_dim"], [106, 2, 1, "", "test_initialization"], [106, 2, 1, "", "test_passthrough"]], "cuvis_ai.tv_transforms": [[108, 0, 0, "-", "Bandpass"], [112, 0, 0, "-", "MultiBandpass"], [116, 0, 0, "-", "NormalizeStdDev"], [120, 0, 0, "-", "NormalizeToFloat"], [124, 0, 0, "-", "WavelengthList"]], "cuvis_ai.tv_transforms.Bandpass": [[109, 3, 1, "", "call_super_init"], [110, 3, 1, "", "dump_patches"], [111, 3, 1, "", "training"]], "cuvis_ai.tv_transforms.MultiBandpass": [[113, 3, 1, "", "call_super_init"], [114, 3, 1, "", "dump_patches"], [115, 3, 1, "", "training"]], "cuvis_ai.tv_transforms.NormalizeStdDev": [[117, 3, 1, "", "call_super_init"], [118, 3, 1, "", "dump_patches"], [119, 3, 1, "", "training"]], "cuvis_ai.tv_transforms.NormalizeToFloat": [[121, 3, 1, "", "call_super_init"], [122, 3, 1, "", "dump_patches"], [123, 3, 1, "", "training"]], "cuvis_ai.unsupervised": [[126, 0, 0, "-", "sklearn_wrapped"]], "cuvis_ai.unsupervised.sklearn_wrapped": [[127, 1, 1, "", "GMM"], [128, 1, 1, "", "KMeans"], [129, 1, 1, "", "MeanShift"]], "cuvis_ai.unsupervised.sklearn_wrapped.GMM": [[127, 2, 1, "", "__init__"], [127, 2, 1, "", "check_input_dim"], [127, 2, 1, "", "check_output_dim"], [127, 2, 1, "", "fit"], [127, 2, 1, "", "forward"], [127, 2, 1, "", "get_fit_requested_meta"], [127, 2, 1, "", "get_forward_requested_meta"], [127, 4, 1, "", "input_dim"], [127, 2, 1, "", "load"], [127, 4, 1, "", "output_dim"], [127, 2, 1, "", "serialize"], [127, 2, 1, "", "set_fit_meta_request"], [127, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.unsupervised.sklearn_wrapped.KMeans": [[128, 2, 1, "", "__init__"], [128, 2, 1, "", "check_input_dim"], [128, 2, 1, "", "check_output_dim"], [128, 2, 1, "", "fit"], [128, 2, 1, "", "forward"], [128, 2, 1, "", "get_fit_requested_meta"], [128, 2, 1, "", "get_forward_requested_meta"], [128, 4, 1, "", "input_dim"], [128, 2, 1, "", "load"], [128, 4, 1, "", "output_dim"], [128, 2, 1, "", "serialize"], [128, 2, 1, "", "set_fit_meta_request"], [128, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift": [[129, 2, 1, "", "__init__"], [129, 2, 1, "", "check_input_dim"], [129, 2, 1, "", "check_output_dim"], [129, 2, 1, "", "fit"], [129, 2, 1, "", "forward"], [129, 2, 1, "", "get_fit_requested_meta"], [129, 2, 1, "", "get_forward_requested_meta"], [129, 4, 1, "", "input_dim"], [129, 2, 1, "", "load"], [129, 4, 1, "", "output_dim"], [129, 2, 1, "", "serialize"], [129, 2, 1, "", "set_fit_meta_request"], [129, 2, 1, "", "set_forward_meta_request"]], "cuvis_ai.utils": [[131, 0, 0, "-", "dependencies"], [134, 0, 0, "-", "dict"], [137, 0, 0, "-", "filesystem"], [139, 0, 0, "-", "nn_config"], [143, 0, 0, "-", "numpy"], [156, 0, 0, "-", "serializer"], [171, 0, 0, "-", "test"], [173, 0, 0, "-", "torch"], [179, 0, 0, "-", "visualize"]], "cuvis_ai.utils.dependencies": [[132, 5, 1, "", "get_installed_packages"], [133, 5, 1, "", "get_installed_packages_str"]], "cuvis_ai.utils.dict": [[135, 5, 1, "", "remove_prefix"], [136, 5, 1, "", "remove_prefix_str"]], "cuvis_ai.utils.filesystem": [[138, 5, 1, "", "change_working_dir"]], "cuvis_ai.utils.nn_config": [[140, 1, 1, "", "Adam"], [141, 1, 1, "", "Optimizer"], [142, 1, 1, "", "SGD"]], "cuvis_ai.utils.nn_config.Adam": [[140, 2, 1, "", "__init__"], [140, 3, 1, "", "alpha"], [140, 4, 1, "", "args"], [140, 3, 1, "", "beta_1"], [140, 3, 1, "", "beta_2"], [140, 3, 1, "", "epsilon"], [140, 3, 1, "", "lr"], [140, 4, 1, "", "name"], [140, 4, 1, "", "pytorch_args"], [140, 4, 1, "", "sklearn_args"]], "cuvis_ai.utils.nn_config.Optimizer": [[141, 2, 1, "", "__init__"], [141, 4, 1, "", "args"], [141, 4, 1, "", "name"], [141, 4, 1, "", "pytorch_args"], [141, 4, 1, "", "sklearn_args"]], "cuvis_ai.utils.nn_config.SGD": [[142, 2, 1, "", "__init__"], [142, 3, 1, "", "alpha"], [142, 4, 1, "", "args"], [142, 3, 1, "", "lr"], [142, 3, 1, "", "momentum"], [142, 4, 1, "", "name"], [142, 3, 1, "", "nesterov"], [142, 3, 1, "", "power_t"], [142, 4, 1, "", "pytorch_args"], [142, 4, 1, "", "sklearn_args"]], "cuvis_ai.utils.numpy": [[144, 5, 1, "", "binary_mask_to_rle"], [145, 5, 1, "", "check_array_shape"], [146, 5, 1, "", "flatten_batch_and_labels"], [147, 5, 1, "", "flatten_batch_and_spatial"], [148, 5, 1, "", "flatten_labels"], [149, 5, 1, "", "flatten_spatial"], [150, 5, 1, "", "gen_coco_labels"], [151, 5, 1, "", "get_shape_without_batch"], [152, 5, 1, "", "unflatten_batch_and_labels"], [153, 5, 1, "", "unflatten_batch_and_spatial"], [154, 5, 1, "", "unflatten_labels"], [155, 5, 1, "", "unflatten_spatial"]], "cuvis_ai.utils.serializer": [[157, 1, 1, "", "CuvisYamlDumper"], [158, 1, 1, "", "CuvisYamlLoader"], [159, 1, 1, "", "OldSerializer"], [160, 1, 1, "", "Serializer"], [161, 1, 1, "", "YamlSerializer"], [162, 5, 1, "", "numpy_array_binary_representer"], [163, 5, 1, "", "numpy_array_file_representer"], [164, 5, 1, "", "numpy_array_string_representer"], [165, 5, 1, "", "numpy_arrray_file_constructor"], [166, 5, 1, "", "numpy_arrray_string_constructor"], [167, 5, 1, "", "numpy_float32_constructor"], [168, 5, 1, "", "numpy_float32_representer"], [169, 5, 1, "", "numpy_float64_constructor"], [170, 5, 1, "", "numpy_float64_representer"]], "cuvis_ai.utils.serializer.CuvisYamlDumper": [[157, 3, 1, "", "ANCHOR_TEMPLATE"], [157, 3, 1, "", "DEFAULT_MAPPING_TAG"], [157, 3, 1, "", "DEFAULT_SCALAR_TAG"], [157, 3, 1, "", "DEFAULT_SEQUENCE_TAG"], [157, 3, 1, "", "DEFAULT_TAG_PREFIXES"], [157, 3, 1, "", "ESCAPE_REPLACEMENTS"], [157, 2, 1, "", "__init__"], [157, 2, 1, "", "add_implicit_resolver"], [157, 2, 1, "", "add_multi_representer"], [157, 2, 1, "", "add_path_resolver"], [157, 2, 1, "", "add_representer"], [157, 2, 1, "", "analyze_scalar"], [157, 2, 1, "", "anchor_node"], [157, 2, 1, "", "ascend_resolver"], [157, 2, 1, "", "check_empty_document"], [157, 2, 1, "", "check_empty_mapping"], [157, 2, 1, "", "check_empty_sequence"], [157, 2, 1, "", "check_resolver_prefix"], [157, 2, 1, "", "check_simple_key"], [157, 2, 1, "", "choose_scalar_style"], [157, 2, 1, "", "close"], [157, 2, 1, "", "descend_resolver"], [157, 2, 1, "", "determine_block_hints"], [157, 2, 1, "", "dispose"], [157, 2, 1, "", "emit"], [157, 2, 1, "", "expect_alias"], [157, 2, 1, "", "expect_block_mapping"], [157, 2, 1, "", "expect_block_mapping_key"], [157, 2, 1, "", "expect_block_mapping_simple_value"], [157, 2, 1, "", "expect_block_mapping_value"], [157, 2, 1, "", "expect_block_sequence"], [157, 2, 1, "", "expect_block_sequence_item"], [157, 2, 1, "", "expect_document_end"], [157, 2, 1, "", "expect_document_root"], [157, 2, 1, "", "expect_document_start"], [157, 2, 1, "", "expect_first_block_mapping_key"], [157, 2, 1, "", "expect_first_block_sequence_item"], [157, 2, 1, "", "expect_first_document_start"], [157, 2, 1, "", "expect_first_flow_mapping_key"], [157, 2, 1, "", "expect_first_flow_sequence_item"], [157, 2, 1, "", "expect_flow_mapping"], [157, 2, 1, "", "expect_flow_mapping_key"], [157, 2, 1, "", "expect_flow_mapping_simple_value"], [157, 2, 1, "", "expect_flow_mapping_value"], [157, 2, 1, "", "expect_flow_sequence"], [157, 2, 1, "", "expect_flow_sequence_item"], [157, 2, 1, "", "expect_node"], [157, 2, 1, "", "expect_nothing"], [157, 2, 1, "", "expect_scalar"], [157, 2, 1, "", "expect_stream_start"], [157, 2, 1, "", "flush_stream"], [157, 2, 1, "", "generate_anchor"], [157, 2, 1, "", "ignore_aliases"], [157, 2, 1, "", "increase_indent"], [157, 3, 1, "", "inf_value"], [157, 2, 1, "", "need_events"], [157, 2, 1, "", "need_more_events"], [157, 2, 1, "", "open"], [157, 2, 1, "", "prepare_anchor"], [157, 2, 1, "", "prepare_tag"], [157, 2, 1, "", "prepare_tag_handle"], [157, 2, 1, "", "prepare_tag_prefix"], [157, 2, 1, "", "prepare_version"], [157, 2, 1, "", "process_anchor"], [157, 2, 1, "", "process_scalar"], [157, 2, 1, "", "process_tag"], [157, 2, 1, "", "represent"], [157, 2, 1, "", "represent_binary"], [157, 2, 1, "", "represent_bool"], [157, 2, 1, "", "represent_data"], [157, 2, 1, "", "represent_date"], [157, 2, 1, "", "represent_datetime"], [157, 2, 1, "", "represent_dict"], [157, 2, 1, "", "represent_float"], [157, 2, 1, "", "represent_int"], [157, 2, 1, "", "represent_list"], [157, 2, 1, "", "represent_mapping"], [157, 2, 1, "", "represent_none"], [157, 2, 1, "", "represent_scalar"], [157, 2, 1, "", "represent_sequence"], [157, 2, 1, "", "represent_set"], [157, 2, 1, "", "represent_str"], [157, 2, 1, "", "represent_undefined"], [157, 2, 1, "", "represent_yaml_object"], [157, 2, 1, "", "resolve"], [157, 2, 1, "", "serialize"], [157, 2, 1, "", "serialize_node"], [157, 2, 1, "", "write_double_quoted"], [157, 2, 1, "", "write_folded"], [157, 2, 1, "", "write_indent"], [157, 2, 1, "", "write_indicator"], [157, 2, 1, "", "write_line_break"], [157, 2, 1, "", "write_literal"], [157, 2, 1, "", "write_plain"], [157, 2, 1, "", "write_single_quoted"], [157, 2, 1, "", "write_stream_end"], [157, 2, 1, "", "write_stream_start"], [157, 2, 1, "", "write_tag_directive"], [157, 2, 1, "", "write_version_directive"], [157, 3, 1, "", "yaml_implicit_resolvers"], [157, 3, 1, "", "yaml_multi_representers"], [157, 3, 1, "", "yaml_path_resolvers"], [157, 3, 1, "", "yaml_representers"]], "cuvis_ai.utils.serializer.CuvisYamlLoader": [[158, 3, 1, "", "DEFAULT_MAPPING_TAG"], [158, 3, 1, "", "DEFAULT_SCALAR_TAG"], [158, 3, 1, "", "DEFAULT_SEQUENCE_TAG"], [158, 3, 1, "", "DEFAULT_TAGS"], [158, 3, 1, "", "ESCAPE_CODES"], [158, 3, 1, "", "ESCAPE_REPLACEMENTS"], [158, 3, 1, "", "NON_PRINTABLE"], [158, 2, 1, "", "__init__"], [158, 2, 1, "", "add_constructor"], [158, 2, 1, "", "add_implicit_resolver"], [158, 2, 1, "", "add_indent"], [158, 2, 1, "", "add_multi_constructor"], [158, 2, 1, "", "add_path_resolver"], [158, 2, 1, "", "ascend_resolver"], [158, 3, 1, "", "bool_values"], [158, 2, 1, "", "check_block_entry"], [158, 2, 1, "", "check_data"], [158, 2, 1, "", "check_directive"], [158, 2, 1, "", "check_document_end"], [158, 2, 1, "", "check_document_start"], [158, 2, 1, "", "check_event"], [158, 2, 1, "", "check_key"], [158, 2, 1, "", "check_node"], [158, 2, 1, "", "check_plain"], [158, 2, 1, "", "check_printable"], [158, 2, 1, "", "check_resolver_prefix"], [158, 2, 1, "", "check_state_key"], [158, 2, 1, "", "check_token"], [158, 2, 1, "", "check_value"], [158, 2, 1, "", "compose_document"], [158, 2, 1, "", "compose_mapping_node"], [158, 2, 1, "", "compose_node"], [158, 2, 1, "", "compose_scalar_node"], [158, 2, 1, "", "compose_sequence_node"], [158, 2, 1, "", "construct_document"], [158, 2, 1, "", "construct_mapping"], [158, 2, 1, "", "construct_object"], [158, 2, 1, "", "construct_pairs"], [158, 2, 1, "", "construct_scalar"], [158, 2, 1, "", "construct_sequence"], [158, 2, 1, "", "construct_undefined"], [158, 2, 1, "", "construct_yaml_binary"], [158, 2, 1, "", "construct_yaml_bool"], [158, 2, 1, "", "construct_yaml_float"], [158, 2, 1, "", "construct_yaml_int"], [158, 2, 1, "", "construct_yaml_map"], [158, 2, 1, "", "construct_yaml_null"], [158, 2, 1, "", "construct_yaml_object"], [158, 2, 1, "", "construct_yaml_omap"], [158, 2, 1, "", "construct_yaml_pairs"], [158, 2, 1, "", "construct_yaml_seq"], [158, 2, 1, "", "construct_yaml_set"], [158, 2, 1, "", "construct_yaml_str"], [158, 2, 1, "", "construct_yaml_timestamp"], [158, 2, 1, "", "descend_resolver"], [158, 2, 1, "", "determine_encoding"], [158, 2, 1, "", "dispose"], [158, 2, 1, "", "fetch_alias"], [158, 2, 1, "", "fetch_anchor"], [158, 2, 1, "", "fetch_block_entry"], [158, 2, 1, "", "fetch_block_scalar"], [158, 2, 1, "", "fetch_directive"], [158, 2, 1, "", "fetch_document_end"], [158, 2, 1, "", "fetch_document_indicator"], [158, 2, 1, "", "fetch_document_start"], [158, 2, 1, "", "fetch_double"], [158, 2, 1, "", "fetch_flow_collection_end"], [158, 2, 1, "", "fetch_flow_collection_start"], [158, 2, 1, "", "fetch_flow_entry"], [158, 2, 1, "", "fetch_flow_mapping_end"], [158, 2, 1, "", "fetch_flow_mapping_start"], [158, 2, 1, "", "fetch_flow_scalar"], [158, 2, 1, "", "fetch_flow_sequence_end"], [158, 2, 1, "", "fetch_flow_sequence_start"], [158, 2, 1, "", "fetch_folded"], [158, 2, 1, "", "fetch_key"], [158, 2, 1, "", "fetch_literal"], [158, 2, 1, "", "fetch_more_tokens"], [158, 2, 1, "", "fetch_plain"], [158, 2, 1, "", "fetch_single"], [158, 2, 1, "", "fetch_stream_end"], [158, 2, 1, "", "fetch_stream_start"], [158, 2, 1, "", "fetch_tag"], [158, 2, 1, "", "fetch_value"], [158, 2, 1, "", "flatten_mapping"], [158, 2, 1, "", "forward"], [158, 2, 1, "", "get_data"], [158, 2, 1, "", "get_event"], [158, 2, 1, "", "get_mark"], [158, 2, 1, "", "get_node"], [158, 2, 1, "", "get_single_data"], [158, 2, 1, "", "get_single_node"], [158, 2, 1, "", "get_token"], [158, 3, 1, "", "inf_value"], [158, 3, 1, "", "nan_value"], [158, 2, 1, "", "need_more_tokens"], [158, 2, 1, "", "next_possible_simple_key"], [158, 2, 1, "", "parse_block_mapping_first_key"], [158, 2, 1, "", "parse_block_mapping_key"], [158, 2, 1, "", "parse_block_mapping_value"], [158, 2, 1, "", "parse_block_node"], [158, 2, 1, "", "parse_block_node_or_indentless_sequence"], [158, 2, 1, "", "parse_block_sequence_entry"], [158, 2, 1, "", "parse_block_sequence_first_entry"], [158, 2, 1, "", "parse_document_content"], [158, 2, 1, "", "parse_document_end"], [158, 2, 1, "", "parse_document_start"], [158, 2, 1, "", "parse_flow_mapping_empty_value"], [158, 2, 1, "", "parse_flow_mapping_first_key"], [158, 2, 1, "", "parse_flow_mapping_key"], [158, 2, 1, "", "parse_flow_mapping_value"], [158, 2, 1, "", "parse_flow_node"], [158, 2, 1, "", "parse_flow_sequence_entry"], [158, 2, 1, "", "parse_flow_sequence_entry_mapping_end"], [158, 2, 1, "", "parse_flow_sequence_entry_mapping_key"], [158, 2, 1, "", "parse_flow_sequence_entry_mapping_value"], [158, 2, 1, "", "parse_flow_sequence_first_entry"], [158, 2, 1, "", "parse_implicit_document_start"], [158, 2, 1, "", "parse_indentless_sequence_entry"], [158, 2, 1, "", "parse_node"], [158, 2, 1, "", "parse_stream_start"], [158, 2, 1, "", "peek"], [158, 2, 1, "", "peek_event"], [158, 2, 1, "", "peek_token"], [158, 2, 1, "", "prefix"], [158, 2, 1, "", "process_directives"], [158, 2, 1, "", "process_empty_scalar"], [158, 2, 1, "", "remove_possible_simple_key"], [158, 2, 1, "", "resolve"], [158, 2, 1, "", "save_possible_simple_key"], [158, 2, 1, "", "scan_anchor"], [158, 2, 1, "", "scan_block_scalar"], [158, 2, 1, "", "scan_block_scalar_breaks"], [158, 2, 1, "", "scan_block_scalar_ignored_line"], [158, 2, 1, "", "scan_block_scalar_indentation"], [158, 2, 1, "", "scan_block_scalar_indicators"], [158, 2, 1, "", "scan_directive"], [158, 2, 1, "", "scan_directive_ignored_line"], [158, 2, 1, "", "scan_directive_name"], [158, 2, 1, "", "scan_flow_scalar"], [158, 2, 1, "", "scan_flow_scalar_breaks"], [158, 2, 1, "", "scan_flow_scalar_non_spaces"], [158, 2, 1, "", "scan_flow_scalar_spaces"], [158, 2, 1, "", "scan_line_break"], [158, 2, 1, "", "scan_plain"], [158, 2, 1, "", "scan_plain_spaces"], [158, 2, 1, "", "scan_tag"], [158, 2, 1, "", "scan_tag_directive_handle"], [158, 2, 1, "", "scan_tag_directive_prefix"], [158, 2, 1, "", "scan_tag_directive_value"], [158, 2, 1, "", "scan_tag_handle"], [158, 2, 1, "", "scan_tag_uri"], [158, 2, 1, "", "scan_to_next_token"], [158, 2, 1, "", "scan_uri_escapes"], [158, 2, 1, "", "scan_yaml_directive_number"], [158, 2, 1, "", "scan_yaml_directive_value"], [158, 2, 1, "", "stale_possible_simple_keys"], [158, 3, 1, "", "timestamp_regexp"], [158, 2, 1, "", "unwind_indent"], [158, 2, 1, "", "update"], [158, 2, 1, "", "update_raw"], [158, 3, 1, "", "yaml_constructors"], [158, 3, 1, "", "yaml_implicit_resolvers"], [158, 3, 1, "", "yaml_multi_constructors"], [158, 3, 1, "", "yaml_path_resolvers"]], "cuvis_ai.utils.serializer.OldSerializer": [[159, 2, 1, "", "__init__"], [159, 2, 1, "", "load_node"], [159, 2, 1, "", "serialize_node"]], "cuvis_ai.utils.serializer.Serializer": [[160, 2, 1, "", "__init__"], [160, 2, 1, "", "load"], [160, 2, 1, "", "serialize"]], "cuvis_ai.utils.serializer.YamlSerializer": [[161, 2, 1, "", "__init__"], [161, 2, 1, "", "load"], [161, 2, 1, "", "serialize"]], "cuvis_ai.utils.test": [[172, 5, 1, "", "get_np_dummy_data"]], "cuvis_ai.utils.torch": [[174, 1, 1, "", "InputDimension"], [175, 5, 1, "", "extract_state_dict"], [176, 5, 1, "", "get_output_shape"], [177, 5, 1, "", "guess_input_dimensionalty"], [178, 5, 1, "", "guess_state_dict_format"]], "cuvis_ai.utils.torch.InputDimension": [[174, 3, 1, "", "One"], [174, 3, 1, "", "Three"], [174, 3, 1, "", "Two"], [174, 3, 1, "", "Unknown"], [174, 2, 1, "", "__init__"]], "cuvis_ai.utils.visualize": [[180, 5, 1, "", "visualize_features"], [181, 5, 1, "", "visualize_image"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function"}, "terms": {"": [10, 12, 13, 14, 15, 73, 97, 101, 102, 104, 105, 136], "0": [10, 25, 30, 71, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 140, 142, 157, 158], "0001": [85, 89, 90, 91, 128, 140, 142], "001": [90, 92, 127, 140, 142], "03d": 157, "06": 127, "08": [90, 140], "0b": [157, 158], "0x": [157, 158], "1": [10, 12, 13, 14, 15, 19, 25, 28, 30, 32, 34, 38, 59, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 157, 158, 174], "10": [86, 90, 94, 127], "100": [90, 127], "147": [97, 101, 102, 104, 105], "15000": 90, "1998": 45, "1_": [157, 158], "1d": 177, "1e": [90, 127, 140], "2": [10, 12, 13, 14, 15, 19, 41, 48, 157, 158, 174], "200": [85, 90, 92], "2002": [157, 158], "2d": 177, "3": [92, 97, 101, 102, 104, 105, 157, 158, 174], "300": [128, 129], "37": 45, "3d": 177, "4": [157, 158], "4096": 158, "5": [90, 142, 157, 158], "526": 19, "6": [45, 157, 158], "640": [97, 101, 102, 104, 105], "7": [97, 101, 102, 104, 105, 157, 158], "76990451": 144, "7_": [157, 158], "8": [128, 157, 158], "9": [90, 140, 142, 157, 158], "971": 45, "977": 45, "999": [90, 140], "9_": [157, 158], "9a": [157, 158], "A": [10, 12, 13, 14, 15, 16, 19, 45, 97, 101, 102, 104, 105], "At": [73, 97, 101, 102, 104, 105, 183], "For": [19, 97, 101, 102, 104, 105, 183, 185], "If": [10, 12, 13, 14, 15, 19, 28, 30, 32, 34, 38, 41, 59, 73, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 182], "In": [19, 183], "NO": [157, 158], "No": [41, 42, 43, 44, 45, 46, 47, 48, 157, 158], "ON": [157, 158], "On": [157, 158], "One": 174, "The": [10, 12, 13, 14, 15, 19, 28, 30, 34, 38, 97, 101, 102, 104, 105, 182], "There": 41, "To": [73, 184], "_": [157, 158], "__annotations__": 19, "__hash__": 19, "__init__": [3, 10, 11, 12, 13, 14, 15, 16, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 59, 61, 63, 70, 71, 73, 81, 82, 85, 86, 89, 90, 91, 92, 94, 97, 100, 101, 102, 104, 105, 106, 127, 128, 129, 140, 141, 142, 157, 158, 159, 160, 161, 174], "__match_args__": 19, "__repr__": 19, "__slots__": 19, "__tag__": [10, 12, 13, 14, 15], "_summary_": [56, 127, 128, 129], "abc": [28, 54, 56, 57, 59, 141, 160], "about": [97, 101, 102, 104, 105], "abstract": [28, 41, 54, 55, 56, 57, 59, 141, 160], "abstractdist": [42, 43, 44, 45, 46, 47, 48], "access": [10, 12, 13, 14, 15], "accomplish": 28, "accord": 48, "across": [10, 12, 13, 14, 15], "activ": 90, "ad": [19, 97, 101, 102, 104, 105], "adam": 90, "add": [73, 97, 101, 102, 104, 105], "add_base_nod": 73, "add_constructor": 158, "add_edg": 73, "add_implicit_resolv": [157, 158], "add_ind": 158, "add_multi_constructor": 158, "add_multi_represent": 157, "add_nod": 73, "add_path_resolv": [157, 158], "add_represent": 157, "addclasscleanup": [97, 101, 102, 104, 105], "addcleanup": [97, 101, 102, 104, 105], "addit": [19, 97, 101, 102, 104, 105], "addtypeequalityfunc": [97, 101, 102, 104, 105], "affect": [10, 12, 13, 14, 15], "after": [19, 97, 101, 102, 104, 105, 183], "against": [41, 42, 43, 44, 45, 46, 47, 48], "ai": [73, 183, 185], "algorithm": [41, 128, 182], "alia": [97, 101, 102, 104, 105], "all": [3, 10, 12, 13, 14, 15, 19, 34, 56, 71, 73, 97, 101, 102, 104, 105, 183], "all_agre": 34, "all_field": [10, 12, 13, 14, 15], "allow": [41, 97, 101, 102, 104, 105, 182, 183], "allow_unicod": 157, "almost": [97, 101, 102, 104, 105], "alpha": [90, 140, 142], "alpha_h": 85, "alpha_w": 85, "alreadi": [71, 73, 150, 182], "also": [10, 12, 13, 14, 15, 19, 34, 97, 101, 102, 104, 105], "an": [10, 12, 13, 14, 15, 19, 28, 41, 43, 59, 71, 73, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 174], "analyze_scalar": 157, "anchor": [157, 158], "anchor_nod": 157, "anchor_templ": 157, "andr\u00e9": 45, "angl": 48, "ani": [10, 12, 13, 14, 15, 16, 19, 28, 30, 32, 56, 127, 128, 129, 135], "annot": 11, "anoth": 183, "append": 150, "appli": [10, 12, 13, 14, 15, 19, 30, 34, 38, 45, 150], "applic": 182, "ar": [3, 10, 12, 13, 14, 15, 19, 30, 34, 41, 71, 73, 97, 101, 102, 104, 105, 182, 183], "archiv": 73, "area": 10, "arg": [34, 97, 101, 102, 104, 105, 140, 141, 142], "argument": [16, 97, 101, 102, 104, 105], "arrai": [24, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 57, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155], "ascend_resolv": [157, 158], "asdict": [10, 12, 13, 14, 15, 19], "assert": [10, 12, 13, 14, 15, 19, 97, 101, 102, 104, 105], "assert_": [97, 101, 102, 104, 105], "assertalmostequ": [97, 101, 102, 104, 105], "assertcountequ": [97, 101, 102, 104, 105], "assertdictcontainssubset": [97, 101, 102, 104, 105], "assertdictequ": [97, 101, 102, 104, 105], "assertequ": [97, 101, 102, 104, 105], "assertfals": [97, 101, 102, 104, 105], "assertgreat": [97, 101, 102, 104, 105], "assertgreaterequ": [97, 101, 102, 104, 105], "asserti": [97, 101, 102, 104, 105], "assertin": [97, 101, 102, 104, 105], "assertionerror": [97, 101, 102, 104, 105], "assertisinst": [97, 101, 102, 104, 105], "assertisnon": [97, 101, 102, 104, 105], "assertisnot": [97, 101, 102, 104, 105], "assertisnotnon": [97, 101, 102, 104, 105], "assertless": [97, 101, 102, 104, 105], "assertlessequ": [97, 101, 102, 104, 105], "assertlistequ": [97, 101, 102, 104, 105], "assertlog": [97, 101, 102, 104, 105], "assertmultilineequ": [97, 101, 102, 104, 105], "assertnolog": [97, 101, 102, 104, 105], "assertnotalmostequ": [97, 101, 102, 104, 105], "assertnotequ": [97, 101, 102, 104, 105], "assertnotin": [97, 101, 102, 104, 105], "assertnotisinst": [97, 101, 102, 104, 105], "assertnotregex": [97, 101, 102, 104, 105], "assertnotregexpmatch": [97, 101, 102, 104, 105], "assertrais": [97, 101, 102, 104, 105], "assertraisesregex": [97, 101, 102, 104, 105], "assertraisesregexp": [97, 101, 102, 104, 105], "assertregex": [97, 101, 102, 104, 105], "assertregexpmatch": [97, 101, 102, 104, 105], "assertsequenceequ": [97, 101, 102, 104, 105], "assertsetequ": [97, 101, 102, 104, 105], "asserttru": [97, 101, 102, 104, 105], "asserttupleequ": [97, 101, 102, 104, 105], "assertwarn": [97, 101, 102, 104, 105], "assertwarnsregex": [97, 101, 102, 104, 105], "assign": 19, "associ": [19, 71], "assum": 73, "at_least_n_agre": 34, "attribut": [5, 7, 10, 11, 12, 13, 14, 15, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 85, 86, 89, 90, 91, 92, 94, 97, 101, 102, 104, 105, 108, 112, 116, 120, 124, 127, 128, 129, 140, 141, 142, 157, 158, 174], "auto": [85, 86, 90, 128], "auto_assign_tag": [10, 12, 13, 14, 15], "automat": [19, 97, 101, 102, 104, 105], "auxiliari": 10, "b": [97, 101, 102, 104, 105, 157, 158], "backend": 73, "background": 150, "bad": 19, "bandwidth": 129, "bar": [97, 101, 102, 104, 105], "base": [3, 10, 11, 12, 13, 14, 15, 16, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 59, 61, 63, 70, 71, 73, 81, 82, 85, 86, 89, 90, 91, 92, 94, 97, 100, 101, 102, 104, 105, 106, 127, 128, 129, 140, 141, 142, 157, 158, 159, 160, 161, 174], "base_load": [10, 12, 13, 14, 15], "basedataset": 25, "basedecid": [30, 32, 34, 38], "basejsonwizardmeta": [10, 12, 13, 14, 15], "basesupervis": [89, 90, 91, 92, 94], "baseunsupervis": [127, 128, 129], "basi": [97, 101, 102, 104, 105], "basic": [97, 101, 102, 104, 105], "batch": 24, "batch_sampl": 25, "batch_siz": [25, 90], "bbox": 10, "been": [10, 12, 13, 14, 15, 71, 97, 101, 102, 104, 105], "befor": [3, 97, 101, 102, 104, 105], "behavior": 41, "being": [73, 158], "belong": 73, "below": [10, 12, 13, 14, 15], "beltr\u00e1n": 45, "bene": 48, "beta_1": [90, 140], "beta_2": [90, 140], "beta_loss": 85, "between": [48, 97, 101, 102, 104, 105], "bin_seed": 129, "binari": [30, 144, 158], "binary_mask": 144, "bind_to": [10, 12, 13, 14, 15], "bit": 19, "bit_depth": 19, "block": [97, 101, 102, 104, 105, 158], "bool": [10, 12, 13, 14, 15, 28, 30, 32, 34, 35, 36, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 77, 81, 85, 86, 89, 90, 91, 92, 94, 109, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 127, 128, 129, 142, 150, 157, 158], "bool_": 3, "bool_valu": 158, "boolean": 34, "both": [97, 101, 102, 104, 105, 183], "bound": 10, "box": 10, "break": 41, "break_ti": 92, "built": [10, 12, 13, 14, 15, 19], "byte": 157, "c": [10, 12, 13, 14, 15, 19, 92], "cach": [10, 12, 13, 14, 15], "cache_s": 92, "calcul": [19, 42, 44, 46, 48], "call": [41, 42, 43, 44, 45, 46, 47, 48, 71, 97, 101, 102, 104, 105, 158], "callabl": [3, 34, 36, 97, 101, 102, 104, 105], "camel": [10, 12, 13, 14, 15], "can": [10, 12, 13, 14, 15, 19, 41, 43, 97, 101, 102, 104, 105, 150, 183], "canon": 157, "case": [97, 101, 102, 104, 105], "category_id": 10, "caught": [97, 101, 102, 104, 105], "cd": 85, "channel": [19, 34, 38, 43], "channel_count": 34, "check": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129], "check_block_entri": 158, "check_data": 158, "check_direct": 158, "check_document_end": 158, "check_document_start": 158, "check_empty_docu": 157, "check_empty_map": 157, "check_empty_sequ": 157, "check_ev": 158, "check_input_dim": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129], "check_kei": 158, "check_nod": 158, "check_output_dim": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129], "check_plain": 158, "check_print": 158, "check_resolver_prefix": [157, 158], "check_simple_kei": 157, "check_state_kei": 158, "check_token": 158, "check_valu": 158, "child": [56, 73], "children": [97, 101, 102, 104, 105], "choic": 158, "choos": 38, "choose_scalar_styl": 157, "chosen": [34, 38], "citat": 45, "cl": [10, 12, 13, 14, 15, 97, 101, 102, 104, 105, 157, 158], "clarifi": 150, "class": [2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 72, 73, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 126, 127, 128, 129, 139, 140, 141, 142, 156, 157, 158, 159, 160, 161, 173, 174, 182, 183], "class_weight": 92, "classif": [30, 38], "classifi": [30, 34, 38, 56, 127, 128, 129], "classmethod": [10, 11, 12, 13, 14, 15, 19, 73, 97, 101, 102, 104, 105, 157, 158], "classvar": [10, 12, 13, 14, 15], "cleanup": [97, 101, 102, 104, 105], "close": 157, "cluster_al": 129, "cm": [97, 101, 102, 104, 105], "coco": [11, 150], "coco_url": 13, "code": [97, 101, 102, 104, 105], "coef0": 92, "coeffici": 45, "collate_fn": 25, "collect": [10, 12, 13, 14, 15, 19, 97, 101, 102, 104, 105], "column": [19, 158], "com": [144, 182], "compar": [41, 42, 43, 44, 45, 46, 47, 48, 97, 101, 102, 104, 105], "comparison": 19, "compil": [157, 158], "complet": [97, 101, 102, 104, 105], "complex128": 3, "complex64": 3, "compose_docu": 158, "compose_mapping_nod": 158, "compose_nod": 158, "compose_scalar_nod": 158, "compose_sequence_nod": 158, "compris": 38, "comput": 19, "concept": 182, "condit": [10, 12, 13, 14, 15, 16], "config": [10, 12, 13, 14, 15], "configur": [10, 12, 13, 14, 15], "connect": 73, "consid": [97, 101, 102, 104, 105], "consist": 43, "constant": 90, "construct": [42, 44, 45, 46, 47, 48], "construct_docu": 158, "construct_map": 158, "construct_object": 158, "construct_pair": 158, "construct_scalar": 158, "construct_sequ": 158, "construct_undefin": 158, "construct_yaml_binari": 158, "construct_yaml_bool": 158, "construct_yaml_float": 158, "construct_yaml_int": 158, "construct_yaml_map": 158, "construct_yaml_nul": 158, "construct_yaml_object": 158, "construct_yaml_omap": 158, "construct_yaml_pair": 158, "construct_yaml_seq": 158, "construct_yaml_set": 158, "construct_yaml_str": 158, "construct_yaml_timestamp": 158, "constructor": 158, "contain": [10, 12, 13, 14, 15, 19, 41, 42, 43, 44, 45, 46, 47, 48, 73, 97, 101, 102, 104, 105, 150], "content": 19, "context": [97, 101, 102, 104, 105], "contributor": 14, "control": 158, "convert": [3, 10, 12, 13, 14, 15, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 85, 86, 89, 90, 91, 92, 127, 128, 129, 144], "copi": [73, 86, 144], "copy_x": 128, "correctli": 150, "correspond": [97, 101, 102, 104, 105], "cosin": 48, "count": 157, "counter": [97, 101, 102, 104, 105], "counttestcas": [97, 101, 102, 104, 105], "covariance_estim": 89, "covariance_typ": 127, "creat": [10, 12, 13, 14, 15, 38, 73, 97, 101, 102, 104, 105, 158, 182], "creation": 19, "cu3": 19, "cube": [3, 19], "cubeconsum": [28, 41, 54, 55, 56, 57], "cumul": 43, "current": [3, 41, 73], "current_index": [157, 158], "current_nod": [157, 158], "custom": 34, "custom_copi": 73, "cuvi": [73, 183, 185], "cuvis_ai": 184, "cuvis_col": 25, "d": [10, 12, 13, 14, 15, 135], "d1": [97, 101, 102, 104, 105], "d2": [97, 101, 102, 104, 105], "dai": 158, "dark": 19, "data": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 59, 71, 73, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 157, 158, 160, 161, 162, 163, 164, 168, 170, 177, 180, 183], "data_dir": [73, 85, 86, 89, 90, 91, 92, 127, 128, 129, 160, 161], "data_typ": 157, "dataclass": [10, 12, 13, 14, 15, 19], "datacub": [42, 43, 44, 45, 46, 47, 48], "dataload": [71, 73], "datapoint": 30, "dataset": [19, 25], "datatyp": [3, 97, 101, 102, 104, 105], "date": 157, "date_captur": 13, "date_cr": 14, "datetim": 157, "datetimeto": [10, 12, 13, 14, 15], "daylight": 45, "dead": 19, "debug": [97, 101, 102, 104, 105], "debug_en": [10, 12, 13, 14, 15], "decid": 41, "decim": [97, 101, 102, 104, 105], "decis": [28, 30, 34, 35], "decision_function_shap": 92, "decod": [10, 12, 13, 14, 15, 19], "decoder_kwarg": [10, 12, 13, 14, 15, 19], "deconstruct": [97, 101, 102, 104, 105], "decor": [10, 12, 13, 14, 15, 67], "deem": [97, 101, 102, 104, 105], "deep": [158, 183], "default": [10, 12, 13, 14, 15, 19, 41, 42, 43, 44, 45, 46, 47, 48, 71, 73, 97, 101, 102, 104, 105, 150], "default_flow_styl": 157, "default_mapping_tag": [157, 158], "default_scalar_tag": [157, 158], "default_sequence_tag": [157, 158], "default_styl": 157, "default_tag": 158, "default_tag_prefix": 157, "defaulttestresult": [97, 101, 102, 104, 105], "defin": [19, 41, 42, 43, 44, 45, 46, 47, 48, 56, 73], "definit": 183, "degre": [47, 92], "delet": 73, "delete_nod": 73, "delta": [97, 101, 102, 104, 105], "depend": [28, 59, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129], "dependend": 19, "depth": [19, 157, 158], "descend_resolv": [157, 158], "describ": 19, "descript": [14, 97, 101, 102, 104, 105], "deseri": 158, "determin": [19, 97, 101, 102, 104, 105], "determine_block_hint": 157, "determine_encod": 158, "dict": [10, 12, 13, 14, 15, 19, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 70, 71, 73, 75, 76, 77, 79, 85, 86, 89, 90, 91, 92, 94, 127, 128, 129, 157, 159, 160, 161], "dict_factori": [10, 12, 13, 14, 15, 19], "dictionari": [10, 12, 13, 14, 15, 19, 41, 42, 43, 44, 45, 46, 47, 48, 97, 101, 102, 104, 105], "differ": [97, 101, 102, 104, 105, 183], "digit": [97, 101, 102, 104, 105], "digraph": [70, 71, 81], "dimens": [24, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129, 177], "dimension": 183, "dir_path": 138, "direct": 73, "directli": [10, 12, 13, 14, 15, 19], "directori": [30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 73], "disabl": [10, 12, 13, 14, 15], "dispos": [157, 158], "do": [73, 183], "do_someth": [97, 101, 102, 104, 105], "doclasscleanup": [97, 101, 102, 104, 105], "docleanup": [97, 101, 102, 104, 105], "docstr": [97, 101, 102, 104, 105], "doe": [73, 97, 101, 102, 104, 105, 182], "doubl": 158, "drop_last": 25, "dtype": 3, "ducktyp": [97, 101, 102, 104, 105], "dump": [10, 12, 13, 14, 15, 41, 42, 43, 44, 45, 46, 47, 48], "dumper": [10, 12, 13, 14, 15, 162, 163, 164, 168, 170], "dumpmeta": [10, 12, 13, 14, 15], "dunder": 19, "dure": 158, "e": [19, 157, 158, 183], "each": [10, 12, 13, 14, 15, 19, 24, 34, 41, 42, 43, 44, 45, 46, 47, 48], "early_stop": 90, "easi": [182, 183], "edg": 73, "ee": [157, 158], "effect": [97, 101, 102, 104, 105], "either": 19, "element": [97, 101, 102, 104, 105], "emit": [97, 101, 102, 104, 105, 157], "empti": [71, 180, 181], "enabl": [10, 12, 13, 14, 15], "enclos": [97, 101, 102, 104, 105], "encod": [10, 12, 13, 14, 15, 19, 157], "encoder_kwarg": [10, 12, 13, 14, 15, 19], "end": [97, 101, 102, 104, 105], "enforc": [97, 101, 102, 104, 105], "entri": 73, "entry_point": [70, 71], "enum": [174, 177], "enumer": 174, "environ": 184, "epoch": 94, "epsilon": [90, 140], "eq": 19, "equal": [30, 43, 97, 101, 102, 104, 105], "error": [71, 73, 97, 101, 102, 104, 105], "error_cod": [97, 101, 102, 104, 105], "escape_cod": 158, "escape_replac": [157, 158], "etc": 19, "euclidean": 43, "even": [97, 101, 102, 104, 105], "event": [73, 157], "everi": [41, 150], "exactli": [97, 101, 102, 104, 105], "examin": 19, "exampl": [10, 12, 13, 14, 15, 19, 97, 101, 102, 104, 105, 185], "except": [97, 101, 102, 104, 105], "exclud": [10, 12, 13, 14, 15], "execut": [97, 101, 102, 104, 105, 183], "exercis": [97, 101, 102, 104, 105], "exist": [73, 150, 182], "expect": [10, 12, 13, 14, 15, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 177], "expect_alia": 157, "expect_block_map": 157, "expect_block_mapping_kei": 157, "expect_block_mapping_simple_valu": 157, "expect_block_mapping_valu": 157, "expect_block_sequ": 157, "expect_block_sequence_item": 157, "expect_document_end": 157, "expect_document_root": 157, "expect_document_start": 157, "expect_first_block_mapping_kei": 157, "expect_first_block_sequence_item": 157, "expect_first_document_start": 157, "expect_first_flow_mapping_kei": 157, "expect_first_flow_sequence_item": 157, "expect_flow_map": 157, "expect_flow_mapping_kei": 157, "expect_flow_mapping_simple_valu": 157, "expect_flow_mapping_valu": 157, "expect_flow_sequ": 157, "expect_flow_sequence_item": 157, "expect_nod": 157, "expect_noth": 157, "expect_scalar": 157, "expect_stream_start": 157, "expected_except": [97, 101, 102, 104, 105], "expected_regex": [97, 101, 102, 104, 105], "expected_warn": [97, 101, 102, 104, 105], "explicit_end": 157, "explicit_start": 157, "exposur": 19, "expr": [97, 101, 102, 104, 105], "expr1": [97, 101, 102, 104, 105], "expr2": [97, 101, 102, 104, 105], "express": [97, 101, 102, 104, 105], "extra": [97, 101, 102, 104, 105], "extra_repr": 3, "extract": 19, "f": [157, 158], "f_": [157, 158], "fa": [157, 158], "factori": [10, 13, 94], "fail": [97, 101, 102, 104, 105], "failif": [97, 101, 102, 104, 105], "failifalmostequ": [97, 101, 102, 104, 105], "failifequ": [97, 101, 102, 104, 105], "failunless": [97, 101, 102, 104, 105], "failunlessalmostequ": [97, 101, 102, 104, 105], "failunlessequ": [97, 101, 102, 104, 105], "failunlessrais": [97, 101, 102, 104, 105], "failur": [97, 101, 102, 104, 105], "failureexcept": [97, 101, 102, 104, 105], "fals": [10, 12, 13, 14, 15, 19, 25, 30, 38, 71, 85, 86, 89, 90, 91, 92, 94, 97, 101, 102, 104, 105, 109, 110, 113, 114, 117, 118, 121, 122, 127, 128, 129, 135, 150, 157, 158], "fetch_alia": 158, "fetch_anchor": 158, "fetch_block_entri": 158, "fetch_block_scalar": 158, "fetch_direct": 158, "fetch_document_end": 158, "fetch_document_ind": 158, "fetch_document_start": 158, "fetch_doubl": 158, "fetch_flow_collection_end": 158, "fetch_flow_collection_start": 158, "fetch_flow_entri": 158, "fetch_flow_mapping_end": 158, "fetch_flow_mapping_start": 158, "fetch_flow_scalar": 158, "fetch_flow_sequence_end": 158, "fetch_flow_sequence_start": 158, "fetch_fold": 158, "fetch_kei": 158, "fetch_liter": 158, "fetch_more_token": 158, "fetch_plain": 158, "fetch_singl": 158, "fetch_stream_end": 158, "fetch_stream_start": 158, "fetch_tag": 158, "fetch_valu": 158, "field": [10, 12, 13, 14, 15, 16, 19, 24], "fields_to_merg": [10, 12, 13, 14, 15], "file": [19, 73, 150, 158], "file_nam": 13, "filenam": [19, 97, 101, 102, 104, 105, 161], "filepath": [19, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 73], "fileset": 19, "filter": [16, 97, 101, 102, 104, 105], "final": 28, "first": [73, 97, 101, 102, 104, 105, 157, 158, 177], "fit": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 54, 56, 57, 71, 73, 85, 86, 89, 90, 91, 92, 94, 127, 128, 129], "fit_nod": 71, "fixtur": [97, 101, 102, 104, 105], "flag": 19, "flatten": 177, "flatten_map": 158, "flickr_url": 13, "float": [10, 13, 19, 30, 140, 142, 157, 158], "float16": 3, "float32": [3, 157, 158], "float64": [3, 157, 158], "flow": [71, 73, 157], "flow_styl": 157, "flush_stream": 157, "follow": 56, "foo": [97, 101, 102, 104, 105], "form": 183, "format": [19, 28, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 175], "formula": 48, "forward": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 57, 59, 71, 73, 85, 86, 89, 90, 91, 92, 94, 127, 128, 129, 158], "forward_nod": 71, "found": [97, 101, 102, 104, 105], "frame": 19, "framer": 19, "framework": [182, 183], "freez": 73, "frobeniu": 85, "from": [19, 28, 30, 32, 34, 38, 59, 73, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 144, 150, 158, 182], "from_dict": [10, 12, 13, 14, 15], "from_json": [10, 12, 13, 14, 15], "from_list": [10, 12, 13, 14, 15], "from_path": 11, "from_yaml": 19, "from_yaml_fil": 19, "fromdict": [10, 12, 13, 14, 15], "frozen": 19, "frozenset": [10, 12, 13, 14, 15], "full": [3, 127], "function": [9, 10, 12, 13, 14, 15, 18, 19, 23, 25, 33, 41, 42, 43, 44, 45, 46, 47, 48, 66, 71, 74, 97, 101, 102, 104, 105, 131, 134, 137, 143, 156, 157, 158, 171, 173, 179, 182], "further": [97, 101, 102, 104, 105], "g": [19, 183], "gamma": 92, "garc\u00eda": 45, "gener": [56, 127, 128, 129, 150], "generate_anchor": 157, "get": [3, 41, 42, 43, 44, 45, 46, 47, 48, 73, 182, 185], "get_data": 158, "get_datatyp": 3, "get_ev": 158, "get_fit_requested_meta": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129], "get_forward_requested_meta": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129], "get_mark": 158, "get_nod": 158, "get_single_data": 158, "get_single_nod": 158, "get_token": 158, "getlogg": [97, 101, 102, 104, 105], "give": [97, 101, 102, 104, 105], "given": [10, 12, 13, 14, 15, 19, 38, 43, 71, 97, 101, 102, 104, 105], "global": [10, 12, 13, 14, 15], "goal": 182, "good": 45, "graph": [30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 70, 71, 81], "guess": 177, "ha": [10, 12, 13, 14, 15, 71, 97, 101, 102, 104, 105, 150], "handl": [97, 101, 102, 104, 105, 157], "handle_text": 157, "have": [73, 97, 101, 102, 104, 105], "hearth": 183, "height": [13, 43], "helper": 10, "here": [10, 12, 13, 14, 15, 34], "hern\u00e1ndez": 45, "hidden_layer_s": 90, "higher": [97, 101, 102, 104, 105], "highest": 38, "hook": [10, 12, 13, 14, 15, 97, 101, 102, 104, 105], "hour": 158, "how": 185, "http": 144, "i": [10, 12, 13, 14, 15, 19, 28, 30, 32, 34, 38, 59, 71, 73, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 182, 183], "id": [10, 12, 13, 15, 73, 97, 101, 102, 104, 105, 157], "identifi": [97, 101, 102, 104, 105], "ignor": 151, "ignore_alias": 157, "imag": [11, 41, 150], "image_id": [10, 11], "img": 150, "img_nam": 150, "immedi": [97, 101, 102, 104, 105], "implement": [41, 56, 97, 101, 102, 104, 105], "implicit": [157, 158], "import": [28, 30, 32, 34, 38, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129], "includ": [97, 101, 102, 104, 105], "increase_ind": 157, "indent": [157, 158], "indentless": 157, "indentless_sequ": 158, "index": [41, 42, 43, 44, 45, 46, 47, 48, 97, 101, 102, 104, 105, 157, 158], "indic": [38, 157, 177], "individu": 71, "inf": [157, 158], "inf_valu": [157, 158], "info": [11, 97, 101, 102, 104, 105], "inform": [19, 97, 101, 102, 104, 105, 182], "init": [19, 41, 42, 43, 44, 45, 46, 47, 48, 85, 128], "init_param": 127, "initi": [10, 12, 13, 14, 15, 41, 42, 43, 44, 45, 46, 47, 48, 56, 127, 128, 129, 158], "inner_modul": 159, "input": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 57, 59, 71, 85, 86, 89, 90, 91, 92, 127, 128, 129, 177, 183], "input_dim": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129], "input_shap": [82, 176], "inputdimens": 177, "inshap": 82, "inspect": [97, 101, 102, 104, 105, 177], "instal": 182, "instanc": [10, 12, 13, 14, 15, 19, 38, 97, 101, 102, 104, 105], "instead": [10, 12, 13, 14, 15, 19, 97, 101, 102, 104, 105, 182], "int": [10, 11, 12, 13, 14, 15, 19, 28, 34, 36, 38, 47, 59, 82, 94, 145, 157, 158], "int16": 3, "int32": 3, "int64": 3, "int8": 3, "integ": 150, "integr": 19, "integration_time_u": 19, "interfac": 182, "intermediari": 71, "introduct": 185, "invent": 182, "invok": [10, 12, 13, 14, 15, 97, 101, 102, 104, 105], "is_default": [10, 12, 13, 14, 15], "iscrowd": 10, "isinst": [97, 101, 102, 104, 105], "item": [16, 97, 101, 102, 104, 105], "iter": [10, 12, 13, 14, 15, 71, 73, 97, 101, 102, 104, 105], "iterated_pow": 86, "its": [97, 101, 102, 104, 105, 150, 183], "itself": 73, "j": 45, "json": [10, 12, 13, 14, 15, 150], "json_key_to_field": [10, 12, 13, 14, 15], "jsonserializ": [10, 12, 13, 14, 15], "jsonwizard": [10, 12, 13, 14, 15], "just": [97, 101, 102, 104, 105], "k": 128, "keep": [97, 101, 102, 104, 105], "keep_onli": 135, "kei": [19, 158], "kernel": 92, "key_transform": [10, 12, 13, 14, 15], "key_transform_with_dump": [10, 12, 13, 14, 15], "key_transform_with_load": [10, 12, 13, 14, 15], "keyact": [10, 12, 13, 14, 15], "keycas": [10, 12, 13, 14, 15], "keyword": [16, 19, 97, 101, 102, 104, 105], "kind": [157, 158], "kmean": 127, "known": 41, "kw_onli": 19, "kwarg": [10, 12, 13, 14, 15, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129], "l": [45, 157, 158], "l1": [42, 46], "l1_ratio": 85, "l2": 44, "label": [28, 32, 71, 150, 180, 183], "label_nam": 150, "labelconsum": 54, "larg": 48, "larger": 30, "layer": [73, 177], "learn": 183, "learning_r": 90, "learning_rate_init": 90, "least": 73, "length": [43, 71, 97, 101, 102, 104, 105, 158], "less": [97, 101, 102, 104, 105], "lettercas": [10, 12, 13, 14, 15], "level": [97, 101, 102, 104, 105], "licens": [11, 13], "lifo": [97, 101, 102, 104, 105], "like": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 57, 59, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 177, 182, 183], "likewis": [10, 12, 13, 14, 15], "line": [97, 101, 102, 104, 105], "line_break": 157, "linear": 45, "lineno": [97, 101, 102, 104, 105], "link": 19, "list": [10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 24, 41, 42, 43, 44, 45, 46, 47, 48, 71, 73, 78, 79, 97, 101, 102, 104, 105, 132, 150, 157, 159, 183], "list1": [97, 101, 102, 104, 105], "list2": [97, 101, 102, 104, 105], "list_of_dict": [10, 12, 13, 14, 15], "list_to_json": [10, 12, 13, 14, 15], "list_to_yaml": 19, "lloyd": 128, "load": [10, 12, 13, 14, 15, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 85, 86, 89, 90, 91, 92, 94, 127, 128, 129, 160, 161], "load_from_fil": 73, "load_nod": 159, "loader": [10, 12, 13, 14, 15, 165, 166, 167, 169], "loadmeta": [10, 12, 13, 14, 15], "locat": [34, 38, 73], "log": [97, 101, 102, 104, 105], "logger": [97, 101, 102, 104, 105], "logger_nam": [97, 101, 102, 104, 105], "logrecord": [97, 101, 102, 104, 105], "longmessag": [97, 101, 102, 104, 105], "look": [10, 12, 13, 14, 15, 19, 182, 185], "lr": [140, 142], "m": [71, 73, 184], "machin": 183, "mai": [19, 34], "main": [73, 161], "make": 28, "manag": [97, 101, 102, 104, 105], "map": [10, 12, 13, 14, 15, 19, 41, 42, 43, 44, 45, 46, 47, 48, 157, 158], "mapper": 48, "mark": [97, 101, 102, 104, 105, 158], "marshal_date_time_a": [10, 12, 13, 14, 15], "mask": [10, 144, 150], "mask_siz": 17, "match": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129], "match_arg": 19, "matrix": [34, 38], "max_fun": 90, "max_it": [85, 90, 92, 127, 128, 129], "maxdiff": [97, 101, 102, 104, 105], "maximum": 38, "mean": 128, "means_init": 127, "measur": [19, 20, 41, 45, 48, 97, 101, 102, 104, 105], "member": [97, 101, 102, 104, 105], "memori": 73, "merg": [157, 158], "messag": [97, 101, 102, 104, 105], "mesu": 20, "meta": [10, 12, 13, 14, 15, 19], "metadata": [41, 42, 43, 44, 45, 46, 47, 48, 71, 75, 76, 77], "method": [3, 10, 11, 12, 13, 14, 15, 16, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 59, 61, 63, 70, 71, 73, 81, 82, 85, 86, 89, 90, 91, 92, 94, 97, 100, 101, 102, 104, 105, 106, 127, 128, 129, 140, 141, 142, 157, 158, 159, 160, 161, 182], "methodnam": [97, 101, 102, 104, 105], "metric": 41, "microsecond": 19, "might": [41, 97, 101, 102, 104, 105], "min_bin_freq": 129, "minim": 38, "mismatch": [41, 42, 43, 44, 45, 46, 47, 48, 73], "miss": 19, "mode": 19, "model": [45, 73, 94, 176, 177], "model_arg": 94, "modifi": [10, 12, 13, 14, 15], "modul": [0, 1, 5, 7, 26, 39, 49, 67, 68, 73, 83, 87, 94, 95, 107, 108, 112, 116, 120, 124, 125, 130, 177, 183], "moment": 150, "momentum": [90, 142], "month": 158, "more": [97, 101, 102, 104, 105], "most": [97, 101, 102, 104, 105], "msg": [97, 101, 102, 104, 105], "much": 182, "multi": [38, 97, 101, 102, 104, 105], "multi_constructor": 158, "multipl": [19, 34, 41, 150], "must": [19, 43, 56, 73, 97, 101, 102, 104, 105], "my_str": [10, 12, 13, 14, 15], "myclass": [10, 12, 13, 14, 15], "mystr": [10, 12, 13, 14, 15], "n": [36, 38, 47, 157, 158], "n_cluster": 128, "n_compon": [85, 86, 89, 127], "n_init": [127, 128], "n_iter_no_chang": 90, "n_job": 129, "n_oversampl": 86, "name": [10, 12, 13, 14, 15, 19, 73, 78, 97, 101, 102, 104, 105, 140, 141, 142, 150, 158, 159], "nan": 158, "nan_valu": 158, "ndarrai": [17, 30, 32, 34, 35, 36, 38, 41, 42, 43, 44, 45, 46, 47, 48, 71, 73, 85, 86, 89, 90, 91, 92, 94, 127, 128, 129, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 180, 181], "need": [28, 30, 32, 34, 38, 59, 71, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 183], "need_ev": 157, "need_more_ev": 157, "need_more_token": 158, "need_whitespac": 157, "nest": [10, 12, 13, 14, 15], "nesterov": 142, "nesterovs_momentum": 90, "new": [10, 12, 13, 14, 15, 16, 19, 42, 43, 44, 45, 46, 47, 48, 56, 73], "newli": 158, "next_possible_simple_kei": 158, "nicer": [97, 101, 102, 104, 105], "niev": 45, "nm": 43, "nn": 94, "nn_config": 94, "node": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 70, 71, 73, 75, 76, 82, 85, 86, 89, 90, 91, 92, 127, 128, 129, 157, 158, 159, 165, 166, 167, 169, 182], "node2": 73, "non_print": 158, "none": [3, 10, 12, 13, 14, 15, 19, 25, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 71, 73, 81, 82, 85, 86, 89, 90, 91, 92, 94, 97, 101, 102, 104, 105, 127, 128, 129, 140, 142, 150, 157, 158, 159, 160, 161, 180], "nonetyp": 157, "norm": 47, "normal": [48, 97, 101, 102, 104, 105], "nota": 48, "note": [97, 101, 102, 104, 105], "notion": 41, "np": [3, 30, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 71], "null": [157, 158], "num_work": 25, "number": [19, 34, 38, 43, 97, 101, 102, 104, 105], "numer": 73, "numpi": [3, 19, 24, 30, 41, 42, 43, 44, 45, 46, 47, 48, 157, 158], "numpy_array_file_represent": 157, "numpy_arrray_file_constructor": 158, "numpy_arrray_string_constructor": 158, "numpy_float32_constructor": 158, "numpy_float32_represent": 157, "numpy_float64_constructor": 158, "numpy_float64_represent": 157, "o": [157, 158], "obj": [79, 97, 101, 102, 104, 105], "object": [10, 11, 12, 13, 14, 15, 16, 19, 28, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 59, 61, 63, 70, 71, 73, 81, 82, 85, 86, 89, 90, 91, 92, 97, 100, 101, 102, 104, 105, 106, 127, 128, 129, 150, 158, 159], "occlud": 150, "off": [157, 158], "often": 183, "omap": 158, "omit": [97, 101, 102, 104, 105], "one": [19, 73, 97, 101, 102, 104, 105, 183], "onli": [19, 97, 101, 102, 104, 105], "open": 157, "oper": [97, 101, 102, 104, 105], "optic": 45, "optim": [94, 97, 101, 102, 104, 105, 140, 142], "option": [10, 12, 13, 14, 15, 41, 42, 43, 44, 45, 46, 47, 48, 71, 73, 97, 101, 102, 104, 105], "order": [19, 47, 97, 101, 102, 104, 105], "org": [157, 158], "orig_shap": [152, 153, 154, 155], "other": [19, 97, 101, 102, 104, 105, 182], "out": [97, 101, 102, 104, 105], "outer": 24, "output": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 71, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 150], "output_dim": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129], "output_dir": 150, "output_format": 3, "output_lambda": 3, "outputformat": 3, "over": [10, 12, 13, 14, 15, 73], "overillumin": 19, "overwritten": 73, "ovr": 92, "own": [97, 101, 102, 104, 105, 150, 182], "p": [157, 158], "pair": 158, "param": [16, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 144, 150, 159], "paramet": [10, 12, 13, 14, 15, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 59, 71, 73, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129], "parameter": [41, 42, 43, 44, 45, 46, 47, 48], "params_list": 159, "parent": [73, 157, 158], "parse_block_mapping_first_kei": 158, "parse_block_mapping_kei": 158, "parse_block_mapping_valu": 158, "parse_block_nod": 158, "parse_block_node_or_indentless_sequ": 158, "parse_block_sequence_entri": 158, "parse_block_sequence_first_entri": 158, "parse_document_cont": 158, "parse_document_end": 158, "parse_document_start": 158, "parse_flow_mapping_empty_valu": 158, "parse_flow_mapping_first_kei": 158, "parse_flow_mapping_kei": 158, "parse_flow_mapping_valu": 158, "parse_flow_nod": 158, "parse_flow_sequence_entri": 158, "parse_flow_sequence_entry_mapping_end": 158, "parse_flow_sequence_entry_mapping_kei": 158, "parse_flow_sequence_entry_mapping_valu": 158, "parse_flow_sequence_first_entri": 158, "parse_implicit_document_start": 158, "parse_indentless_sequence_entri": 158, "parse_nod": 158, "parse_stream_start": 158, "part": 182, "pass": [19, 41, 42, 43, 44, 45, 46, 47, 48, 56, 71], "path": [11, 19, 21, 22, 73, 85, 86, 89, 90, 91, 92, 127, 128, 129, 150, 157, 158, 160, 161], "pattern": [97, 101, 102, 104, 105], "pca": 183, "peek": 158, "peek_ev": 158, "peek_token": 158, "pep": 19, "per": [19, 38], "pickle_inn": 159, "pip": 182, "pipelin": 182, "pixel": 19, "place": [19, 97, 101, 102, 104, 105], "point": [34, 73], "polygon": 10, "posit": [28, 30, 32, 34, 38, 43, 59, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129], "possibl": 182, "power_iteration_norm": 86, "power_t": [90, 142], "precisions_init": 127, "pred": 181, "predict": [28, 32], "prefix": [135, 136, 157, 158], "prefix_text": 157, "prepare_anchor": 157, "prepare_tag": 157, "prepare_tag_handl": 157, "prepare_tag_prefix": 157, "prepare_vers": 157, "preprocess": [41, 57, 59], "preprocessor": 182, "prevent": [73, 158], "print": [97, 101, 102, 104, 105], "prior": [89, 91], "privat": 71, "probabl": 92, "process": [10, 12, 13, 14, 15, 19, 71, 73, 183], "process_anchor": 157, "process_direct": 158, "process_empty_scalar": 158, "process_scalar": 157, "process_tag": 157, "processing_mod": 19, "properti": [11, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 85, 86, 89, 90, 91, 92, 127, 128, 129, 140, 141, 142], "provid": [19, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 73, 97, 101, 102, 104, 105, 182], "purpos": [97, 101, 102, 104, 105], "put": 24, "python": [10, 12, 13, 14, 15, 97, 101, 102, 104, 105, 184], "pytorch": [71, 73, 177, 182], "pytorch_arg": [140, 141, 142], "queryablelist": 11, "quickli": 182, "quickstart": 182, "r": [157, 158], "rais": [41, 42, 43, 44, 45, 46, 47, 48, 71, 73, 97, 101, 102, 104, 105], "raise_on_unknown_json_kei": [10, 12, 13, 14, 15], "random_st": [85, 86, 90, 92, 127, 128], "rather": 183, "rbf": 92, "re": [97, 101, 102, 104, 105, 157, 158, 182], "read": 19, "reason": [97, 101, 102, 104, 105], "recommend": 184, "reconstruct": 73, "record": [19, 97, 101, 102, 104, 105], "recreat": [41, 42, 43, 44, 45, 46, 47, 48], "recurs": [10, 12, 13, 14, 15, 19], "recursive_class": [10, 12, 13, 14, 15], "reduct": 183, "ref_spectra": [41, 42, 43, 44, 45, 46, 47, 48], "refer": [19, 41, 42, 43, 44, 45, 46, 47, 48, 97, 101, 102, 104, 105], "reflect": 19, "reg_covar": 127, "reg_param": 91, "regard": [97, 101, 102, 104, 105], "regex": [97, 101, 102, 104, 105], "regexp": [97, 101, 102, 104, 105, 157, 158], "regist": [97, 101, 102, 104, 105], "regular": [97, 101, 102, 104, 105], "rel": 41, "relu": 90, "remov": 73, "remove_possible_simple_kei": 158, "repositori": 185, "repr": 19, "repres": [16, 157, 183], "represent": [19, 28, 30, 32, 34, 38, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129, 157], "represent_binari": 157, "represent_bool": 157, "represent_d": 157, "represent_data": 157, "represent_datetim": 157, "represent_dict": 157, "represent_float": 157, "represent_int": 157, "represent_list": 157, "represent_map": 157, "represent_non": 157, "represent_scalar": 157, "represent_sequ": 157, "represent_set": 157, "represent_str": 157, "represent_undefin": 157, "represent_yaml_object": 157, "request": 77, "requir": [41, 42, 43, 44, 45, 46, 47, 48], "residu": 71, "resolv": [157, 158], "result": [30, 34, 38, 71, 97, 101, 102, 104, 105], "resum": [97, 101, 102, 104, 105], "return": [3, 10, 12, 13, 14, 15, 16, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 59, 71, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 144, 150, 177], "rich": 19, "rle": [17, 144], "romero": 45, "root": [3, 10, 12, 13, 14, 15, 19, 71, 97, 101, 102, 104, 105, 157], "round": [97, 101, 102, 104, 105], "rout": 79, "row": 19, "rtype": 30, "rule": [34, 97, 101, 102, 104, 105], "run": [97, 101, 102, 104, 105, 184], "runtest": [97, 101, 102, 104, 105], "runtimeerror": 71, "safeconstructor": 158, "safedump": 157, "safeload": 158, "saferepresent": 157, "sam": 48, "same": [19, 85, 97, 101, 102, 104, 105, 150], "sampl": [10, 12, 13, 14, 15], "sampler": 25, "save": [41, 42, 43, 44, 45, 46, 47, 48, 150], "save_possible_simple_kei": 158, "save_to_fil": 73, "scalar": 157, "scale": 92, "scan_anchor": 158, "scan_block_scalar": 158, "scan_block_scalar_break": 158, "scan_block_scalar_ignored_lin": 158, "scan_block_scalar_ind": 158, "scan_block_scalar_indent": 158, "scan_direct": 158, "scan_directive_ignored_lin": 158, "scan_directive_nam": 158, "scan_flow_scalar": 158, "scan_flow_scalar_break": 158, "scan_flow_scalar_non_spac": 158, "scan_flow_scalar_spac": 158, "scan_line_break": 158, "scan_plain": 158, "scan_plain_spac": 158, "scan_tag": 158, "scan_tag_directive_handl": 158, "scan_tag_directive_prefix": 158, "scan_tag_directive_valu": 158, "scan_tag_handl": 158, "scan_tag_uri": 158, "scan_to_next_token": 158, "scan_uri_escap": 158, "scan_yaml_directive_numb": 158, "scan_yaml_directive_valu": 158, "scanner": 158, "score": [41, 42, 43, 44, 45, 46, 47, 48], "second": [19, 97, 101, 102, 104, 105], "seed": 129, "segment": 10, "self": [57, 85, 86, 97, 101, 102, 104, 105], "separ": [10, 12, 13, 14, 15], "seq": [157, 158], "seq1": [97, 101, 102, 104, 105], "seq2": [97, 101, 102, 104, 105], "seq_typ": [97, 101, 102, 104, 105], "sequenc": [97, 101, 102, 104, 105, 157], "sequenti": [41, 42, 43, 44, 45, 46, 47, 48, 73], "serial": [19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 73, 85, 86, 89, 90, 91, 92, 94, 127, 128, 129], "serial_dir": [59, 159], "serializ": [41, 42, 43, 44, 45, 46, 47, 48, 73], "serialize_nod": [157, 159], "session": 22, "sessionfil": 22, "set": [3, 10, 12, 13, 14, 15, 19, 71, 97, 101, 102, 104, 105, 157, 158], "set1": [97, 101, 102, 104, 105], "set2": [97, 101, 102, 104, 105], "set_datatyp": 3, "set_fit_meta_request": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129], "set_forward_meta_request": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129], "setup": [97, 100, 101, 102, 104, 105, 106], "setupclass": [97, 101, 102, 104, 105], "shallow": 183, "shamelessli": 144, "shape": [19, 28, 30, 32, 34, 38, 43, 56, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129, 172], "share": 150, "shortdescript": [97, 101, 102, 104, 105], "should": [10, 12, 13, 14, 15, 41, 42, 43, 44, 45, 46, 47, 48, 73, 97, 101, 102, 104, 105, 150], "shrink": 92, "shrinkag": 89, "shuffl": [25, 85, 90], "signific": [97, 101, 102, 104, 105], "silenc": [97, 101, 102, 104, 105], "similar": [97, 101, 102, 104, 105, 183], "similarli": [97, 101, 102, 104, 105], "simpl": [30, 38, 183, 185], "simple_kei": 157, "singl": [34, 38, 41], "single_object_per_label": 150, "singular": [41, 42, 43, 44, 45, 46, 47, 48], "size": [10, 19, 24, 43, 73, 158], "skew": 48, "skip": [97, 101, 102, 104, 105], "skip_default": [10, 12, 13, 14, 15], "skip_defaults_if": [10, 12, 13, 14, 15], "skip_if": [10, 12, 13, 14, 15], "skiptest": [97, 101, 102, 104, 105], "sklearn": 182, "sklearn_arg": [140, 141, 142], "sklearnwrap": [85, 86, 89, 90, 91, 92, 127, 128, 129], "slot": 19, "smaller": 30, "so": [10, 12, 13, 14, 15], "solver": [85, 89, 90], "some_attribut": [97, 101, 102, 104, 105], "someexcept": [97, 101, 102, 104, 105], "somewarn": [97, 101, 102, 104, 105], "soon": 182, "sort_kei": 157, "sourc": [3, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 28, 30, 32, 34, 35, 36, 38, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 59, 61, 63, 67, 70, 71, 73, 75, 76, 77, 78, 79, 81, 82, 85, 86, 89, 90, 91, 92, 94, 97, 100, 101, 102, 104, 105, 106, 127, 128, 129, 132, 133, 135, 136, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 180, 181], "space": 47, "spatial": [34, 38, 177], "special": 158, "specif": [28, 30, 32, 34, 38, 59, 67, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 182], "specifi": [3, 10, 12, 13, 14, 15, 19, 97, 101, 102, 104, 105], "spectra": [41, 42, 43, 44, 45, 46, 47, 48], "spectra_to_arrai": [41, 42, 43, 44, 45, 46, 47, 48], "spectral": [41, 45, 48], "spectrum": 43, "split": 157, "stackoverflow": 144, "stage": 71, "stale_possible_simple_kei": 158, "start": [71, 182, 185], "start_mark": 158, "state": 28, "state_dict": [175, 178], "static": [30, 41, 42, 43, 44, 45, 46, 47, 48], "staticmethod": 25, "store": [19, 41, 42, 43, 44, 45, 46, 47, 48, 73], "store_covari": [89, 91], "str": [3, 10, 12, 13, 14, 15, 19, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 70, 71, 73, 77, 78, 79, 132, 135, 150, 157, 158, 159, 161], "strategi": 34, "stream": [157, 158], "string": [10, 12, 13, 14, 15, 19, 97, 101, 102, 104, 105], "string_or_stream": 19, "structur": 73, "style": [97, 101, 102, 104, 105, 157, 158], "sub": [10, 12, 13, 14, 15], "subclass": [10, 12, 13, 14, 15, 97, 101, 102, 104, 105], "subset": [97, 101, 102, 104, 105], "subtest": [97, 101, 102, 104, 105], "success": [97, 101, 102, 104, 105], "successfulli": 73, "successor": 73, "suffer": [97, 101, 102, 104, 105], "supercategori": 12, "superset": [97, 101, 102, 104, 105], "support": [97, 101, 102, 104, 105], "svd": 89, "svd_solver": 86, "symmetri": [97, 101, 102, 104, 105], "t": [10, 12, 13, 14, 15, 157, 158], "tag": [10, 12, 13, 14, 15, 157, 158], "tag_kei": [10, 12, 13, 14, 15], "tag_prefix": 158, "take": [71, 97, 101, 102, 104, 105, 185], "taken": 19, "target": 73, "target_transform": 3, "task": [28, 183], "teardown": [97, 101, 102, 104, 105], "teardownclass": [97, 101, 102, 104, 105], "tensor": 10, "test": [45, 71], "test_correct_input_dim": [100, 101, 102, 104, 105, 106], "test_correct_output_dim": [100, 101, 102, 104, 105, 106], "test_dataload": 71, "test_dl": 73, "test_get_shape_without_batch": 97, "test_incorrect_input_dim": [100, 101, 102, 104, 105, 106], "test_initi": [100, 101, 102, 104, 105, 106], "test_passthrough": [100, 101, 102, 104, 105, 106], "testcas": [97, 101, 102, 104, 105], "testpreprocessednod": [101, 102], "testresult": [97, 101, 102, 104, 105], "testunsupervisednod": [104, 105], "text": [97, 101, 102, 104, 105, 157], "th": 47, "than": [30, 97, 101, 102, 104, 105], "the_except": [97, 101, 102, 104, 105], "the_warn": [97, 101, 102, 104, 105], "thei": [41, 97, 101, 102, 104, 105], "themselv": 183, "thi": [10, 12, 13, 14, 15, 19, 30, 32, 34, 38, 41, 43, 48, 73, 97, 101, 102, 104, 105, 182, 183, 184], "thing": 183, "those": 183, "three": 174, "threshold": 30, "through": [41, 42, 43, 44, 45, 46, 47, 48, 56, 71], "time": [19, 73, 97, 101, 102, 104, 105], "timeout": 25, "timestamp": [157, 158], "timestamp_regexp": 158, "titl": [180, 181], "to_dict": [10, 12, 13, 14, 15], "to_json": [10, 12, 13, 14, 15], "to_torchvis": 10, "to_yaml": 19, "to_yaml_fil": 19, "todo": 41, "tokenclass": 158, "tol": [85, 86, 89, 90, 91, 92, 127, 128], "torch": [71, 94], "torch_lay": 73, "torchvis": 10, "toward": 48, "train": [71, 73, 183], "train_dataload": 71, "train_dl": 73, "transform": [3, 28, 32, 56, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129], "tree": 182, "tri": 182, "trigger": [97, 101, 102, 104, 105], "true": [10, 12, 13, 14, 15, 19, 30, 86, 90, 92, 97, 101, 102, 104, 105, 128, 129, 142, 157, 158, 159], "tt": [157, 158], "tupl": [10, 12, 13, 14, 15, 17, 19, 28, 30, 32, 34, 38, 59, 71, 73, 82, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129, 132, 145, 157], "tuple1": [97, 101, 102, 104, 105], "tuple2": [97, 101, 102, 104, 105], "tutori": 182, "two": [41, 97, 101, 102, 104, 105, 174], "type": [3, 10, 12, 13, 14, 15, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 71, 73, 85, 86, 97, 101, 102, 104, 105, 177, 183], "typeerror": 71, "typeobj": [97, 101, 102, 104, 105], "typic": [10, 12, 13, 14, 15, 43], "u": 158, "u0010ffff": 158, "u2028": [157, 158], "u2029": [157, 158], "ud7ff": 158, "ue000": 158, "uint8": 3, "unequ": [97, 101, 102, 104, 105], "unexpect": [97, 101, 102, 104, 105], "unexpected_regex": [97, 101, 102, 104, 105], "uniform": 182, "uniniti": 71, "union": [71, 94], "unknown": 174, "unless": [97, 101, 102, 104, 105], "unlik": [97, 101, 102, 104, 105], "unsafe_hash": 19, "unsupervis": 56, "unwind_ind": 158, "up": [97, 101, 102, 104, 105], "updat": 158, "update_raw": 158, "url": [14, 15], "us": [10, 12, 13, 14, 15, 19, 30, 34, 38, 41, 67, 71, 97, 101, 102, 104, 105, 182, 183, 184], "usag": [10, 12, 13, 14, 15, 19], "use_min": 38, "user": [28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 127, 128, 129, 158], "usual": [97, 101, 102, 104, 105], "util": [34, 71, 94], "uuid": 73, "v": [157, 158], "v1": [10, 12, 13, 14, 15], "v1_debug": [10, 12, 13, 14, 15], "v1_field_to_alia": [10, 12, 13, 14, 15], "v1_key_cas": [10, 12, 13, 14, 15], "v1_on_unknown_kei": [10, 12, 13, 14, 15], "v1_unsafe_parse_dataclass_in_union": [10, 12, 13, 14, 15], "valid": [3, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 59, 85, 86, 89, 90, 91, 92, 97, 101, 102, 104, 105, 127, 128, 129], "validation_fract": 90, "valu": [10, 12, 13, 14, 15, 16, 19, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 97, 101, 102, 104, 105, 157, 158, 174, 177], "valueerror": [41, 42, 43, 44, 45, 46, 47, 48, 73, 97, 101, 102, 104, 105], "vari": 43, "vector": [43, 47], "verbos": [85, 90, 92, 94, 127, 128, 157, 158], "verbose_interv": 127, "verifi": [81, 82], "version": [14, 157], "version_text": 157, "via": [10, 12, 13, 14, 15], "video": 19, "virtual": 184, "visiondataset": 3, "w": 19, "wa": [19, 97, 101, 102, 104, 105], "wai": 41, "wanted_shap": 145, "warm_start": [71, 85, 86, 89, 90, 91, 92, 127, 128, 129], "warn": [97, 101, 102, 104, 105], "warnclass": [97, 101, 102, 104, 105], "wavelength": [13, 19, 43], "wavelengths_nm": 19, "we": 184, "weight": 42, "weights_init": 127, "wheel": 182, "when": [10, 12, 13, 14, 15, 97, 101, 102, 104, 105], "where": [16, 30, 41, 42, 43, 44, 45, 46, 47, 48, 150], "whether": [97, 101, 102, 104, 105], "which": [10, 12, 13, 14, 15, 41, 42, 43, 44, 45, 46, 47, 48, 71, 97, 101, 102, 104, 105, 150], "white": 19, "whiten": 86, "whitespac": 157, "whose": [97, 101, 102, 104, 105], "width": [13, 43, 157], "within": 71, "without": [97, 101, 102, 104, 105], "worker_init_fn": 25, "working_dir": [41, 42, 43, 44, 45, 46, 47, 48], "wrapper": [67, 71], "write": 19, "write_double_quot": 157, "write_fold": 157, "write_ind": 157, "write_line_break": 157, "write_liter": 157, "write_plain": 157, "write_single_quot": 157, "write_stream_end": 157, "write_stream_start": 157, "write_tag_direct": 157, "write_version_direct": 157, "x": [10, 12, 13, 14, 15, 19, 28, 30, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 57, 59, 71, 73, 85, 86, 89, 90, 91, 92, 94, 127, 128, 129, 158], "x00": [157, 158], "x07": [157, 158], "x08": [157, 158], "x0b": [157, 158], "x0c": [157, 158], "x1b": [157, 158], "x85": [157, 158], "xa0": [157, 158], "y": [10, 12, 13, 14, 15, 19, 54, 71, 73, 89, 90, 91, 92, 94, 157, 158], "yaml": [19, 41, 42, 43, 44, 45, 46, 47, 48, 73, 157, 158], "yaml_constructor": 158, "yaml_implicit_resolv": [157, 158], "yaml_multi_constructor": 158, "yaml_multi_represent": 157, "yaml_path_resolv": [157, 158], "yaml_represent": 157, "yamlwizard": 19, "ye": [157, 158], "year": 158, "yield": [97, 101, 102, 104, 105], "you": [97, 101, 102, 104, 105, 182], "your": 182, "zero": [97, 101, 102, 104, 105, 150], "zip": 73, "\u03c0": 48, "\ud800\udc00": 158}, "titles": ["cuvis_ai", "cuvis_ai.data", "cuvis_ai.data.BaseDataSet", "cuvis_ai.data.BaseDataSet.BaseDataSet", "cuvis_ai.data.CuvisDataSet", "cuvis_ai.data.LiveCuvisDataLoader", "cuvis_ai.data.NumpyDataSet", "cuvis_ai.data.OutputFormat", "cuvis_ai.data.PublicDataSets", "cuvis_ai.data.cocolabels", "cuvis_ai.data.cocolabels.Annotation", "cuvis_ai.data.cocolabels.COCOData", "cuvis_ai.data.cocolabels.Category", "cuvis_ai.data.cocolabels.Image", "cuvis_ai.data.cocolabels.Info", "cuvis_ai.data.cocolabels.License", "cuvis_ai.data.cocolabels.QueryableList", "cuvis_ai.data.cocolabels.RLE2mask", "cuvis_ai.data.metadata", "cuvis_ai.data.metadata.Metadata", "cuvis_ai.data.metadata.get_meta_from_mesu", "cuvis_ai.data.metadata.get_meta_from_path", "cuvis_ai.data.metadata.get_meta_from_session", "cuvis_ai.data.utils_dataloader", "cuvis_ai.data.utils_dataloader.cuvis_collate", "cuvis_ai.data.utils_dataloader.get_dataloader_from_dataset", "cuvis_ai.deciders", "cuvis_ai.deciders.base_decider", "cuvis_ai.deciders.base_decider.BaseDecider", "cuvis_ai.deciders.binary_decider", "cuvis_ai.deciders.binary_decider.BinaryDecider", "cuvis_ai.deciders.cascaded_decider", "cuvis_ai.deciders.cascaded_decider.Cascaded", "cuvis_ai.deciders.combining_decider", "cuvis_ai.deciders.combining_decider.CombiningDecider", "cuvis_ai.deciders.combining_decider.all_agree", "cuvis_ai.deciders.combining_decider.at_least_n_agree", "cuvis_ai.deciders.multiclass_decider", "cuvis_ai.deciders.multiclass_decider.MultiClassDecider", "cuvis_ai.distance", "cuvis_ai.distance.distance", "cuvis_ai.distance.distance.AbstractDistance", "cuvis_ai.distance.distance.Canberra", "cuvis_ai.distance.distance.ECS", "cuvis_ai.distance.distance.Euclidean", "cuvis_ai.distance.distance.GFC", "cuvis_ai.distance.distance.Manhattan", "cuvis_ai.distance.distance.Minkowski", "cuvis_ai.distance.distance.SpectralAngle", "cuvis_ai.node", "cuvis_ai.node.Consumers", "cuvis_ai.node.Consumers.CubeConsumer", "cuvis_ai.node.Consumers.LabelConsumer", "cuvis_ai.node.base", "cuvis_ai.node.base.BaseSupervised", "cuvis_ai.node.base.BaseTransformation", "cuvis_ai.node.base.BaseUnsupervised", "cuvis_ai.node.base.Preprocessor", "cuvis_ai.node.node", "cuvis_ai.node.node.Node", "cuvis_ai.node.sklearn", "cuvis_ai.node.sklearn.SklearnWrapped", "cuvis_ai.node.skorch", "cuvis_ai.node.skorch.SkorchWrapped", "cuvis_ai.node.torch", "cuvis_ai.node.torchvision", "cuvis_ai.node.wrap", "cuvis_ai.node.wrap.make_node", "cuvis_ai.pipeline", "cuvis_ai.pipeline.executor", "cuvis_ai.pipeline.executor.HummingBirdExecutor", "cuvis_ai.pipeline.executor.MemoryExecutor", "cuvis_ai.pipeline.graph", "cuvis_ai.pipeline.graph.Graph", "cuvis_ai.pipeline.meta_routing", "cuvis_ai.pipeline.meta_routing.get_fit_metadata", "cuvis_ai.pipeline.meta_routing.get_forward_metadata", "cuvis_ai.pipeline.meta_routing.get_requested_metadata", "cuvis_ai.pipeline.meta_routing.get_route", "cuvis_ai.pipeline.meta_routing.traverse", "cuvis_ai.pipeline.validator", "cuvis_ai.pipeline.validator.GraphValidator", "cuvis_ai.pipeline.validator.ShapeValidator", "cuvis_ai.preprocessor", "cuvis_ai.preprocessor.sklearn_wrapped", "cuvis_ai.preprocessor.sklearn_wrapped.NMF", "cuvis_ai.preprocessor.sklearn_wrapped.PCA", "cuvis_ai.supervised", "cuvis_ai.supervised.sklearn_wrapped", "cuvis_ai.supervised.sklearn_wrapped.LDA", "cuvis_ai.supervised.sklearn_wrapped.MLP", "cuvis_ai.supervised.sklearn_wrapped.QDA", "cuvis_ai.supervised.sklearn_wrapped.SVM", "cuvis_ai.supervised.skorch_supervised", "cuvis_ai.supervised.skorch_supervised.SkorchSupervised", "cuvis_ai.test", "cuvis_ai.test.test_numpy_utils", "cuvis_ai.test.test_numpy_utils.TestNumpyUtils", "cuvis_ai.test.test_pipeline_graph", "cuvis_ai.test.test_preprocessor_structural", "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode", "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF", "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA", "cuvis_ai.test.test_unsupervised_structural", "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM", "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans", "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode", "cuvis_ai.tv_transforms", "cuvis_ai.tv_transforms.Bandpass", "cuvis_ai.tv_transforms.Bandpass.call_super_init", "cuvis_ai.tv_transforms.Bandpass.dump_patches", "cuvis_ai.tv_transforms.Bandpass.training", "cuvis_ai.tv_transforms.MultiBandpass", "cuvis_ai.tv_transforms.MultiBandpass.call_super_init", "cuvis_ai.tv_transforms.MultiBandpass.dump_patches", "cuvis_ai.tv_transforms.MultiBandpass.training", "cuvis_ai.tv_transforms.NormalizeStdDev", "cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init", "cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches", "cuvis_ai.tv_transforms.NormalizeStdDev.training", "cuvis_ai.tv_transforms.NormalizeToFloat", "cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init", "cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches", "cuvis_ai.tv_transforms.NormalizeToFloat.training", "cuvis_ai.tv_transforms.WavelengthList", "cuvis_ai.unsupervised", "cuvis_ai.unsupervised.sklearn_wrapped", "cuvis_ai.unsupervised.sklearn_wrapped.GMM", "cuvis_ai.unsupervised.sklearn_wrapped.KMeans", "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift", "cuvis_ai.utils", "cuvis_ai.utils.dependencies", "cuvis_ai.utils.dependencies.get_installed_packages", "cuvis_ai.utils.dependencies.get_installed_packages_str", "cuvis_ai.utils.dict", "cuvis_ai.utils.dict.remove_prefix", "cuvis_ai.utils.dict.remove_prefix_str", "cuvis_ai.utils.filesystem", "cuvis_ai.utils.filesystem.change_working_dir", "cuvis_ai.utils.nn_config", "cuvis_ai.utils.nn_config.Adam", "cuvis_ai.utils.nn_config.Optimizer", "cuvis_ai.utils.nn_config.SGD", "cuvis_ai.utils.numpy", "cuvis_ai.utils.numpy.binary_mask_to_rle", "cuvis_ai.utils.numpy.check_array_shape", "cuvis_ai.utils.numpy.flatten_batch_and_labels", "cuvis_ai.utils.numpy.flatten_batch_and_spatial", "cuvis_ai.utils.numpy.flatten_labels", "cuvis_ai.utils.numpy.flatten_spatial", "cuvis_ai.utils.numpy.gen_coco_labels", "cuvis_ai.utils.numpy.get_shape_without_batch", "cuvis_ai.utils.numpy.unflatten_batch_and_labels", "cuvis_ai.utils.numpy.unflatten_batch_and_spatial", "cuvis_ai.utils.numpy.unflatten_labels", "cuvis_ai.utils.numpy.unflatten_spatial", "cuvis_ai.utils.serializer", "cuvis_ai.utils.serializer.CuvisYamlDumper", "cuvis_ai.utils.serializer.CuvisYamlLoader", "cuvis_ai.utils.serializer.OldSerializer", "cuvis_ai.utils.serializer.Serializer", "cuvis_ai.utils.serializer.YamlSerializer", "cuvis_ai.utils.serializer.numpy_array_binary_representer", "cuvis_ai.utils.serializer.numpy_array_file_representer", "cuvis_ai.utils.serializer.numpy_array_string_representer", "cuvis_ai.utils.serializer.numpy_arrray_file_constructor", "cuvis_ai.utils.serializer.numpy_arrray_string_constructor", "cuvis_ai.utils.serializer.numpy_float32_constructor", "cuvis_ai.utils.serializer.numpy_float32_representer", "cuvis_ai.utils.serializer.numpy_float64_constructor", "cuvis_ai.utils.serializer.numpy_float64_representer", "cuvis_ai.utils.test", "cuvis_ai.utils.test.get_np_dummy_data", "cuvis_ai.utils.torch", "cuvis_ai.utils.torch.InputDimension", "cuvis_ai.utils.torch.extract_state_dict", "cuvis_ai.utils.torch.get_output_shape", "cuvis_ai.utils.torch.guess_input_dimensionalty", "cuvis_ai.utils.torch.guess_state_dict_format", "cuvis_ai.utils.visualize", "cuvis_ai.utils.visualize.visualize_features", "cuvis_ai.utils.visualize.visualize_image", "Welcome to Cuvis AI\u2019s documentation!", "Concepts", "Installation", "Quickstart", "Tutorials"], "titleterms": {"": 182, "The": 183, "abstractdist": 41, "adam": 140, "ai": 182, "algorithm": 183, "all_agre": 35, "annot": 10, "api": 182, "at_least_n_agre": 36, "bandpass": [108, 109, 110, 111], "base": [53, 54, 55, 56, 57], "base_decid": [27, 28], "basedataset": [2, 3], "basedecid": 28, "basesupervis": 54, "basetransform": 55, "baseunsupervis": 56, "binary_decid": [29, 30], "binary_mask_to_rl": 144, "binarydecid": 30, "call_super_init": [109, 113, 117, 121], "canberra": 42, "cascad": 32, "cascaded_decid": [31, 32], "categori": 12, "change_working_dir": 138, "check_array_shap": 145, "cocodata": 11, "cocolabel": [9, 10, 11, 12, 13, 14, 15, 16, 17], "com": 184, "combining_decid": [33, 34, 35, 36], "combiningdecid": 34, "concept": 183, "consum": [50, 51, 52], "cubeconsum": 51, "cuvi": 182, "cuvis_ai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "cuvis_col": 24, "cuvisdataset": 4, "cuvisyamldump": 157, "cuvisyamlload": 158, "data": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "decid": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 183], "depend": [131, 132, 133], "dict": [134, 135, 136], "distanc": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 183], "document": 182, "dump_patch": [110, 114, 118, 122], "ec": 43, "entri": 19, "euclidean": 44, "executor": [69, 70, 71], "extract_state_dict": 175, "filesystem": [137, 138], "flatten_batch_and_label": 146, "flatten_batch_and_spati": 147, "flatten_label": 148, "flatten_spati": 149, "gen_coco_label": 150, "get_dataloader_from_dataset": 25, "get_fit_metadata": 75, "get_forward_metadata": 76, "get_installed_packag": 132, "get_installed_packages_str": 133, "get_meta_from_mesu": 20, "get_meta_from_path": 21, "get_meta_from_sess": 22, "get_np_dummy_data": 172, "get_output_shap": 176, "get_requested_metadata": 77, "get_rout": 78, "get_shape_without_batch": 151, "gfc": 45, "gmm": 127, "graph": [72, 73], "graphvalid": 81, "guess_input_dimensionalti": 177, "guess_state_dict_format": 178, "guid": 182, "hummingbirdexecutor": 70, "imag": 13, "info": 14, "inputdimens": 174, "instal": 184, "introduct": 182, "kmean": 128, "labelconsum": 52, "lda": 89, "licens": 15, "livecuvisdataload": 5, "make_nod": 67, "manhattan": 46, "meanshift": 129, "memoryexecutor": 71, "meta_rout": [74, 75, 76, 77, 78, 79], "metadata": [18, 19, 20, 21, 22], "minkowski": 47, "mlp": 90, "multibandpass": [112, 113, 114, 115], "multiclass_decid": [37, 38], "multiclassdecid": 38, "nmf": 85, "nn_config": [139, 140, 141, 142], "node": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 183], "normalizestddev": [116, 117, 118, 119], "normalizetofloat": [120, 121, 122, 123], "numpi": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "numpy_array_binary_represent": 162, "numpy_array_file_represent": 163, "numpy_array_string_represent": 164, "numpy_arrray_file_constructor": 165, "numpy_arrray_string_constructor": 166, "numpy_float32_constructor": 167, "numpy_float32_represent": 168, "numpy_float64_constructor": 169, "numpy_float64_represent": 170, "numpydataset": 6, "oldseri": 159, "optim": 141, "outputformat": 7, "paramat": 30, "pca": 86, "pip": 184, "pipelin": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 183], "possibl": 19, "preprocessor": [57, 83, 84, 85, 86, 183], "publicdataset": 8, "qda": 91, "queryablelist": 16, "quickstart": 185, "refer": 182, "remove_prefix": 135, "remove_prefix_str": 136, "rle2mask": 17, "serial": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "sgd": 142, "shapevalid": 82, "sklearn": [60, 61], "sklearn_wrap": [84, 85, 86, 88, 89, 90, 91, 92, 126, 127, 128, 129], "sklearnwrap": 61, "skorch": [62, 63], "skorch_supervis": [93, 94], "skorchsupervis": 94, "skorchwrap": 63, "soon": 184, "spectralangl": 48, "supervis": [87, 88, 89, 90, 91, 92, 93, 94, 183], "svm": 92, "test": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 171, 172], "test_numpy_util": [96, 97], "test_pipeline_graph": 98, "test_preprocessor_structur": [99, 100, 101, 102], "test_unsupervised_structur": [103, 104, 105, 106], "testnumpyutil": 97, "testpreprocessednod": 100, "testunsupervisedgmm": 104, "testunsupervisedkmean": 105, "testunsupervisednmf": 101, "testunsupervisednod": 106, "testunsupervisedpca": 102, "torch": [64, 173, 174, 175, 176, 177, 178], "torchvis": 65, "train": [111, 115, 119, 123], "transform": 183, "travers": 79, "tree": 183, "tutori": 186, "tv_transform": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "unflatten_batch_and_label": 152, "unflatten_batch_and_spati": 153, "unflatten_label": 154, "unflatten_spati": 155, "unsupervis": [125, 126, 127, 128, 129, 183], "user": 182, "util": [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "utils_dataload": [23, 24, 25], "valid": [80, 81, 82], "visual": [179, 180, 181], "visualize_featur": 180, "visualize_imag": 181, "wavelengthlist": 124, "welcom": 182, "wrap": [66, 67], "yamlseri": 161}})
Search.setIndex({"alltitles": {"API Reference": [[160, "api-reference"]], "Concepts": [[161, null]], "Installation": [[162, null]], "Introduction": [[160, "introduction"]], "Paramaters": [[5, "paramaters"]], "Preprocessor Nodes": [[161, "preprocessor-nodes"]], "Quickstart": [[163, null]], "The Pipeline or Algorithm Tree": [[161, "the-pipeline-or-algorithm-tree"]], "Tutorials": [[164, null]], "Users\u2019s Guide": [[160, "users-s-guide"]], "Welcome to Cuvis AI\u2019s documentation!": [[160, null]], "cuvis_ai": [[0, null]], "cuvis_ai.deciders": [[1, null]], "cuvis_ai.deciders.base_decider": [[2, null]], "cuvis_ai.deciders.base_decider.BaseDecider": [[3, null]], "cuvis_ai.deciders.binary_decider": [[4, null]], "cuvis_ai.deciders.binary_decider.BinaryDecider": [[5, null]], "cuvis_ai.deciders.cascaded_decider": [[6, null]], "cuvis_ai.deciders.cascaded_decider.Cascaded": [[7, null]], "cuvis_ai.deciders.combining_decider": [[8, null]], "cuvis_ai.deciders.combining_decider.CombiningDecider": [[9, null]], "cuvis_ai.deciders.combining_decider.all_agree": [[10, null]], "cuvis_ai.deciders.combining_decider.at_least_n_agree": [[11, null]], "cuvis_ai.deciders.multiclass_decider": [[12, null]], "cuvis_ai.deciders.multiclass_decider.MultiClassDecider": [[13, null]], "cuvis_ai.distance": [[14, null]], "cuvis_ai.distance.distance": [[15, null]], "cuvis_ai.distance.distance.AbstractDistance": [[16, null]], "cuvis_ai.distance.distance.Canberra": [[17, null]], "cuvis_ai.distance.distance.ECS": [[18, null]], "cuvis_ai.distance.distance.Euclidean": [[19, null]], "cuvis_ai.distance.distance.GFC": [[20, null]], "cuvis_ai.distance.distance.Manhattan": [[21, null]], "cuvis_ai.distance.distance.Minkowski": [[22, null]], "cuvis_ai.distance.distance.SpectralAngle": [[23, null]], "cuvis_ai.node": [[24, null]], "cuvis_ai.node.Consumers": [[25, null]], "cuvis_ai.node.Consumers.CubeConsumer": [[26, null]], "cuvis_ai.node.Consumers.LabelConsumer": [[27, null]], "cuvis_ai.node.Consumers.LabelConsumerInference": [[28, null]], "cuvis_ai.node.Consumers.MetadataConsumer": [[29, null]], "cuvis_ai.node.Consumers.MetadataConsumerInference": [[30, null]], "cuvis_ai.node.base": [[31, null]], "cuvis_ai.node.base.BaseSupervised": [[32, null]], "cuvis_ai.node.base.BaseTransformation": [[33, null]], "cuvis_ai.node.base.BaseUnsupervised": [[34, null]], "cuvis_ai.node.base.Preprocessor": [[35, null]], "cuvis_ai.node.node": [[36, null]], "cuvis_ai.node.node.Node": [[37, null]], "cuvis_ai.node.sklearn": [[38, null]], "cuvis_ai.node.skorch": [[39, null]], "cuvis_ai.node.torch": [[40, null]], "cuvis_ai.node.wrap": [[41, null]], "cuvis_ai.node.wrap.make_node": [[42, null]], "cuvis_ai.pipeline": [[43, null]], "cuvis_ai.pipeline.executor": [[44, null]], "cuvis_ai.pipeline.executor.MemoryExecutor": [[45, null]], "cuvis_ai.pipeline.graph": [[46, null]], "cuvis_ai.pipeline.graph.Graph": [[47, null]], "cuvis_ai.preprocessor": [[48, null]], "cuvis_ai.preprocessor.sklearn_wrapped": [[49, null]], "cuvis_ai.preprocessor.sklearn_wrapped.NMF": [[50, null]], "cuvis_ai.preprocessor.sklearn_wrapped.PCA": [[51, null]], "cuvis_ai.supervised": [[52, null]], "cuvis_ai.supervised.sklearn_wrapped": [[53, null]], "cuvis_ai.supervised.sklearn_wrapped.LDA": [[54, null]], "cuvis_ai.supervised.sklearn_wrapped.MLP": [[55, null]], "cuvis_ai.supervised.sklearn_wrapped.QDA": [[56, null]], "cuvis_ai.supervised.sklearn_wrapped.SVM": [[57, null]], "cuvis_ai.supervised.skorch_supervised": [[58, null]], "cuvis_ai.supervised.skorch_supervised.SkorchSupervised": [[59, null]], "cuvis_ai.test": [[60, null]], "cuvis_ai.test.test_numpy_utils": [[61, null]], "cuvis_ai.test.test_numpy_utils.TestNumpyUtils": [[62, null]], "cuvis_ai.test.test_pipeline_graph": [[63, null]], "cuvis_ai.test.test_preprocessor_structural": [[64, null]], "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode": [[65, null]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF": [[66, null]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA": [[67, null]], "cuvis_ai.test.test_serialization": [[68, null]], "cuvis_ai.test.test_serialization.TestNodeSerialization": [[69, null]], "cuvis_ai.test.test_serialization.TestPreprocessorNMF": [[70, null]], "cuvis_ai.test.test_serialization.TestPreprocessorPCA": [[71, null]], "cuvis_ai.test.test_serialization.TestSupervisedLDA": [[72, null]], "cuvis_ai.test.test_serialization.TestTransformationReflectance": [[73, null]], "cuvis_ai.test.test_serialization.TestTransformationTorch": [[74, null]], "cuvis_ai.test.test_serialization.TestTransformationTorchVision": [[75, null]], "cuvis_ai.test.test_serialization.TestUnsupervisedGMM": [[76, null]], "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans": [[77, null]], "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift": [[78, null]], "cuvis_ai.test.test_unsupervised_structural": [[79, null]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM": [[80, null]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans": [[81, null]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode": [[82, null]], "cuvis_ai.transformation": [[83, null]], "cuvis_ai.transformation.reflectance": [[84, null]], "cuvis_ai.transformation.reflectance.Reflectance": [[85, null]], "cuvis_ai.transformation.torch_transformation": [[86, null]], "cuvis_ai.transformation.torch_transformation.TorchTransformation": [[87, null]], "cuvis_ai.transformation.torchvision_transformation": [[88, null]], "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation": [[89, null]], "cuvis_ai.tv_transforms": [[90, null]], "cuvis_ai.tv_transforms.Bandpass": [[91, null]], "cuvis_ai.tv_transforms.Bandpass.call_super_init": [[92, null]], "cuvis_ai.tv_transforms.Bandpass.dump_patches": [[93, null]], "cuvis_ai.tv_transforms.Bandpass.training": [[94, null]], "cuvis_ai.tv_transforms.MultiBandpass": [[95, null]], "cuvis_ai.tv_transforms.MultiBandpass.call_super_init": [[96, null]], "cuvis_ai.tv_transforms.MultiBandpass.dump_patches": [[97, null]], "cuvis_ai.tv_transforms.MultiBandpass.training": [[98, null]], "cuvis_ai.tv_transforms.NormalizeStdDev": [[99, null]], "cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init": [[100, null]], "cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches": [[101, null]], "cuvis_ai.tv_transforms.NormalizeStdDev.training": [[102, null]], "cuvis_ai.tv_transforms.NormalizeToFloat": [[103, null]], "cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init": [[104, null]], "cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches": [[105, null]], "cuvis_ai.tv_transforms.NormalizeToFloat.training": [[106, null]], "cuvis_ai.tv_transforms.WavelengthList": [[107, null]], "cuvis_ai.unsupervised": [[108, null]], "cuvis_ai.unsupervised.sklearn_wrapped": [[109, null]], "cuvis_ai.unsupervised.sklearn_wrapped.GMM": [[110, null]], "cuvis_ai.unsupervised.sklearn_wrapped.KMeans": [[111, null]], "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift": [[112, null]], "cuvis_ai.utils": [[113, null]], "cuvis_ai.utils.dependencies": [[114, null]], "cuvis_ai.utils.dependencies.get_installed_packages": [[115, null]], "cuvis_ai.utils.dependencies.get_installed_packages_str": [[116, null]], "cuvis_ai.utils.filesystem": [[117, null]], "cuvis_ai.utils.filesystem.change_working_dir": [[118, null]], "cuvis_ai.utils.nn_config": [[119, null]], "cuvis_ai.utils.nn_config.Adam": [[120, null]], "cuvis_ai.utils.nn_config.Optimizer": [[121, null]], "cuvis_ai.utils.nn_config.SGD": [[122, null]], "cuvis_ai.utils.numpy": [[123, null]], "cuvis_ai.utils.numpy.binary_mask_to_rle": [[124, null]], "cuvis_ai.utils.numpy.check_array_shape": [[125, null]], "cuvis_ai.utils.numpy.flatten_batch_and_labels": [[126, null]], "cuvis_ai.utils.numpy.flatten_batch_and_spatial": [[127, null]], "cuvis_ai.utils.numpy.flatten_labels": [[128, null]], "cuvis_ai.utils.numpy.flatten_spatial": [[129, null]], "cuvis_ai.utils.numpy.gen_coco_labels": [[130, null]], "cuvis_ai.utils.numpy.get_shape_without_batch": [[131, null]], "cuvis_ai.utils.numpy.unflatten_batch_and_labels": [[132, null]], "cuvis_ai.utils.numpy.unflatten_batch_and_spatial": [[133, null]], "cuvis_ai.utils.numpy.unflatten_labels": [[134, null]], "cuvis_ai.utils.numpy.unflatten_spatial": [[135, null]], "cuvis_ai.utils.serializer": [[136, null]], "cuvis_ai.utils.serializer.CuvisYamlDumper": [[137, null]], "cuvis_ai.utils.serializer.CuvisYamlLoader": [[138, null]], "cuvis_ai.utils.serializer.OldSerializer": [[139, null]], "cuvis_ai.utils.serializer.Serializer": [[140, null]], "cuvis_ai.utils.serializer.YamlSerializer": [[141, null]], "cuvis_ai.utils.serializer.numpy_array_binary_representer": [[142, null]], "cuvis_ai.utils.serializer.numpy_array_file_representer": [[143, null]], "cuvis_ai.utils.serializer.numpy_array_string_representer": [[144, null]], "cuvis_ai.utils.serializer.numpy_arrray_file_constructor": [[145, null]], "cuvis_ai.utils.serializer.numpy_arrray_string_constructor": [[146, null]], "cuvis_ai.utils.serializer.numpy_float32_constructor": [[147, null]], "cuvis_ai.utils.serializer.numpy_float32_representer": [[148, null]], "cuvis_ai.utils.serializer.numpy_float64_constructor": [[149, null]], "cuvis_ai.utils.serializer.numpy_float64_representer": [[150, null]], "cuvis_ai.utils.test": [[151, null]], "cuvis_ai.utils.test.get_np_dummy_data": [[152, null]], "cuvis_ai.utils.torch": [[153, null]], "cuvis_ai.utils.torch.InputDimension": [[154, null]], "cuvis_ai.utils.torch.get_output_shape": [[155, null]], "cuvis_ai.utils.torch.guess_input_dimensionalty": [[156, null]], "cuvis_ai.utils.visualize": [[157, null]], "cuvis_ai.utils.visualize.visualize_features": [[158, null]], "cuvis_ai.utils.visualize.visualize_image": [[159, null]], "pip installation": [[162, "pip-installation"]]}, "docnames": ["_autosummary/cuvis_ai", "_autosummary/cuvis_ai.deciders", "_autosummary/cuvis_ai.deciders.base_decider", "_autosummary/cuvis_ai.deciders.base_decider.BaseDecider", "_autosummary/cuvis_ai.deciders.binary_decider", "_autosummary/cuvis_ai.deciders.binary_decider.BinaryDecider", "_autosummary/cuvis_ai.deciders.cascaded_decider", "_autosummary/cuvis_ai.deciders.cascaded_decider.Cascaded", "_autosummary/cuvis_ai.deciders.combining_decider", "_autosummary/cuvis_ai.deciders.combining_decider.CombiningDecider", "_autosummary/cuvis_ai.deciders.combining_decider.all_agree", "_autosummary/cuvis_ai.deciders.combining_decider.at_least_n_agree", "_autosummary/cuvis_ai.deciders.multiclass_decider", "_autosummary/cuvis_ai.deciders.multiclass_decider.MultiClassDecider", "_autosummary/cuvis_ai.distance", "_autosummary/cuvis_ai.distance.distance", "_autosummary/cuvis_ai.distance.distance.AbstractDistance", "_autosummary/cuvis_ai.distance.distance.Canberra", "_autosummary/cuvis_ai.distance.distance.ECS", "_autosummary/cuvis_ai.distance.distance.Euclidean", "_autosummary/cuvis_ai.distance.distance.GFC", "_autosummary/cuvis_ai.distance.distance.Manhattan", "_autosummary/cuvis_ai.distance.distance.Minkowski", "_autosummary/cuvis_ai.distance.distance.SpectralAngle", "_autosummary/cuvis_ai.node", "_autosummary/cuvis_ai.node.Consumers", "_autosummary/cuvis_ai.node.Consumers.CubeConsumer", "_autosummary/cuvis_ai.node.Consumers.LabelConsumer", "_autosummary/cuvis_ai.node.Consumers.LabelConsumerInference", "_autosummary/cuvis_ai.node.Consumers.MetadataConsumer", "_autosummary/cuvis_ai.node.Consumers.MetadataConsumerInference", "_autosummary/cuvis_ai.node.base", "_autosummary/cuvis_ai.node.base.BaseSupervised", "_autosummary/cuvis_ai.node.base.BaseTransformation", "_autosummary/cuvis_ai.node.base.BaseUnsupervised", "_autosummary/cuvis_ai.node.base.Preprocessor", "_autosummary/cuvis_ai.node.node", "_autosummary/cuvis_ai.node.node.Node", "_autosummary/cuvis_ai.node.sklearn", "_autosummary/cuvis_ai.node.skorch", "_autosummary/cuvis_ai.node.torch", "_autosummary/cuvis_ai.node.wrap", "_autosummary/cuvis_ai.node.wrap.make_node", "_autosummary/cuvis_ai.pipeline", "_autosummary/cuvis_ai.pipeline.executor", "_autosummary/cuvis_ai.pipeline.executor.MemoryExecutor", "_autosummary/cuvis_ai.pipeline.graph", "_autosummary/cuvis_ai.pipeline.graph.Graph", "_autosummary/cuvis_ai.preprocessor", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.NMF", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.PCA", "_autosummary/cuvis_ai.supervised", "_autosummary/cuvis_ai.supervised.sklearn_wrapped", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.LDA", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.MLP", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.QDA", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.SVM", "_autosummary/cuvis_ai.supervised.skorch_supervised", "_autosummary/cuvis_ai.supervised.skorch_supervised.SkorchSupervised", "_autosummary/cuvis_ai.test", "_autosummary/cuvis_ai.test.test_numpy_utils", "_autosummary/cuvis_ai.test.test_numpy_utils.TestNumpyUtils", "_autosummary/cuvis_ai.test.test_pipeline_graph", "_autosummary/cuvis_ai.test.test_preprocessor_structural", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA", "_autosummary/cuvis_ai.test.test_serialization", "_autosummary/cuvis_ai.test.test_serialization.TestNodeSerialization", "_autosummary/cuvis_ai.test.test_serialization.TestPreprocessorNMF", "_autosummary/cuvis_ai.test.test_serialization.TestPreprocessorPCA", "_autosummary/cuvis_ai.test.test_serialization.TestSupervisedLDA", "_autosummary/cuvis_ai.test.test_serialization.TestTransformationReflectance", "_autosummary/cuvis_ai.test.test_serialization.TestTransformationTorch", "_autosummary/cuvis_ai.test.test_serialization.TestTransformationTorchVision", "_autosummary/cuvis_ai.test.test_serialization.TestUnsupervisedGMM", "_autosummary/cuvis_ai.test.test_serialization.TestUnsupervisedKMeans", "_autosummary/cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift", "_autosummary/cuvis_ai.test.test_unsupervised_structural", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode", "_autosummary/cuvis_ai.transformation", "_autosummary/cuvis_ai.transformation.reflectance", "_autosummary/cuvis_ai.transformation.reflectance.Reflectance", "_autosummary/cuvis_ai.transformation.torch_transformation", "_autosummary/cuvis_ai.transformation.torch_transformation.TorchTransformation", "_autosummary/cuvis_ai.transformation.torchvision_transformation", "_autosummary/cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation", "_autosummary/cuvis_ai.tv_transforms", "_autosummary/cuvis_ai.tv_transforms.Bandpass", "_autosummary/cuvis_ai.tv_transforms.Bandpass.call_super_init", "_autosummary/cuvis_ai.tv_transforms.Bandpass.dump_patches", "_autosummary/cuvis_ai.tv_transforms.Bandpass.training", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.call_super_init", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.dump_patches", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.training", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.training", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.training", "_autosummary/cuvis_ai.tv_transforms.WavelengthList", "_autosummary/cuvis_ai.unsupervised", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.GMM", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.KMeans", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.MeanShift", "_autosummary/cuvis_ai.utils", "_autosummary/cuvis_ai.utils.dependencies", "_autosummary/cuvis_ai.utils.dependencies.get_installed_packages", "_autosummary/cuvis_ai.utils.dependencies.get_installed_packages_str", "_autosummary/cuvis_ai.utils.filesystem", "_autosummary/cuvis_ai.utils.filesystem.change_working_dir", "_autosummary/cuvis_ai.utils.nn_config", "_autosummary/cuvis_ai.utils.nn_config.Adam", "_autosummary/cuvis_ai.utils.nn_config.Optimizer", "_autosummary/cuvis_ai.utils.nn_config.SGD", "_autosummary/cuvis_ai.utils.numpy", "_autosummary/cuvis_ai.utils.numpy.binary_mask_to_rle", "_autosummary/cuvis_ai.utils.numpy.check_array_shape", "_autosummary/cuvis_ai.utils.numpy.flatten_batch_and_labels", "_autosummary/cuvis_ai.utils.numpy.flatten_batch_and_spatial", "_autosummary/cuvis_ai.utils.numpy.flatten_labels", "_autosummary/cuvis_ai.utils.numpy.flatten_spatial", "_autosummary/cuvis_ai.utils.numpy.gen_coco_labels", "_autosummary/cuvis_ai.utils.numpy.get_shape_without_batch", "_autosummary/cuvis_ai.utils.numpy.unflatten_batch_and_labels", "_autosummary/cuvis_ai.utils.numpy.unflatten_batch_and_spatial", "_autosummary/cuvis_ai.utils.numpy.unflatten_labels", "_autosummary/cuvis_ai.utils.numpy.unflatten_spatial", "_autosummary/cuvis_ai.utils.serializer", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlDumper", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlLoader", "_autosummary/cuvis_ai.utils.serializer.OldSerializer", "_autosummary/cuvis_ai.utils.serializer.Serializer", "_autosummary/cuvis_ai.utils.serializer.YamlSerializer", "_autosummary/cuvis_ai.utils.serializer.numpy_array_binary_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_array_file_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_array_string_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_file_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_string_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_representer", "_autosummary/cuvis_ai.utils.serializer.numpy_float64_constructor", "_autosummary/cuvis_ai.utils.serializer.numpy_float64_representer", "_autosummary/cuvis_ai.utils.test", "_autosummary/cuvis_ai.utils.test.get_np_dummy_data", "_autosummary/cuvis_ai.utils.torch", "_autosummary/cuvis_ai.utils.torch.InputDimension", "_autosummary/cuvis_ai.utils.torch.get_output_shape", "_autosummary/cuvis_ai.utils.torch.guess_input_dimensionalty", "_autosummary/cuvis_ai.utils.visualize", "_autosummary/cuvis_ai.utils.visualize.visualize_features", "_autosummary/cuvis_ai.utils.visualize.visualize_image", "index", "user/concepts", "user/installation", "user/quickstart", "user/tutorials"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["_autosummary/cuvis_ai.rst", "_autosummary/cuvis_ai.deciders.rst", "_autosummary/cuvis_ai.deciders.base_decider.rst", "_autosummary/cuvis_ai.deciders.base_decider.BaseDecider.rst", "_autosummary/cuvis_ai.deciders.binary_decider.rst", "_autosummary/cuvis_ai.deciders.binary_decider.BinaryDecider.rst", "_autosummary/cuvis_ai.deciders.cascaded_decider.rst", "_autosummary/cuvis_ai.deciders.cascaded_decider.Cascaded.rst", "_autosummary/cuvis_ai.deciders.combining_decider.rst", "_autosummary/cuvis_ai.deciders.combining_decider.CombiningDecider.rst", "_autosummary/cuvis_ai.deciders.combining_decider.all_agree.rst", "_autosummary/cuvis_ai.deciders.combining_decider.at_least_n_agree.rst", "_autosummary/cuvis_ai.deciders.multiclass_decider.rst", "_autosummary/cuvis_ai.deciders.multiclass_decider.MultiClassDecider.rst", "_autosummary/cuvis_ai.distance.rst", "_autosummary/cuvis_ai.distance.distance.rst", "_autosummary/cuvis_ai.distance.distance.AbstractDistance.rst", "_autosummary/cuvis_ai.distance.distance.Canberra.rst", "_autosummary/cuvis_ai.distance.distance.ECS.rst", "_autosummary/cuvis_ai.distance.distance.Euclidean.rst", "_autosummary/cuvis_ai.distance.distance.GFC.rst", "_autosummary/cuvis_ai.distance.distance.Manhattan.rst", "_autosummary/cuvis_ai.distance.distance.Minkowski.rst", "_autosummary/cuvis_ai.distance.distance.SpectralAngle.rst", "_autosummary/cuvis_ai.node.rst", "_autosummary/cuvis_ai.node.Consumers.rst", "_autosummary/cuvis_ai.node.Consumers.CubeConsumer.rst", "_autosummary/cuvis_ai.node.Consumers.LabelConsumer.rst", "_autosummary/cuvis_ai.node.Consumers.LabelConsumerInference.rst", "_autosummary/cuvis_ai.node.Consumers.MetadataConsumer.rst", "_autosummary/cuvis_ai.node.Consumers.MetadataConsumerInference.rst", "_autosummary/cuvis_ai.node.base.rst", "_autosummary/cuvis_ai.node.base.BaseSupervised.rst", "_autosummary/cuvis_ai.node.base.BaseTransformation.rst", "_autosummary/cuvis_ai.node.base.BaseUnsupervised.rst", "_autosummary/cuvis_ai.node.base.Preprocessor.rst", "_autosummary/cuvis_ai.node.node.rst", "_autosummary/cuvis_ai.node.node.Node.rst", "_autosummary/cuvis_ai.node.sklearn.rst", "_autosummary/cuvis_ai.node.skorch.rst", "_autosummary/cuvis_ai.node.torch.rst", "_autosummary/cuvis_ai.node.wrap.rst", "_autosummary/cuvis_ai.node.wrap.make_node.rst", "_autosummary/cuvis_ai.pipeline.rst", "_autosummary/cuvis_ai.pipeline.executor.rst", "_autosummary/cuvis_ai.pipeline.executor.MemoryExecutor.rst", "_autosummary/cuvis_ai.pipeline.graph.rst", "_autosummary/cuvis_ai.pipeline.graph.Graph.rst", "_autosummary/cuvis_ai.preprocessor.rst", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.rst", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.NMF.rst", "_autosummary/cuvis_ai.preprocessor.sklearn_wrapped.PCA.rst", "_autosummary/cuvis_ai.supervised.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.LDA.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.MLP.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.QDA.rst", "_autosummary/cuvis_ai.supervised.sklearn_wrapped.SVM.rst", "_autosummary/cuvis_ai.supervised.skorch_supervised.rst", "_autosummary/cuvis_ai.supervised.skorch_supervised.SkorchSupervised.rst", "_autosummary/cuvis_ai.test.rst", "_autosummary/cuvis_ai.test.test_numpy_utils.rst", "_autosummary/cuvis_ai.test.test_numpy_utils.TestNumpyUtils.rst", "_autosummary/cuvis_ai.test.test_pipeline_graph.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.rst", "_autosummary/cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.rst", "_autosummary/cuvis_ai.test.test_serialization.rst", "_autosummary/cuvis_ai.test.test_serialization.TestNodeSerialization.rst", "_autosummary/cuvis_ai.test.test_serialization.TestPreprocessorNMF.rst", "_autosummary/cuvis_ai.test.test_serialization.TestPreprocessorPCA.rst", "_autosummary/cuvis_ai.test.test_serialization.TestSupervisedLDA.rst", "_autosummary/cuvis_ai.test.test_serialization.TestTransformationReflectance.rst", "_autosummary/cuvis_ai.test.test_serialization.TestTransformationTorch.rst", "_autosummary/cuvis_ai.test.test_serialization.TestTransformationTorchVision.rst", "_autosummary/cuvis_ai.test.test_serialization.TestUnsupervisedGMM.rst", "_autosummary/cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.rst", "_autosummary/cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.rst", "_autosummary/cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.rst", "_autosummary/cuvis_ai.transformation.rst", "_autosummary/cuvis_ai.transformation.reflectance.rst", "_autosummary/cuvis_ai.transformation.reflectance.Reflectance.rst", "_autosummary/cuvis_ai.transformation.torch_transformation.rst", "_autosummary/cuvis_ai.transformation.torch_transformation.TorchTransformation.rst", "_autosummary/cuvis_ai.transformation.torchvision_transformation.rst", "_autosummary/cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.rst", "_autosummary/cuvis_ai.tv_transforms.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.Bandpass.training.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.MultiBandpass.training.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeStdDev.training.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches.rst", "_autosummary/cuvis_ai.tv_transforms.NormalizeToFloat.training.rst", "_autosummary/cuvis_ai.tv_transforms.WavelengthList.rst", "_autosummary/cuvis_ai.unsupervised.rst", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.rst", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.GMM.rst", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.KMeans.rst", "_autosummary/cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.rst", "_autosummary/cuvis_ai.utils.rst", "_autosummary/cuvis_ai.utils.dependencies.rst", "_autosummary/cuvis_ai.utils.dependencies.get_installed_packages.rst", "_autosummary/cuvis_ai.utils.dependencies.get_installed_packages_str.rst", "_autosummary/cuvis_ai.utils.filesystem.rst", "_autosummary/cuvis_ai.utils.filesystem.change_working_dir.rst", "_autosummary/cuvis_ai.utils.nn_config.rst", "_autosummary/cuvis_ai.utils.nn_config.Adam.rst", "_autosummary/cuvis_ai.utils.nn_config.Optimizer.rst", "_autosummary/cuvis_ai.utils.nn_config.SGD.rst", "_autosummary/cuvis_ai.utils.numpy.rst", "_autosummary/cuvis_ai.utils.numpy.binary_mask_to_rle.rst", "_autosummary/cuvis_ai.utils.numpy.check_array_shape.rst", "_autosummary/cuvis_ai.utils.numpy.flatten_batch_and_labels.rst", "_autosummary/cuvis_ai.utils.numpy.flatten_batch_and_spatial.rst", "_autosummary/cuvis_ai.utils.numpy.flatten_labels.rst", "_autosummary/cuvis_ai.utils.numpy.flatten_spatial.rst", "_autosummary/cuvis_ai.utils.numpy.gen_coco_labels.rst", "_autosummary/cuvis_ai.utils.numpy.get_shape_without_batch.rst", "_autosummary/cuvis_ai.utils.numpy.unflatten_batch_and_labels.rst", "_autosummary/cuvis_ai.utils.numpy.unflatten_batch_and_spatial.rst", "_autosummary/cuvis_ai.utils.numpy.unflatten_labels.rst", "_autosummary/cuvis_ai.utils.numpy.unflatten_spatial.rst", "_autosummary/cuvis_ai.utils.serializer.rst", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlDumper.rst", "_autosummary/cuvis_ai.utils.serializer.CuvisYamlLoader.rst", "_autosummary/cuvis_ai.utils.serializer.OldSerializer.rst", "_autosummary/cuvis_ai.utils.serializer.Serializer.rst", "_autosummary/cuvis_ai.utils.serializer.YamlSerializer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_array_binary_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_array_file_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_array_string_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_file_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_arrray_string_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float32_representer.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float64_constructor.rst", "_autosummary/cuvis_ai.utils.serializer.numpy_float64_representer.rst", "_autosummary/cuvis_ai.utils.test.rst", "_autosummary/cuvis_ai.utils.test.get_np_dummy_data.rst", "_autosummary/cuvis_ai.utils.torch.rst", "_autosummary/cuvis_ai.utils.torch.InputDimension.rst", "_autosummary/cuvis_ai.utils.torch.get_output_shape.rst", "_autosummary/cuvis_ai.utils.torch.guess_input_dimensionalty.rst", "_autosummary/cuvis_ai.utils.visualize.rst", "_autosummary/cuvis_ai.utils.visualize.visualize_features.rst", "_autosummary/cuvis_ai.utils.visualize.visualize_image.rst", "index.rst", "user/concepts.rst", "user/installation.rst", "user/quickstart.rst", "user/tutorials.rst"], "indexentries": {"__init__() (cuvis_ai.deciders.base_decider.basedecider method)": [[3, "cuvis_ai.deciders.base_decider.BaseDecider.__init__", false]], "__init__() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[5, "cuvis_ai.deciders.binary_decider.BinaryDecider.__init__", false]], "__init__() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[7, "cuvis_ai.deciders.cascaded_decider.Cascaded.__init__", false]], "__init__() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[9, "cuvis_ai.deciders.combining_decider.CombiningDecider.__init__", false]], "__init__() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[13, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.__init__", false]], "__init__() (cuvis_ai.distance.distance.abstractdistance method)": [[16, "cuvis_ai.distance.distance.AbstractDistance.__init__", false]], "__init__() (cuvis_ai.distance.distance.canberra method)": [[17, "cuvis_ai.distance.distance.Canberra.__init__", false]], "__init__() (cuvis_ai.distance.distance.ecs method)": [[18, "cuvis_ai.distance.distance.ECS.__init__", false]], "__init__() (cuvis_ai.distance.distance.euclidean method)": [[19, "cuvis_ai.distance.distance.Euclidean.__init__", false]], "__init__() (cuvis_ai.distance.distance.gfc method)": [[20, "cuvis_ai.distance.distance.GFC.__init__", false]], "__init__() (cuvis_ai.distance.distance.manhattan method)": [[21, "cuvis_ai.distance.distance.Manhattan.__init__", false]], "__init__() (cuvis_ai.distance.distance.minkowski method)": [[22, "cuvis_ai.distance.distance.Minkowski.__init__", false]], "__init__() (cuvis_ai.distance.distance.spectralangle method)": [[23, "cuvis_ai.distance.distance.SpectralAngle.__init__", false]], "__init__() (cuvis_ai.node.base.basesupervised method)": [[32, "cuvis_ai.node.base.BaseSupervised.__init__", false]], "__init__() (cuvis_ai.node.base.basetransformation method)": [[33, "cuvis_ai.node.base.BaseTransformation.__init__", false]], "__init__() (cuvis_ai.node.base.baseunsupervised method)": [[34, "cuvis_ai.node.base.BaseUnsupervised.__init__", false]], "__init__() (cuvis_ai.node.base.preprocessor method)": [[35, "cuvis_ai.node.base.Preprocessor.__init__", false]], "__init__() (cuvis_ai.node.consumers.cubeconsumer method)": [[26, "cuvis_ai.node.Consumers.CubeConsumer.__init__", false]], "__init__() (cuvis_ai.node.consumers.labelconsumer method)": [[27, "cuvis_ai.node.Consumers.LabelConsumer.__init__", false]], "__init__() (cuvis_ai.node.consumers.labelconsumerinference method)": [[28, "cuvis_ai.node.Consumers.LabelConsumerInference.__init__", false]], "__init__() (cuvis_ai.node.consumers.metadataconsumer method)": [[29, "cuvis_ai.node.Consumers.MetadataConsumer.__init__", false]], "__init__() (cuvis_ai.node.consumers.metadataconsumerinference method)": [[30, "cuvis_ai.node.Consumers.MetadataConsumerInference.__init__", false]], "__init__() (cuvis_ai.node.node.node method)": [[37, "cuvis_ai.node.node.Node.__init__", false]], "__init__() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[45, "cuvis_ai.pipeline.executor.MemoryExecutor.__init__", false]], "__init__() (cuvis_ai.pipeline.graph.graph method)": [[47, "cuvis_ai.pipeline.graph.Graph.__init__", false]], "__init__() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.__init__", false]], "__init__() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.__init__", false]], "__init__() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.__init__", false]], "__init__() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.__init__", false]], "__init__() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.__init__", false]], "__init__() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.__init__", false]], "__init__() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[59, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.__init__", false]], "__init__() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.__init__", false]], "__init__() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[65, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.__init__", false]], "__init__() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.__init__", false]], "__init__() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testnodeserialization method)": [[69, "cuvis_ai.test.test_serialization.TestNodeSerialization.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.__init__", false]], "__init__() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.__init__", false]], "__init__() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.__init__", false]], "__init__() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.__init__", false]], "__init__() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[82, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.__init__", false]], "__init__() (cuvis_ai.transformation.reflectance.reflectance method)": [[85, "cuvis_ai.transformation.reflectance.Reflectance.__init__", false]], "__init__() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[87, "cuvis_ai.transformation.torch_transformation.TorchTransformation.__init__", false]], "__init__() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[89, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.__init__", false]], "__init__() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.__init__", false]], "__init__() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.__init__", false]], "__init__() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.__init__", false]], "__init__() (cuvis_ai.utils.nn_config.adam method)": [[120, "cuvis_ai.utils.nn_config.Adam.__init__", false]], "__init__() (cuvis_ai.utils.nn_config.optimizer method)": [[121, "cuvis_ai.utils.nn_config.Optimizer.__init__", false]], "__init__() (cuvis_ai.utils.nn_config.sgd method)": [[122, "cuvis_ai.utils.nn_config.SGD.__init__", false]], "__init__() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.__init__", false]], "__init__() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.__init__", false]], "__init__() (cuvis_ai.utils.serializer.oldserializer method)": [[139, "cuvis_ai.utils.serializer.OldSerializer.__init__", false]], "__init__() (cuvis_ai.utils.serializer.serializer method)": [[140, "cuvis_ai.utils.serializer.Serializer.__init__", false]], "__init__() (cuvis_ai.utils.serializer.yamlserializer method)": [[141, "cuvis_ai.utils.serializer.YamlSerializer.__init__", false]], "__init__() (cuvis_ai.utils.torch.inputdimension method)": [[154, "cuvis_ai.utils.torch.InputDimension.__init__", false]], "abstractdistance (class in cuvis_ai.distance.distance)": [[16, "cuvis_ai.distance.distance.AbstractDistance", false]], "adam (class in cuvis_ai.utils.nn_config)": [[120, "cuvis_ai.utils.nn_config.Adam", false]], "add_base_node() (cuvis_ai.pipeline.graph.graph method)": [[47, "cuvis_ai.pipeline.graph.Graph.add_base_node", false]], "add_constructor() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_constructor", false]], "add_edge() (cuvis_ai.pipeline.graph.graph method)": [[47, "cuvis_ai.pipeline.graph.Graph.add_edge", false]], "add_implicit_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_implicit_resolver", false]], "add_implicit_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_implicit_resolver", false]], "add_indent() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_indent", false]], "add_multi_constructor() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_multi_constructor", false]], "add_multi_representer() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_multi_representer", false]], "add_node() (cuvis_ai.pipeline.graph.graph method)": [[47, "cuvis_ai.pipeline.graph.Graph.add_node", false]], "add_path_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_path_resolver", false]], "add_path_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader class method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.add_path_resolver", false]], "add_representer() (cuvis_ai.utils.serializer.cuvisyamldumper class method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.add_representer", false]], "addclasscleanup() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testpreprocessornmf class method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testpreprocessorpca class method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testsupervisedlda class method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testtransformationreflectance class method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testtransformationtorch class method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testtransformationtorchvision class method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testunsupervisedgmm class method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testunsupervisedkmeans class method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift class method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.addClassCleanup", false]], "addclasscleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.addClassCleanup", false]], "addcleanup() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.addCleanup", false]], "addcleanup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.addCleanup", false]], "addtypeequalityfunc() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.addTypeEqualityFunc", false]], "addtypeequalityfunc() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.addTypeEqualityFunc", false]], "aic() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.aic", false]], "all_agree() (in module cuvis_ai.deciders.combining_decider)": [[10, "cuvis_ai.deciders.combining_decider.all_agree", false]], "alpha (cuvis_ai.utils.nn_config.adam attribute)": [[120, "cuvis_ai.utils.nn_config.Adam.alpha", false]], "alpha (cuvis_ai.utils.nn_config.sgd attribute)": [[122, "cuvis_ai.utils.nn_config.SGD.alpha", false]], "analyze_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.analyze_scalar", false]], "anchor_node() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.anchor_node", false]], "anchor_template (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.ANCHOR_TEMPLATE", false]], "args (cuvis_ai.utils.nn_config.adam property)": [[120, "cuvis_ai.utils.nn_config.Adam.args", false]], "args (cuvis_ai.utils.nn_config.optimizer property)": [[121, "cuvis_ai.utils.nn_config.Optimizer.args", false]], "args (cuvis_ai.utils.nn_config.sgd property)": [[122, "cuvis_ai.utils.nn_config.SGD.args", false]], "ascend_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.ascend_resolver", false]], "ascend_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.ascend_resolver", false]], "assert_() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assert_", false]], "assert_() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assert_", false]], "assert_() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assert_", false]], "assert_() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assert_", false]], "assert_() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assert_", false]], "assert_() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assert_", false]], "assertalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertAlmostEqual", false]], "assertalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertAlmostEqual", false]], "assertalmostequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertAlmostEquals", false]], "assertalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertAlmostEquals", false]], "assertcountequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertCountEqual", false]], "assertcountequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertCountEqual", false]], "assertdictcontainssubset() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertDictContainsSubset", false]], "assertdictcontainssubset() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertDictContainsSubset", false]], "assertdictequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertDictEqual", false]], "assertdictequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertDictEqual", false]], "assertequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertEqual", false]], "assertequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertEqual", false]], "assertequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertEqual", false]], "assertequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertEqual", false]], "assertequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertEqual", false]], "assertequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertEqual", false]], "assertequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertEquals", false]], "assertequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertEquals", false]], "assertequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertEquals", false]], "assertequals() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertEquals", false]], "assertequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertEquals", false]], "assertequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertEquals", false]], "assertfalse() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertFalse", false]], "assertfalse() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertFalse", false]], "assertgreater() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertGreater", false]], "assertgreater() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertGreater", false]], "assertgreaterequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertGreaterEqual", false]], "assertgreaterequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertGreaterEqual", false]], "assertin() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIn", false]], "assertin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIn", false]], "assertin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertIn", false]], "assertin() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertIn", false]], "assertin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIn", false]], "assertin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIn", false]], "assertis() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIs", false]], "assertis() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIs", false]], "assertis() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertIs", false]], "assertis() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertIs", false]], "assertis() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIs", false]], "assertis() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIs", false]], "assertisinstance() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsInstance", false]], "assertisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsInstance", false]], "assertisnone() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsNone", false]], "assertisnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsNone", false]], "assertisnot() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsNot", false]], "assertisnot() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsNot", false]], "assertisnotnone() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertIsNotNone", false]], "assertisnotnone() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertIsNotNone", false]], "assertless() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertLess", false]], "assertless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertLess", false]], "assertless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertLess", false]], "assertless() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertLess", false]], "assertless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertLess", false]], "assertless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertLess", false]], "assertlessequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertLessEqual", false]], "assertlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertLessEqual", false]], "assertlistequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertListEqual", false]], "assertlistequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertListEqual", false]], "assertlogs() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertLogs", false]], "assertlogs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertLogs", false]], "assertmultilineequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertMultiLineEqual", false]], "assertmultilineequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertMultiLineEqual", false]], "assertnologs() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNoLogs", false]], "assertnologs() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNoLogs", false]], "assertnotalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotAlmostEqual", false]], "assertnotalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotAlmostEqual", false]], "assertnotalmostequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotAlmostEquals", false]], "assertnotalmostequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotAlmostEquals", false]], "assertnotequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotEqual", false]], "assertnotequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotEqual", false]], "assertnotequals() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotEquals", false]], "assertnotequals() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotEquals", false]], "assertnotin() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotIn", false]], "assertnotin() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotIn", false]], "assertnotisinstance() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotIsInstance", false]], "assertnotisinstance() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotIsInstance", false]], "assertnotregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotRegex", false]], "assertnotregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotRegex", false]], "assertnotregexpmatches() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertNotRegexpMatches", false]], "assertnotregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertNotRegexpMatches", false]], "assertraises() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRaises", false]], "assertraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRaises", false]], "assertraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertRaises", false]], "assertraises() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertRaises", false]], "assertraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRaises", false]], "assertraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRaises", false]], "assertraisesregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRaisesRegex", false]], "assertraisesregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRaisesRegex", false]], "assertraisesregexp() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRaisesRegexp", false]], "assertraisesregexp() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRaisesRegexp", false]], "assertregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRegex", false]], "assertregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRegex", false]], "assertregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertRegex", false]], "assertregex() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertRegex", false]], "assertregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRegex", false]], "assertregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRegex", false]], "assertregexpmatches() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertRegexpMatches", false]], "assertregexpmatches() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertRegexpMatches", false]], "assertsequenceequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertSequenceEqual", false]], "assertsequenceequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertSequenceEqual", false]], "assertsetequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertSetEqual", false]], "assertsetequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertSetEqual", false]], "asserttrue() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertTrue", false]], "asserttrue() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertTrue", false]], "asserttupleequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertTupleEqual", false]], "asserttupleequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertTupleEqual", false]], "assertwarns() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertWarns", false]], "assertwarns() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertWarns", false]], "assertwarnsregex() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.assertWarnsRegex", false]], "assertwarnsregex() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.assertWarnsRegex", false]], "at_least_n_agree() (in module cuvis_ai.deciders.combining_decider)": [[11, "cuvis_ai.deciders.combining_decider.at_least_n_agree", false]], "basedecider (class in cuvis_ai.deciders.base_decider)": [[3, "cuvis_ai.deciders.base_decider.BaseDecider", false]], "basesupervised (class in cuvis_ai.node.base)": [[32, "cuvis_ai.node.base.BaseSupervised", false]], "basetransformation (class in cuvis_ai.node.base)": [[33, "cuvis_ai.node.base.BaseTransformation", false]], "baseunsupervised (class in cuvis_ai.node.base)": [[34, "cuvis_ai.node.base.BaseUnsupervised", false]], "beta_1 (cuvis_ai.utils.nn_config.adam attribute)": [[120, "cuvis_ai.utils.nn_config.Adam.beta_1", false]], "beta_2 (cuvis_ai.utils.nn_config.adam attribute)": [[120, "cuvis_ai.utils.nn_config.Adam.beta_2", false]], "bic() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.bic", false]], "binary_mask_to_rle() (in module cuvis_ai.utils.numpy)": [[124, "cuvis_ai.utils.numpy.binary_mask_to_rle", false]], "binarydecider (class in cuvis_ai.deciders.binary_decider)": [[5, "cuvis_ai.deciders.binary_decider.BinaryDecider", false]], "bool_values (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.bool_values", false]], "call_super_init (cuvis_ai.tv_transforms.bandpass attribute)": [[92, "cuvis_ai.tv_transforms.Bandpass.call_super_init", false]], "call_super_init (cuvis_ai.tv_transforms.multibandpass attribute)": [[96, "cuvis_ai.tv_transforms.MultiBandpass.call_super_init", false]], "call_super_init (cuvis_ai.tv_transforms.normalizestddev attribute)": [[100, "cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init", false]], "call_super_init (cuvis_ai.tv_transforms.normalizetofloat attribute)": [[104, "cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init", false]], "canberra (class in cuvis_ai.distance.distance)": [[17, "cuvis_ai.distance.distance.Canberra", false]], "cascaded (class in cuvis_ai.deciders.cascaded_decider)": [[7, "cuvis_ai.deciders.cascaded_decider.Cascaded", false]], "change_working_dir() (in module cuvis_ai.utils.filesystem)": [[118, "cuvis_ai.utils.filesystem.change_working_dir", false]], "check_array_shape() (in module cuvis_ai.utils.numpy)": [[125, "cuvis_ai.utils.numpy.check_array_shape", false]], "check_block_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_block_entry", false]], "check_data() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_data", false]], "check_directive() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_directive", false]], "check_document_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_document_end", false]], "check_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_document_start", false]], "check_empty_document() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_empty_document", false]], "check_empty_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_empty_mapping", false]], "check_empty_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_empty_sequence", false]], "check_event() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_event", false]], "check_input_dim() (cuvis_ai.deciders.base_decider.basedecider method)": [[3, "cuvis_ai.deciders.base_decider.BaseDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[5, "cuvis_ai.deciders.binary_decider.BinaryDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[7, "cuvis_ai.deciders.cascaded_decider.Cascaded.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[9, "cuvis_ai.deciders.combining_decider.CombiningDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[13, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.abstractdistance method)": [[16, "cuvis_ai.distance.distance.AbstractDistance.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.canberra method)": [[17, "cuvis_ai.distance.distance.Canberra.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.ecs method)": [[18, "cuvis_ai.distance.distance.ECS.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.euclidean method)": [[19, "cuvis_ai.distance.distance.Euclidean.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.gfc method)": [[20, "cuvis_ai.distance.distance.GFC.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.manhattan method)": [[21, "cuvis_ai.distance.distance.Manhattan.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.minkowski method)": [[22, "cuvis_ai.distance.distance.Minkowski.check_input_dim", false]], "check_input_dim() (cuvis_ai.distance.distance.spectralangle method)": [[23, "cuvis_ai.distance.distance.SpectralAngle.check_input_dim", false]], "check_input_dim() (cuvis_ai.node.node.node method)": [[37, "cuvis_ai.node.node.Node.check_input_dim", false]], "check_input_dim() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.check_input_dim", false]], "check_input_dim() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.check_input_dim", false]], "check_input_dim() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.check_input_dim", false]], "check_input_dim() (cuvis_ai.transformation.reflectance.reflectance method)": [[85, "cuvis_ai.transformation.reflectance.Reflectance.check_input_dim", false]], "check_input_dim() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[87, "cuvis_ai.transformation.torch_transformation.TorchTransformation.check_input_dim", false]], "check_input_dim() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[89, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.check_input_dim", false]], "check_input_dim() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.check_input_dim", false]], "check_input_dim() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.check_input_dim", false]], "check_input_dim() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.check_input_dim", false]], "check_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_key", false]], "check_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_node", false]], "check_output_dim() (cuvis_ai.deciders.base_decider.basedecider method)": [[3, "cuvis_ai.deciders.base_decider.BaseDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[5, "cuvis_ai.deciders.binary_decider.BinaryDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[7, "cuvis_ai.deciders.cascaded_decider.Cascaded.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[9, "cuvis_ai.deciders.combining_decider.CombiningDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[13, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.abstractdistance method)": [[16, "cuvis_ai.distance.distance.AbstractDistance.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.canberra method)": [[17, "cuvis_ai.distance.distance.Canberra.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.ecs method)": [[18, "cuvis_ai.distance.distance.ECS.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.euclidean method)": [[19, "cuvis_ai.distance.distance.Euclidean.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.gfc method)": [[20, "cuvis_ai.distance.distance.GFC.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.manhattan method)": [[21, "cuvis_ai.distance.distance.Manhattan.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.minkowski method)": [[22, "cuvis_ai.distance.distance.Minkowski.check_output_dim", false]], "check_output_dim() (cuvis_ai.distance.distance.spectralangle method)": [[23, "cuvis_ai.distance.distance.SpectralAngle.check_output_dim", false]], "check_output_dim() (cuvis_ai.node.node.node method)": [[37, "cuvis_ai.node.node.Node.check_output_dim", false]], "check_output_dim() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.check_output_dim", false]], "check_output_dim() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.check_output_dim", false]], "check_output_dim() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.check_output_dim", false]], "check_output_dim() (cuvis_ai.transformation.reflectance.reflectance method)": [[85, "cuvis_ai.transformation.reflectance.Reflectance.check_output_dim", false]], "check_output_dim() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[87, "cuvis_ai.transformation.torch_transformation.TorchTransformation.check_output_dim", false]], "check_output_dim() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[89, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.check_output_dim", false]], "check_output_dim() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.check_output_dim", false]], "check_output_dim() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.check_output_dim", false]], "check_output_dim() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.check_output_dim", false]], "check_plain() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_plain", false]], "check_printable() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_printable", false]], "check_resolver_prefix() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_resolver_prefix", false]], "check_resolver_prefix() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_resolver_prefix", false]], "check_simple_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.check_simple_key", false]], "check_state_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_state_key", false]], "check_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_token", false]], "check_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.check_value", false]], "choose_scalar_style() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.choose_scalar_style", false]], "close() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.close", false]], "coef_ (cuvis_ai.supervised.sklearn_wrapped.svm property)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.coef_", false]], "combiningdecider (class in cuvis_ai.deciders.combining_decider)": [[9, "cuvis_ai.deciders.combining_decider.CombiningDecider", false]], "compose_document() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_document", false]], "compose_mapping_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_mapping_node", false]], "compose_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_node", false]], "compose_scalar_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_scalar_node", false]], "compose_sequence_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.compose_sequence_node", false]], "construct_document() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_document", false]], "construct_mapping() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_mapping", false]], "construct_object() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_object", false]], "construct_pairs() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_pairs", false]], "construct_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_scalar", false]], "construct_sequence() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_sequence", false]], "construct_undefined() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_undefined", false]], "construct_yaml_binary() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_binary", false]], "construct_yaml_bool() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_bool", false]], "construct_yaml_float() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_float", false]], "construct_yaml_int() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_int", false]], "construct_yaml_map() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_map", false]], "construct_yaml_null() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_null", false]], "construct_yaml_object() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_object", false]], "construct_yaml_omap() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_omap", false]], "construct_yaml_pairs() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_pairs", false]], "construct_yaml_seq() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_seq", false]], "construct_yaml_set() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_set", false]], "construct_yaml_str() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_str", false]], "construct_yaml_timestamp() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.construct_yaml_timestamp", false]], "counttestcases() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.countTestCases", false]], "counttestcases() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.countTestCases", false]], "cubeconsumer (class in cuvis_ai.node.consumers)": [[26, "cuvis_ai.node.Consumers.CubeConsumer", false]], "cuvis_ai": [[0, "module-cuvis_ai", false]], "cuvis_ai.deciders": [[1, "module-cuvis_ai.deciders", false]], "cuvis_ai.deciders.base_decider": [[2, "module-cuvis_ai.deciders.base_decider", false]], "cuvis_ai.deciders.binary_decider": [[4, "module-cuvis_ai.deciders.binary_decider", false]], "cuvis_ai.deciders.cascaded_decider": [[6, "module-cuvis_ai.deciders.cascaded_decider", false]], "cuvis_ai.deciders.combining_decider": [[8, "module-cuvis_ai.deciders.combining_decider", false]], "cuvis_ai.deciders.multiclass_decider": [[12, "module-cuvis_ai.deciders.multiclass_decider", false]], "cuvis_ai.distance": [[14, "module-cuvis_ai.distance", false]], "cuvis_ai.distance.distance": [[15, "module-cuvis_ai.distance.distance", false]], "cuvis_ai.node": [[24, "module-cuvis_ai.node", false]], "cuvis_ai.node.base": [[31, "module-cuvis_ai.node.base", false]], "cuvis_ai.node.consumers": [[25, "module-cuvis_ai.node.Consumers", false]], "cuvis_ai.node.node": [[36, "module-cuvis_ai.node.node", false]], "cuvis_ai.node.sklearn": [[38, "module-cuvis_ai.node.sklearn", false]], "cuvis_ai.node.skorch": [[39, "module-cuvis_ai.node.skorch", false]], "cuvis_ai.node.torch": [[40, "module-cuvis_ai.node.torch", false]], "cuvis_ai.node.wrap": [[41, "module-cuvis_ai.node.wrap", false]], "cuvis_ai.pipeline": [[43, "module-cuvis_ai.pipeline", false]], "cuvis_ai.pipeline.executor": [[44, "module-cuvis_ai.pipeline.executor", false]], "cuvis_ai.pipeline.graph": [[46, "module-cuvis_ai.pipeline.graph", false]], "cuvis_ai.preprocessor": [[48, "module-cuvis_ai.preprocessor", false]], "cuvis_ai.preprocessor.sklearn_wrapped": [[49, "module-cuvis_ai.preprocessor.sklearn_wrapped", false]], "cuvis_ai.supervised": [[52, "module-cuvis_ai.supervised", false]], "cuvis_ai.supervised.sklearn_wrapped": [[53, "module-cuvis_ai.supervised.sklearn_wrapped", false]], "cuvis_ai.supervised.skorch_supervised": [[58, "module-cuvis_ai.supervised.skorch_supervised", false]], "cuvis_ai.test": [[60, "module-cuvis_ai.test", false]], "cuvis_ai.test.test_numpy_utils": [[61, "module-cuvis_ai.test.test_numpy_utils", false]], "cuvis_ai.test.test_pipeline_graph": [[63, "module-cuvis_ai.test.test_pipeline_graph", false]], "cuvis_ai.test.test_preprocessor_structural": [[64, "module-cuvis_ai.test.test_preprocessor_structural", false]], "cuvis_ai.test.test_serialization": [[68, "module-cuvis_ai.test.test_serialization", false]], "cuvis_ai.test.test_unsupervised_structural": [[79, "module-cuvis_ai.test.test_unsupervised_structural", false]], "cuvis_ai.transformation": [[83, "module-cuvis_ai.transformation", false]], "cuvis_ai.transformation.reflectance": [[84, "module-cuvis_ai.transformation.reflectance", false]], "cuvis_ai.transformation.torch_transformation": [[86, "module-cuvis_ai.transformation.torch_transformation", false]], "cuvis_ai.transformation.torchvision_transformation": [[88, "module-cuvis_ai.transformation.torchvision_transformation", false]], "cuvis_ai.tv_transforms": [[90, "module-cuvis_ai.tv_transforms", false]], "cuvis_ai.tv_transforms.bandpass": [[91, "module-cuvis_ai.tv_transforms.Bandpass", false]], "cuvis_ai.tv_transforms.multibandpass": [[95, "module-cuvis_ai.tv_transforms.MultiBandpass", false]], "cuvis_ai.tv_transforms.normalizestddev": [[99, "module-cuvis_ai.tv_transforms.NormalizeStdDev", false]], "cuvis_ai.tv_transforms.normalizetofloat": [[103, "module-cuvis_ai.tv_transforms.NormalizeToFloat", false]], "cuvis_ai.tv_transforms.wavelengthlist": [[107, "module-cuvis_ai.tv_transforms.WavelengthList", false]], "cuvis_ai.unsupervised": [[108, "module-cuvis_ai.unsupervised", false]], "cuvis_ai.unsupervised.sklearn_wrapped": [[109, "module-cuvis_ai.unsupervised.sklearn_wrapped", false]], "cuvis_ai.utils": [[113, "module-cuvis_ai.utils", false]], "cuvis_ai.utils.dependencies": [[114, "module-cuvis_ai.utils.dependencies", false]], "cuvis_ai.utils.filesystem": [[117, "module-cuvis_ai.utils.filesystem", false]], "cuvis_ai.utils.nn_config": [[119, "module-cuvis_ai.utils.nn_config", false]], "cuvis_ai.utils.numpy": [[123, "module-cuvis_ai.utils.numpy", false]], "cuvis_ai.utils.serializer": [[136, "module-cuvis_ai.utils.serializer", false]], "cuvis_ai.utils.test": [[151, "module-cuvis_ai.utils.test", false]], "cuvis_ai.utils.torch": [[153, "module-cuvis_ai.utils.torch", false]], "cuvis_ai.utils.visualize": [[157, "module-cuvis_ai.utils.visualize", false]], "cuvisyamldumper (class in cuvis_ai.utils.serializer)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper", false]], "cuvisyamlloader (class in cuvis_ai.utils.serializer)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader", false]], "debug() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.debug", false]], "debug() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.debug", false]], "debug() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.debug", false]], "debug() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.debug", false]], "debug() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.debug", false]], "debug() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.debug", false]], "debug() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.debug", false]], "debug() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.debug", false]], "debug() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.debug", false]], "debug() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.debug", false]], "debug() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.debug", false]], "debug() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.debug", false]], "debug() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.debug", false]], "debug() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.debug", false]], "decision_function() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.decision_function", false]], "decision_function() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.decision_function", false]], "decision_function() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.decision_function", false]], "default_mapping_tag (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_MAPPING_TAG", false]], "default_mapping_tag (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_MAPPING_TAG", false]], "default_scalar_tag (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_SCALAR_TAG", false]], "default_scalar_tag (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_SCALAR_TAG", false]], "default_sequence_tag (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_SEQUENCE_TAG", false]], "default_sequence_tag (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_SEQUENCE_TAG", false]], "default_tag_prefixes (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.DEFAULT_TAG_PREFIXES", false]], "default_tags (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.DEFAULT_TAGS", false]], "defaulttestresult() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.defaultTestResult", false]], "defaulttestresult() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.defaultTestResult", false]], "delete_node() (cuvis_ai.pipeline.graph.graph method)": [[47, "cuvis_ai.pipeline.graph.Graph.delete_node", false]], "descend_resolver() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.descend_resolver", false]], "descend_resolver() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.descend_resolver", false]], "determine_block_hints() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.determine_block_hints", false]], "determine_encoding() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.determine_encoding", false]], "dispose() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.dispose", false]], "dispose() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.dispose", false]], "doclasscleanups() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testpreprocessornmf class method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testpreprocessorpca class method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testsupervisedlda class method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testtransformationreflectance class method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testtransformationtorch class method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testtransformationtorchvision class method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testunsupervisedgmm class method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testunsupervisedkmeans class method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift class method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.doClassCleanups", false]], "doclasscleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.doClassCleanups", false]], "docleanups() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.doCleanups", false]], "docleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.doCleanups", false]], "docleanups() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.doCleanups", false]], "docleanups() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.doCleanups", false]], "docleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.doCleanups", false]], "docleanups() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.doCleanups", false]], "dump_patches (cuvis_ai.tv_transforms.bandpass attribute)": [[93, "cuvis_ai.tv_transforms.Bandpass.dump_patches", false]], "dump_patches (cuvis_ai.tv_transforms.multibandpass attribute)": [[97, "cuvis_ai.tv_transforms.MultiBandpass.dump_patches", false]], "dump_patches (cuvis_ai.tv_transforms.normalizestddev attribute)": [[101, "cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches", false]], "dump_patches (cuvis_ai.tv_transforms.normalizetofloat attribute)": [[105, "cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches", false]], "ecs (class in cuvis_ai.distance.distance)": [[18, "cuvis_ai.distance.distance.ECS", false]], "emit() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.emit", false]], "epochs (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[59, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.epochs", false]], "epsilon (cuvis_ai.utils.nn_config.adam attribute)": [[120, "cuvis_ai.utils.nn_config.Adam.epsilon", false]], "escape_codes (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.ESCAPE_CODES", false]], "escape_replacements (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.ESCAPE_REPLACEMENTS", false]], "escape_replacements (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.ESCAPE_REPLACEMENTS", false]], "euclidean (class in cuvis_ai.distance.distance)": [[19, "cuvis_ai.distance.distance.Euclidean", false]], "expect_alias() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_alias", false]], "expect_block_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping", false]], "expect_block_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping_key", false]], "expect_block_mapping_simple_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping_simple_value", false]], "expect_block_mapping_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_mapping_value", false]], "expect_block_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_sequence", false]], "expect_block_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_block_sequence_item", false]], "expect_document_end() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_document_end", false]], "expect_document_root() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_document_root", false]], "expect_document_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_document_start", false]], "expect_first_block_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_block_mapping_key", false]], "expect_first_block_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_block_sequence_item", false]], "expect_first_document_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_document_start", false]], "expect_first_flow_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_flow_mapping_key", false]], "expect_first_flow_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_first_flow_sequence_item", false]], "expect_flow_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping", false]], "expect_flow_mapping_key() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping_key", false]], "expect_flow_mapping_simple_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping_simple_value", false]], "expect_flow_mapping_value() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_mapping_value", false]], "expect_flow_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_sequence", false]], "expect_flow_sequence_item() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_flow_sequence_item", false]], "expect_node() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_node", false]], "expect_nothing() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_nothing", false]], "expect_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_scalar", false]], "expect_stream_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.expect_stream_start", false]], "fail() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.fail", false]], "fail() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.fail", false]], "fail() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.fail", false]], "fail() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.fail", false]], "fail() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.fail", false]], "fail() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.fail", false]], "fail() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.fail", false]], "fail() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.fail", false]], "fail() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.fail", false]], "fail() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.fail", false]], "fail() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.fail", false]], "fail() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.fail", false]], "fail() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.fail", false]], "fail() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.fail", false]], "failif() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failIf", false]], "failif() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failIf", false]], "failif() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failIf", false]], "failif() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failIf", false]], "failif() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failIf", false]], "failif() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failIf", false]], "failifalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failIfAlmostEqual", false]], "failifalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failIfAlmostEqual", false]], "failifequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failIfEqual", false]], "failifequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failIfEqual", false]], "failunless() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnless", false]], "failunless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnless", false]], "failunless() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failUnless", false]], "failunless() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failUnless", false]], "failunless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnless", false]], "failunless() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnless", false]], "failunlessalmostequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnlessAlmostEqual", false]], "failunlessalmostequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnlessAlmostEqual", false]], "failunlessequal() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnlessEqual", false]], "failunlessequal() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnlessEqual", false]], "failunlessraises() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failUnlessRaises", false]], "failunlessraises() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failUnlessRaises", false]], "failureexception (cuvis_ai.test.test_numpy_utils.testnumpyutils attribute)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.failureException", false]], "failureexception (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf attribute)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.failureException", false]], "failureexception (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca attribute)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testpreprocessornmf attribute)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testpreprocessorpca attribute)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testsupervisedlda attribute)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testtransformationreflectance attribute)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testtransformationtorch attribute)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testtransformationtorchvision attribute)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testunsupervisedgmm attribute)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testunsupervisedkmeans attribute)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.failureException", false]], "failureexception (cuvis_ai.test.test_serialization.testunsupervisedmeanshift attribute)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.failureException", false]], "failureexception (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm attribute)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.failureException", false]], "failureexception (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans attribute)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.failureException", false]], "fetch_alias() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_alias", false]], "fetch_anchor() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_anchor", false]], "fetch_block_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_block_entry", false]], "fetch_block_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_block_scalar", false]], "fetch_directive() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_directive", false]], "fetch_document_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_document_end", false]], "fetch_document_indicator() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_document_indicator", false]], "fetch_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_document_start", false]], "fetch_double() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_double", false]], "fetch_flow_collection_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_collection_end", false]], "fetch_flow_collection_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_collection_start", false]], "fetch_flow_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_entry", false]], "fetch_flow_mapping_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_mapping_end", false]], "fetch_flow_mapping_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_mapping_start", false]], "fetch_flow_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_scalar", false]], "fetch_flow_sequence_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_sequence_end", false]], "fetch_flow_sequence_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_flow_sequence_start", false]], "fetch_folded() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_folded", false]], "fetch_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_key", false]], "fetch_literal() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_literal", false]], "fetch_more_tokens() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_more_tokens", false]], "fetch_plain() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_plain", false]], "fetch_single() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_single", false]], "fetch_stream_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_stream_end", false]], "fetch_stream_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_stream_start", false]], "fetch_tag() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_tag", false]], "fetch_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.fetch_value", false]], "fit() (cuvis_ai.deciders.base_decider.basedecider method)": [[3, "cuvis_ai.deciders.base_decider.BaseDecider.fit", false]], "fit() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[5, "cuvis_ai.deciders.binary_decider.BinaryDecider.fit", false]], "fit() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[7, "cuvis_ai.deciders.cascaded_decider.Cascaded.fit", false]], "fit() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[9, "cuvis_ai.deciders.combining_decider.CombiningDecider.fit", false]], "fit() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[13, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.fit", false]], "fit() (cuvis_ai.distance.distance.abstractdistance method)": [[16, "cuvis_ai.distance.distance.AbstractDistance.fit", false]], "fit() (cuvis_ai.distance.distance.canberra method)": [[17, "cuvis_ai.distance.distance.Canberra.fit", false]], "fit() (cuvis_ai.distance.distance.ecs method)": [[18, "cuvis_ai.distance.distance.ECS.fit", false]], "fit() (cuvis_ai.distance.distance.euclidean method)": [[19, "cuvis_ai.distance.distance.Euclidean.fit", false]], "fit() (cuvis_ai.distance.distance.gfc method)": [[20, "cuvis_ai.distance.distance.GFC.fit", false]], "fit() (cuvis_ai.distance.distance.manhattan method)": [[21, "cuvis_ai.distance.distance.Manhattan.fit", false]], "fit() (cuvis_ai.distance.distance.minkowski method)": [[22, "cuvis_ai.distance.distance.Minkowski.fit", false]], "fit() (cuvis_ai.distance.distance.spectralangle method)": [[23, "cuvis_ai.distance.distance.SpectralAngle.fit", false]], "fit() (cuvis_ai.node.base.basesupervised method)": [[32, "cuvis_ai.node.base.BaseSupervised.fit", false]], "fit() (cuvis_ai.node.base.basetransformation method)": [[33, "cuvis_ai.node.base.BaseTransformation.fit", false]], "fit() (cuvis_ai.node.base.baseunsupervised method)": [[34, "cuvis_ai.node.base.BaseUnsupervised.fit", false]], "fit() (cuvis_ai.node.base.preprocessor method)": [[35, "cuvis_ai.node.base.Preprocessor.fit", false]], "fit() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[45, "cuvis_ai.pipeline.executor.MemoryExecutor.fit", false]], "fit() (cuvis_ai.pipeline.graph.graph method)": [[47, "cuvis_ai.pipeline.graph.Graph.fit", false]], "fit() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.fit", false]], "fit() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.fit", false]], "fit() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.fit", false]], "fit() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.fit", false]], "fit() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.fit", false]], "fit() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.fit", false]], "fit() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[59, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.fit", false]], "fit() (cuvis_ai.transformation.reflectance.reflectance method)": [[85, "cuvis_ai.transformation.reflectance.Reflectance.fit", false]], "fit() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[87, "cuvis_ai.transformation.torch_transformation.TorchTransformation.fit", false]], "fit() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[89, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.fit", false]], "fit() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.fit", false]], "fit() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.fit", false]], "fit() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.fit", false]], "fit_predict() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.fit_predict", false]], "fit_predict() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.fit_predict", false]], "fit_predict() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.fit_predict", false]], "fit_transform() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.fit_transform", false]], "fit_transform() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.fit_transform", false]], "fit_transform() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.fit_transform", false]], "fit_transform() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.fit_transform", false]], "flatten_batch_and_labels() (in module cuvis_ai.utils.numpy)": [[126, "cuvis_ai.utils.numpy.flatten_batch_and_labels", false]], "flatten_batch_and_spatial() (in module cuvis_ai.utils.numpy)": [[127, "cuvis_ai.utils.numpy.flatten_batch_and_spatial", false]], "flatten_labels() (in module cuvis_ai.utils.numpy)": [[128, "cuvis_ai.utils.numpy.flatten_labels", false]], "flatten_mapping() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.flatten_mapping", false]], "flatten_spatial() (in module cuvis_ai.utils.numpy)": [[129, "cuvis_ai.utils.numpy.flatten_spatial", false]], "flush_stream() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.flush_stream", false]], "forward() (cuvis_ai.deciders.base_decider.basedecider method)": [[3, "cuvis_ai.deciders.base_decider.BaseDecider.forward", false]], "forward() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[5, "cuvis_ai.deciders.binary_decider.BinaryDecider.forward", false]], "forward() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[7, "cuvis_ai.deciders.cascaded_decider.Cascaded.forward", false]], "forward() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[9, "cuvis_ai.deciders.combining_decider.CombiningDecider.forward", false]], "forward() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[13, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.forward", false]], "forward() (cuvis_ai.distance.distance.abstractdistance method)": [[16, "cuvis_ai.distance.distance.AbstractDistance.forward", false]], "forward() (cuvis_ai.distance.distance.canberra method)": [[17, "cuvis_ai.distance.distance.Canberra.forward", false]], "forward() (cuvis_ai.distance.distance.ecs method)": [[18, "cuvis_ai.distance.distance.ECS.forward", false]], "forward() (cuvis_ai.distance.distance.euclidean method)": [[19, "cuvis_ai.distance.distance.Euclidean.forward", false]], "forward() (cuvis_ai.distance.distance.gfc method)": [[20, "cuvis_ai.distance.distance.GFC.forward", false]], "forward() (cuvis_ai.distance.distance.manhattan method)": [[21, "cuvis_ai.distance.distance.Manhattan.forward", false]], "forward() (cuvis_ai.distance.distance.minkowski method)": [[22, "cuvis_ai.distance.distance.Minkowski.forward", false]], "forward() (cuvis_ai.distance.distance.spectralangle method)": [[23, "cuvis_ai.distance.distance.SpectralAngle.forward", false]], "forward() (cuvis_ai.node.base.basesupervised method)": [[32, "cuvis_ai.node.base.BaseSupervised.forward", false]], "forward() (cuvis_ai.node.base.basetransformation method)": [[33, "cuvis_ai.node.base.BaseTransformation.forward", false]], "forward() (cuvis_ai.node.base.baseunsupervised method)": [[34, "cuvis_ai.node.base.BaseUnsupervised.forward", false]], "forward() (cuvis_ai.node.node.node method)": [[37, "cuvis_ai.node.node.Node.forward", false]], "forward() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[45, "cuvis_ai.pipeline.executor.MemoryExecutor.forward", false]], "forward() (cuvis_ai.pipeline.graph.graph method)": [[47, "cuvis_ai.pipeline.graph.Graph.forward", false]], "forward() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.forward", false]], "forward() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.forward", false]], "forward() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.forward", false]], "forward() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.forward", false]], "forward() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.forward", false]], "forward() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.forward", false]], "forward() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[59, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.forward", false]], "forward() (cuvis_ai.transformation.reflectance.reflectance method)": [[85, "cuvis_ai.transformation.reflectance.Reflectance.forward", false]], "forward() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[87, "cuvis_ai.transformation.torch_transformation.TorchTransformation.forward", false]], "forward() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[89, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.forward", false]], "forward() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.forward", false]], "forward() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.forward", false]], "forward() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.forward", false]], "forward() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.forward", false]], "gen_coco_labels() (in module cuvis_ai.utils.numpy)": [[130, "cuvis_ai.utils.numpy.gen_coco_labels", false]], "generate_anchor() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.generate_anchor", false]], "get_covariance() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.get_covariance", false]], "get_data() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_data", false]], "get_event() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_event", false]], "get_feature_names_out() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.get_feature_names_out", false]], "get_feature_names_out() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.get_feature_names_out", false]], "get_feature_names_out() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.get_feature_names_out", false]], "get_feature_names_out() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.get_feature_names_out", false]], "get_installed_packages() (in module cuvis_ai.utils.dependencies)": [[115, "cuvis_ai.utils.dependencies.get_installed_packages", false]], "get_installed_packages_str() (in module cuvis_ai.utils.dependencies)": [[116, "cuvis_ai.utils.dependencies.get_installed_packages_str", false]], "get_mark() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_mark", false]], "get_metadata_routing() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.get_metadata_routing", false]], "get_metadata_routing() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.get_metadata_routing", false]], "get_metadata_routing() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.get_metadata_routing", false]], "get_metadata_routing() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.get_metadata_routing", false]], "get_metadata_routing() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.get_metadata_routing", false]], "get_metadata_routing() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.get_metadata_routing", false]], "get_metadata_routing() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.get_metadata_routing", false]], "get_metadata_routing() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.get_metadata_routing", false]], "get_metadata_routing() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.get_metadata_routing", false]], "get_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_node", false]], "get_np_dummy_data() (in module cuvis_ai.utils.test)": [[152, "cuvis_ai.utils.test.get_np_dummy_data", false]], "get_output_shape() (in module cuvis_ai.utils.torch)": [[155, "cuvis_ai.utils.torch.get_output_shape", false]], "get_params() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.get_params", false]], "get_params() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.get_params", false]], "get_params() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.get_params", false]], "get_params() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.get_params", false]], "get_params() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.get_params", false]], "get_params() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.get_params", false]], "get_params() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.get_params", false]], "get_params() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.get_params", false]], "get_params() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.get_params", false]], "get_precision() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.get_precision", false]], "get_shape_without_batch() (in module cuvis_ai.utils.numpy)": [[131, "cuvis_ai.utils.numpy.get_shape_without_batch", false]], "get_single_data() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_single_data", false]], "get_single_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_single_node", false]], "get_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.get_token", false]], "gfc (class in cuvis_ai.distance.distance)": [[20, "cuvis_ai.distance.distance.GFC", false]], "gmm (class in cuvis_ai.unsupervised.sklearn_wrapped)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM", false]], "graph (class in cuvis_ai.pipeline.graph)": [[47, "cuvis_ai.pipeline.graph.Graph", false]], "guess_input_dimensionalty() (in module cuvis_ai.utils.torch)": [[156, "cuvis_ai.utils.torch.guess_input_dimensionalty", false]], "id() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.id", false]], "id() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.id", false]], "id() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.id", false]], "id() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.id", false]], "id() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.id", false]], "id() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.id", false]], "id() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.id", false]], "id() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.id", false]], "id() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.id", false]], "id() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.id", false]], "id() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.id", false]], "id() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.id", false]], "id() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.id", false]], "id() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.id", false]], "ignore_aliases() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.ignore_aliases", false]], "increase_indent() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.increase_indent", false]], "inf_value (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.inf_value", false]], "inf_value (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.inf_value", false]], "input_dim (cuvis_ai.deciders.base_decider.basedecider property)": [[3, "cuvis_ai.deciders.base_decider.BaseDecider.input_dim", false]], "input_dim (cuvis_ai.deciders.binary_decider.binarydecider property)": [[5, "cuvis_ai.deciders.binary_decider.BinaryDecider.input_dim", false]], "input_dim (cuvis_ai.deciders.cascaded_decider.cascaded property)": [[7, "cuvis_ai.deciders.cascaded_decider.Cascaded.input_dim", false]], "input_dim (cuvis_ai.deciders.combining_decider.combiningdecider property)": [[9, "cuvis_ai.deciders.combining_decider.CombiningDecider.input_dim", false]], "input_dim (cuvis_ai.deciders.multiclass_decider.multiclassdecider property)": [[13, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.input_dim", false]], "input_dim (cuvis_ai.distance.distance.abstractdistance property)": [[16, "cuvis_ai.distance.distance.AbstractDistance.input_dim", false]], "input_dim (cuvis_ai.distance.distance.canberra property)": [[17, "cuvis_ai.distance.distance.Canberra.input_dim", false]], "input_dim (cuvis_ai.distance.distance.ecs property)": [[18, "cuvis_ai.distance.distance.ECS.input_dim", false]], "input_dim (cuvis_ai.distance.distance.euclidean property)": [[19, "cuvis_ai.distance.distance.Euclidean.input_dim", false]], "input_dim (cuvis_ai.distance.distance.gfc property)": [[20, "cuvis_ai.distance.distance.GFC.input_dim", false]], "input_dim (cuvis_ai.distance.distance.manhattan property)": [[21, "cuvis_ai.distance.distance.Manhattan.input_dim", false]], "input_dim (cuvis_ai.distance.distance.minkowski property)": [[22, "cuvis_ai.distance.distance.Minkowski.input_dim", false]], "input_dim (cuvis_ai.distance.distance.spectralangle property)": [[23, "cuvis_ai.distance.distance.SpectralAngle.input_dim", false]], "input_dim (cuvis_ai.node.node.node property)": [[37, "cuvis_ai.node.node.Node.input_dim", false]], "input_dim (cuvis_ai.preprocessor.sklearn_wrapped.nmf property)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.input_dim", false]], "input_dim (cuvis_ai.preprocessor.sklearn_wrapped.pca property)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.input_dim", false]], "input_dim (cuvis_ai.supervised.sklearn_wrapped.lda property)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.input_dim", false]], "input_dim (cuvis_ai.supervised.sklearn_wrapped.mlp property)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.input_dim", false]], "input_dim (cuvis_ai.supervised.sklearn_wrapped.qda property)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.input_dim", false]], "input_dim (cuvis_ai.supervised.sklearn_wrapped.svm property)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.input_dim", false]], "input_dim (cuvis_ai.transformation.reflectance.reflectance property)": [[85, "cuvis_ai.transformation.reflectance.Reflectance.input_dim", false]], "input_dim (cuvis_ai.transformation.torch_transformation.torchtransformation property)": [[87, "cuvis_ai.transformation.torch_transformation.TorchTransformation.input_dim", false]], "input_dim (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation property)": [[89, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.input_dim", false]], "input_dim (cuvis_ai.unsupervised.sklearn_wrapped.gmm property)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.input_dim", false]], "input_dim (cuvis_ai.unsupervised.sklearn_wrapped.kmeans property)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.input_dim", false]], "input_dim (cuvis_ai.unsupervised.sklearn_wrapped.meanshift property)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.input_dim", false]], "input_dim() (cuvis_ai.node.base.basetransformation method)": [[33, "cuvis_ai.node.base.BaseTransformation.input_dim", false]], "inputdimension (class in cuvis_ai.utils.torch)": [[154, "cuvis_ai.utils.torch.InputDimension", false]], "inverse_transform() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.inverse_transform", false]], "inverse_transform() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.inverse_transform", false]], "kmeans (class in cuvis_ai.unsupervised.sklearn_wrapped)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans", false]], "labelconsumer (class in cuvis_ai.node.consumers)": [[27, "cuvis_ai.node.Consumers.LabelConsumer", false]], "labelconsumerinference (class in cuvis_ai.node.consumers)": [[28, "cuvis_ai.node.Consumers.LabelConsumerInference", false]], "lda (class in cuvis_ai.supervised.sklearn_wrapped)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA", false]], "load() (cuvis_ai.deciders.base_decider.basedecider method)": [[3, "cuvis_ai.deciders.base_decider.BaseDecider.load", false]], "load() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[5, "cuvis_ai.deciders.binary_decider.BinaryDecider.load", false]], "load() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[7, "cuvis_ai.deciders.cascaded_decider.Cascaded.load", false]], "load() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[9, "cuvis_ai.deciders.combining_decider.CombiningDecider.load", false]], "load() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[13, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.load", false]], "load() (cuvis_ai.distance.distance.abstractdistance method)": [[16, "cuvis_ai.distance.distance.AbstractDistance.load", false]], "load() (cuvis_ai.distance.distance.canberra method)": [[17, "cuvis_ai.distance.distance.Canberra.load", false]], "load() (cuvis_ai.distance.distance.ecs method)": [[18, "cuvis_ai.distance.distance.ECS.load", false]], "load() (cuvis_ai.distance.distance.euclidean method)": [[19, "cuvis_ai.distance.distance.Euclidean.load", false]], "load() (cuvis_ai.distance.distance.gfc method)": [[20, "cuvis_ai.distance.distance.GFC.load", false]], "load() (cuvis_ai.distance.distance.manhattan method)": [[21, "cuvis_ai.distance.distance.Manhattan.load", false]], "load() (cuvis_ai.distance.distance.minkowski method)": [[22, "cuvis_ai.distance.distance.Minkowski.load", false]], "load() (cuvis_ai.distance.distance.spectralangle method)": [[23, "cuvis_ai.distance.distance.SpectralAngle.load", false]], "load() (cuvis_ai.node.base.basetransformation method)": [[33, "cuvis_ai.node.base.BaseTransformation.load", false]], "load() (cuvis_ai.node.node.node method)": [[37, "cuvis_ai.node.node.Node.load", false]], "load() (cuvis_ai.pipeline.graph.graph method)": [[47, "cuvis_ai.pipeline.graph.Graph.load", false]], "load() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.load", false]], "load() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.load", false]], "load() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.load", false]], "load() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.load", false]], "load() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.load", false]], "load() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.load", false]], "load() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[59, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.load", false]], "load() (cuvis_ai.transformation.reflectance.reflectance method)": [[85, "cuvis_ai.transformation.reflectance.Reflectance.load", false]], "load() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[87, "cuvis_ai.transformation.torch_transformation.TorchTransformation.load", false]], "load() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[89, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.load", false]], "load() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.load", false]], "load() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.load", false]], "load() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.load", false]], "load() (cuvis_ai.utils.serializer.serializer method)": [[140, "cuvis_ai.utils.serializer.Serializer.load", false]], "load() (cuvis_ai.utils.serializer.yamlserializer method)": [[141, "cuvis_ai.utils.serializer.YamlSerializer.load", false]], "load_from_file() (cuvis_ai.pipeline.graph.graph class method)": [[47, "cuvis_ai.pipeline.graph.Graph.load_from_file", false]], "load_node() (cuvis_ai.utils.serializer.oldserializer method)": [[139, "cuvis_ai.utils.serializer.OldSerializer.load_node", false]], "longmessage (cuvis_ai.test.test_numpy_utils.testnumpyutils attribute)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.longMessage", false]], "longmessage (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf attribute)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.longMessage", false]], "longmessage (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca attribute)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testpreprocessornmf attribute)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testpreprocessorpca attribute)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testsupervisedlda attribute)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testtransformationreflectance attribute)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testtransformationtorch attribute)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testtransformationtorchvision attribute)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testunsupervisedgmm attribute)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testunsupervisedkmeans attribute)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.longMessage", false]], "longmessage (cuvis_ai.test.test_serialization.testunsupervisedmeanshift attribute)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.longMessage", false]], "longmessage (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm attribute)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.longMessage", false]], "longmessage (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans attribute)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.longMessage", false]], "lr (cuvis_ai.utils.nn_config.adam attribute)": [[120, "cuvis_ai.utils.nn_config.Adam.lr", false]], "lr (cuvis_ai.utils.nn_config.sgd attribute)": [[122, "cuvis_ai.utils.nn_config.SGD.lr", false]], "make_node() (in module cuvis_ai.node.wrap)": [[42, "cuvis_ai.node.wrap.make_node", false]], "manhattan (class in cuvis_ai.distance.distance)": [[21, "cuvis_ai.distance.distance.Manhattan", false]], "maxdiff (cuvis_ai.test.test_numpy_utils.testnumpyutils attribute)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.maxDiff", false]], "maxdiff (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf attribute)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.maxDiff", false]], "maxdiff (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca attribute)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testpreprocessornmf attribute)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testpreprocessorpca attribute)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testsupervisedlda attribute)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testtransformationreflectance attribute)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testtransformationtorch attribute)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testtransformationtorchvision attribute)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testunsupervisedgmm attribute)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testunsupervisedkmeans attribute)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.maxDiff", false]], "maxdiff (cuvis_ai.test.test_serialization.testunsupervisedmeanshift attribute)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.maxDiff", false]], "maxdiff (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm attribute)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.maxDiff", false]], "maxdiff (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans attribute)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.maxDiff", false]], "meanshift (class in cuvis_ai.unsupervised.sklearn_wrapped)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift", false]], "memoryexecutor (class in cuvis_ai.pipeline.executor)": [[45, "cuvis_ai.pipeline.executor.MemoryExecutor", false]], "metadataconsumer (class in cuvis_ai.node.consumers)": [[29, "cuvis_ai.node.Consumers.MetadataConsumer", false]], "metadataconsumerinference (class in cuvis_ai.node.consumers)": [[30, "cuvis_ai.node.Consumers.MetadataConsumerInference", false]], "minkowski (class in cuvis_ai.distance.distance)": [[22, "cuvis_ai.distance.distance.Minkowski", false]], "mlp (class in cuvis_ai.supervised.sklearn_wrapped)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP", false]], "model (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[59, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.model", false]], "model_args (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[59, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.model_args", false]], "module": [[0, "module-cuvis_ai", false], [1, "module-cuvis_ai.deciders", false], [2, "module-cuvis_ai.deciders.base_decider", false], [4, "module-cuvis_ai.deciders.binary_decider", false], [6, "module-cuvis_ai.deciders.cascaded_decider", false], [8, "module-cuvis_ai.deciders.combining_decider", false], [12, "module-cuvis_ai.deciders.multiclass_decider", false], [14, "module-cuvis_ai.distance", false], [15, "module-cuvis_ai.distance.distance", false], [24, "module-cuvis_ai.node", false], [25, "module-cuvis_ai.node.Consumers", false], [31, "module-cuvis_ai.node.base", false], [36, "module-cuvis_ai.node.node", false], [38, "module-cuvis_ai.node.sklearn", false], [39, "module-cuvis_ai.node.skorch", false], [40, "module-cuvis_ai.node.torch", false], [41, "module-cuvis_ai.node.wrap", false], [43, "module-cuvis_ai.pipeline", false], [44, "module-cuvis_ai.pipeline.executor", false], [46, "module-cuvis_ai.pipeline.graph", false], [48, "module-cuvis_ai.preprocessor", false], [49, "module-cuvis_ai.preprocessor.sklearn_wrapped", false], [52, "module-cuvis_ai.supervised", false], [53, "module-cuvis_ai.supervised.sklearn_wrapped", false], [58, "module-cuvis_ai.supervised.skorch_supervised", false], [60, "module-cuvis_ai.test", false], [61, "module-cuvis_ai.test.test_numpy_utils", false], [63, "module-cuvis_ai.test.test_pipeline_graph", false], [64, "module-cuvis_ai.test.test_preprocessor_structural", false], [68, "module-cuvis_ai.test.test_serialization", false], [79, "module-cuvis_ai.test.test_unsupervised_structural", false], [83, "module-cuvis_ai.transformation", false], [84, "module-cuvis_ai.transformation.reflectance", false], [86, "module-cuvis_ai.transformation.torch_transformation", false], [88, "module-cuvis_ai.transformation.torchvision_transformation", false], [90, "module-cuvis_ai.tv_transforms", false], [91, "module-cuvis_ai.tv_transforms.Bandpass", false], [95, "module-cuvis_ai.tv_transforms.MultiBandpass", false], [99, "module-cuvis_ai.tv_transforms.NormalizeStdDev", false], [103, "module-cuvis_ai.tv_transforms.NormalizeToFloat", false], [107, "module-cuvis_ai.tv_transforms.WavelengthList", false], [108, "module-cuvis_ai.unsupervised", false], [109, "module-cuvis_ai.unsupervised.sklearn_wrapped", false], [113, "module-cuvis_ai.utils", false], [114, "module-cuvis_ai.utils.dependencies", false], [117, "module-cuvis_ai.utils.filesystem", false], [119, "module-cuvis_ai.utils.nn_config", false], [123, "module-cuvis_ai.utils.numpy", false], [136, "module-cuvis_ai.utils.serializer", false], [151, "module-cuvis_ai.utils.test", false], [153, "module-cuvis_ai.utils.torch", false], [157, "module-cuvis_ai.utils.visualize", false]], "momentum (cuvis_ai.utils.nn_config.sgd attribute)": [[122, "cuvis_ai.utils.nn_config.SGD.momentum", false]], "multiclassdecider (class in cuvis_ai.deciders.multiclass_decider)": [[13, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider", false]], "n_support_ (cuvis_ai.supervised.sklearn_wrapped.svm property)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.n_support_", false]], "name (cuvis_ai.utils.nn_config.adam property)": [[120, "cuvis_ai.utils.nn_config.Adam.name", false]], "name (cuvis_ai.utils.nn_config.optimizer property)": [[121, "cuvis_ai.utils.nn_config.Optimizer.name", false]], "name (cuvis_ai.utils.nn_config.sgd property)": [[122, "cuvis_ai.utils.nn_config.SGD.name", false]], "nan_value (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.nan_value", false]], "need_events() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.need_events", false]], "need_more_events() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.need_more_events", false]], "need_more_tokens() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.need_more_tokens", false]], "nesterov (cuvis_ai.utils.nn_config.sgd attribute)": [[122, "cuvis_ai.utils.nn_config.SGD.nesterov", false]], "next_possible_simple_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.next_possible_simple_key", false]], "nmf (class in cuvis_ai.preprocessor.sklearn_wrapped)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF", false]], "node (class in cuvis_ai.node.node)": [[37, "cuvis_ai.node.node.Node", false]], "non_printable (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.NON_PRINTABLE", false]], "numpy_array_binary_representer() (in module cuvis_ai.utils.serializer)": [[142, "cuvis_ai.utils.serializer.numpy_array_binary_representer", false]], "numpy_array_file_representer() (in module cuvis_ai.utils.serializer)": [[143, "cuvis_ai.utils.serializer.numpy_array_file_representer", false]], "numpy_array_string_representer() (in module cuvis_ai.utils.serializer)": [[144, "cuvis_ai.utils.serializer.numpy_array_string_representer", false]], "numpy_arrray_file_constructor() (in module cuvis_ai.utils.serializer)": [[145, "cuvis_ai.utils.serializer.numpy_arrray_file_constructor", false]], "numpy_arrray_string_constructor() (in module cuvis_ai.utils.serializer)": [[146, "cuvis_ai.utils.serializer.numpy_arrray_string_constructor", false]], "numpy_float32_constructor() (in module cuvis_ai.utils.serializer)": [[147, "cuvis_ai.utils.serializer.numpy_float32_constructor", false]], "numpy_float32_representer() (in module cuvis_ai.utils.serializer)": [[148, "cuvis_ai.utils.serializer.numpy_float32_representer", false]], "numpy_float64_constructor() (in module cuvis_ai.utils.serializer)": [[149, "cuvis_ai.utils.serializer.numpy_float64_constructor", false]], "numpy_float64_representer() (in module cuvis_ai.utils.serializer)": [[150, "cuvis_ai.utils.serializer.numpy_float64_representer", false]], "oldserializer (class in cuvis_ai.utils.serializer)": [[139, "cuvis_ai.utils.serializer.OldSerializer", false]], "one (cuvis_ai.utils.torch.inputdimension attribute)": [[154, "cuvis_ai.utils.torch.InputDimension.One", false]], "open() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.open", false]], "optimizer (class in cuvis_ai.utils.nn_config)": [[121, "cuvis_ai.utils.nn_config.Optimizer", false]], "optimizer (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[59, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.optimizer", false]], "output_dim (cuvis_ai.deciders.base_decider.basedecider property)": [[3, "cuvis_ai.deciders.base_decider.BaseDecider.output_dim", false]], "output_dim (cuvis_ai.deciders.binary_decider.binarydecider property)": [[5, "cuvis_ai.deciders.binary_decider.BinaryDecider.output_dim", false]], "output_dim (cuvis_ai.deciders.cascaded_decider.cascaded property)": [[7, "cuvis_ai.deciders.cascaded_decider.Cascaded.output_dim", false]], "output_dim (cuvis_ai.deciders.combining_decider.combiningdecider property)": [[9, "cuvis_ai.deciders.combining_decider.CombiningDecider.output_dim", false]], "output_dim (cuvis_ai.deciders.multiclass_decider.multiclassdecider property)": [[13, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.output_dim", false]], "output_dim (cuvis_ai.distance.distance.abstractdistance property)": [[16, "cuvis_ai.distance.distance.AbstractDistance.output_dim", false]], "output_dim (cuvis_ai.distance.distance.canberra property)": [[17, "cuvis_ai.distance.distance.Canberra.output_dim", false]], "output_dim (cuvis_ai.distance.distance.ecs property)": [[18, "cuvis_ai.distance.distance.ECS.output_dim", false]], "output_dim (cuvis_ai.distance.distance.euclidean property)": [[19, "cuvis_ai.distance.distance.Euclidean.output_dim", false]], "output_dim (cuvis_ai.distance.distance.gfc property)": [[20, "cuvis_ai.distance.distance.GFC.output_dim", false]], "output_dim (cuvis_ai.distance.distance.manhattan property)": [[21, "cuvis_ai.distance.distance.Manhattan.output_dim", false]], "output_dim (cuvis_ai.distance.distance.minkowski property)": [[22, "cuvis_ai.distance.distance.Minkowski.output_dim", false]], "output_dim (cuvis_ai.distance.distance.spectralangle property)": [[23, "cuvis_ai.distance.distance.SpectralAngle.output_dim", false]], "output_dim (cuvis_ai.node.node.node property)": [[37, "cuvis_ai.node.node.Node.output_dim", false]], "output_dim (cuvis_ai.preprocessor.sklearn_wrapped.nmf property)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.output_dim", false]], "output_dim (cuvis_ai.preprocessor.sklearn_wrapped.pca property)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.output_dim", false]], "output_dim (cuvis_ai.supervised.sklearn_wrapped.lda property)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.output_dim", false]], "output_dim (cuvis_ai.supervised.sklearn_wrapped.mlp property)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.output_dim", false]], "output_dim (cuvis_ai.supervised.sklearn_wrapped.qda property)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.output_dim", false]], "output_dim (cuvis_ai.supervised.sklearn_wrapped.svm property)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.output_dim", false]], "output_dim (cuvis_ai.transformation.reflectance.reflectance property)": [[85, "cuvis_ai.transformation.reflectance.Reflectance.output_dim", false]], "output_dim (cuvis_ai.transformation.torch_transformation.torchtransformation property)": [[87, "cuvis_ai.transformation.torch_transformation.TorchTransformation.output_dim", false]], "output_dim (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation property)": [[89, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.output_dim", false]], "output_dim (cuvis_ai.unsupervised.sklearn_wrapped.gmm property)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.output_dim", false]], "output_dim (cuvis_ai.unsupervised.sklearn_wrapped.kmeans property)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.output_dim", false]], "output_dim (cuvis_ai.unsupervised.sklearn_wrapped.meanshift property)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.output_dim", false]], "output_dim() (cuvis_ai.node.base.basetransformation method)": [[33, "cuvis_ai.node.base.BaseTransformation.output_dim", false]], "parse_block_mapping_first_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_mapping_first_key", false]], "parse_block_mapping_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_mapping_key", false]], "parse_block_mapping_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_mapping_value", false]], "parse_block_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_node", false]], "parse_block_node_or_indentless_sequence() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_node_or_indentless_sequence", false]], "parse_block_sequence_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_sequence_entry", false]], "parse_block_sequence_first_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_block_sequence_first_entry", false]], "parse_document_content() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_document_content", false]], "parse_document_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_document_end", false]], "parse_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_document_start", false]], "parse_flow_mapping_empty_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_empty_value", false]], "parse_flow_mapping_first_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_first_key", false]], "parse_flow_mapping_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_key", false]], "parse_flow_mapping_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_mapping_value", false]], "parse_flow_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_node", false]], "parse_flow_sequence_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry", false]], "parse_flow_sequence_entry_mapping_end() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry_mapping_end", false]], "parse_flow_sequence_entry_mapping_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry_mapping_key", false]], "parse_flow_sequence_entry_mapping_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_entry_mapping_value", false]], "parse_flow_sequence_first_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_flow_sequence_first_entry", false]], "parse_implicit_document_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_implicit_document_start", false]], "parse_indentless_sequence_entry() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_indentless_sequence_entry", false]], "parse_node() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_node", false]], "parse_stream_start() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.parse_stream_start", false]], "partial_fit() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.partial_fit", false]], "pca (class in cuvis_ai.preprocessor.sklearn_wrapped)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA", false]], "peek() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.peek", false]], "peek_event() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.peek_event", false]], "peek_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.peek_token", false]], "power_t (cuvis_ai.utils.nn_config.sgd attribute)": [[122, "cuvis_ai.utils.nn_config.SGD.power_t", false]], "predict() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.predict", false]], "predict() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.predict", false]], "predict() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.predict", false]], "predict() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.predict", false]], "predict() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.predict", false]], "predict() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.predict", false]], "predict() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.predict", false]], "predict_log_proba() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.predict_log_proba", false]], "predict_log_proba() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.predict_log_proba", false]], "predict_log_proba() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.predict_log_proba", false]], "predict_log_proba() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.predict_log_proba", false]], "predict_proba() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.predict_proba", false]], "predict_proba() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.predict_proba", false]], "predict_proba() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.predict_proba", false]], "predict_proba() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.predict_proba", false]], "predict_proba() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.predict_proba", false]], "prefix() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.prefix", false]], "prepare_anchor() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_anchor", false]], "prepare_tag() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_tag", false]], "prepare_tag_handle() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_tag_handle", false]], "prepare_tag_prefix() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_tag_prefix", false]], "prepare_version() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.prepare_version", false]], "preprocessor (class in cuvis_ai.node.base)": [[35, "cuvis_ai.node.base.Preprocessor", false]], "proba_ (cuvis_ai.supervised.sklearn_wrapped.svm property)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.probA_", false]], "probb_ (cuvis_ai.supervised.sklearn_wrapped.svm property)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.probB_", false]], "process_anchor() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.process_anchor", false]], "process_directives() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.process_directives", false]], "process_empty_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.process_empty_scalar", false]], "process_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.process_scalar", false]], "process_tag() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.process_tag", false]], "pytorch_args (cuvis_ai.utils.nn_config.adam property)": [[120, "cuvis_ai.utils.nn_config.Adam.pytorch_args", false]], "pytorch_args (cuvis_ai.utils.nn_config.optimizer property)": [[121, "cuvis_ai.utils.nn_config.Optimizer.pytorch_args", false]], "pytorch_args (cuvis_ai.utils.nn_config.sgd property)": [[122, "cuvis_ai.utils.nn_config.SGD.pytorch_args", false]], "qda (class in cuvis_ai.supervised.sklearn_wrapped)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA", false]], "reflectance (class in cuvis_ai.transformation.reflectance)": [[85, "cuvis_ai.transformation.reflectance.Reflectance", false]], "remove_possible_simple_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.remove_possible_simple_key", false]], "represent() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent", false]], "represent_binary() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_binary", false]], "represent_bool() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_bool", false]], "represent_data() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_data", false]], "represent_date() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_date", false]], "represent_datetime() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_datetime", false]], "represent_dict() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_dict", false]], "represent_float() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_float", false]], "represent_int() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_int", false]], "represent_list() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_list", false]], "represent_mapping() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_mapping", false]], "represent_none() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_none", false]], "represent_scalar() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_scalar", false]], "represent_sequence() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_sequence", false]], "represent_set() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_set", false]], "represent_str() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_str", false]], "represent_undefined() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_undefined", false]], "represent_yaml_object() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.represent_yaml_object", false]], "resolve() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.resolve", false]], "resolve() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.resolve", false]], "run() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.run", false]], "run() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.run", false]], "run() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.run", false]], "run() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.run", false]], "run() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.run", false]], "run() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.run", false]], "run() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.run", false]], "run() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.run", false]], "run() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.run", false]], "run() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.run", false]], "run() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.run", false]], "run() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.run", false]], "run() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.run", false]], "run() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.run", false]], "sample() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.sample", false]], "save_possible_simple_key() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.save_possible_simple_key", false]], "save_to_file() (cuvis_ai.pipeline.graph.graph method)": [[47, "cuvis_ai.pipeline.graph.Graph.save_to_file", false]], "scan_anchor() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_anchor", false]], "scan_block_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar", false]], "scan_block_scalar_breaks() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_breaks", false]], "scan_block_scalar_ignored_line() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_ignored_line", false]], "scan_block_scalar_indentation() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_indentation", false]], "scan_block_scalar_indicators() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_block_scalar_indicators", false]], "scan_directive() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_directive", false]], "scan_directive_ignored_line() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_directive_ignored_line", false]], "scan_directive_name() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_directive_name", false]], "scan_flow_scalar() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar", false]], "scan_flow_scalar_breaks() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar_breaks", false]], "scan_flow_scalar_non_spaces() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar_non_spaces", false]], "scan_flow_scalar_spaces() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_flow_scalar_spaces", false]], "scan_line_break() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_line_break", false]], "scan_plain() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_plain", false]], "scan_plain_spaces() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_plain_spaces", false]], "scan_tag() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag", false]], "scan_tag_directive_handle() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_directive_handle", false]], "scan_tag_directive_prefix() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_directive_prefix", false]], "scan_tag_directive_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_directive_value", false]], "scan_tag_handle() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_handle", false]], "scan_tag_uri() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_tag_uri", false]], "scan_to_next_token() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_to_next_token", false]], "scan_uri_escapes() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_uri_escapes", false]], "scan_yaml_directive_number() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_yaml_directive_number", false]], "scan_yaml_directive_value() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.scan_yaml_directive_value", false]], "score() (cuvis_ai.distance.distance.abstractdistance method)": [[16, "cuvis_ai.distance.distance.AbstractDistance.score", false]], "score() (cuvis_ai.distance.distance.canberra static method)": [[17, "cuvis_ai.distance.distance.Canberra.score", false]], "score() (cuvis_ai.distance.distance.ecs method)": [[18, "cuvis_ai.distance.distance.ECS.score", false]], "score() (cuvis_ai.distance.distance.euclidean static method)": [[19, "cuvis_ai.distance.distance.Euclidean.score", false]], "score() (cuvis_ai.distance.distance.gfc method)": [[20, "cuvis_ai.distance.distance.GFC.score", false]], "score() (cuvis_ai.distance.distance.manhattan static method)": [[21, "cuvis_ai.distance.distance.Manhattan.score", false]], "score() (cuvis_ai.distance.distance.minkowski method)": [[22, "cuvis_ai.distance.distance.Minkowski.score", false]], "score() (cuvis_ai.distance.distance.spectralangle static method)": [[23, "cuvis_ai.distance.distance.SpectralAngle.score", false]], "score() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.score", false]], "score() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.score", false]], "score() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.score", false]], "score() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.score", false]], "score() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.score", false]], "score() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.score", false]], "score() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.score", false]], "score_samples() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.score_samples", false]], "score_samples() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.score_samples", false]], "serialize() (cuvis_ai.deciders.base_decider.basedecider method)": [[3, "cuvis_ai.deciders.base_decider.BaseDecider.serialize", false]], "serialize() (cuvis_ai.deciders.binary_decider.binarydecider method)": [[5, "cuvis_ai.deciders.binary_decider.BinaryDecider.serialize", false]], "serialize() (cuvis_ai.deciders.cascaded_decider.cascaded method)": [[7, "cuvis_ai.deciders.cascaded_decider.Cascaded.serialize", false]], "serialize() (cuvis_ai.deciders.combining_decider.combiningdecider method)": [[9, "cuvis_ai.deciders.combining_decider.CombiningDecider.serialize", false]], "serialize() (cuvis_ai.deciders.multiclass_decider.multiclassdecider method)": [[13, "cuvis_ai.deciders.multiclass_decider.MultiClassDecider.serialize", false]], "serialize() (cuvis_ai.distance.distance.abstractdistance method)": [[16, "cuvis_ai.distance.distance.AbstractDistance.serialize", false]], "serialize() (cuvis_ai.distance.distance.canberra method)": [[17, "cuvis_ai.distance.distance.Canberra.serialize", false]], "serialize() (cuvis_ai.distance.distance.ecs method)": [[18, "cuvis_ai.distance.distance.ECS.serialize", false]], "serialize() (cuvis_ai.distance.distance.euclidean method)": [[19, "cuvis_ai.distance.distance.Euclidean.serialize", false]], "serialize() (cuvis_ai.distance.distance.gfc method)": [[20, "cuvis_ai.distance.distance.GFC.serialize", false]], "serialize() (cuvis_ai.distance.distance.manhattan method)": [[21, "cuvis_ai.distance.distance.Manhattan.serialize", false]], "serialize() (cuvis_ai.distance.distance.minkowski method)": [[22, "cuvis_ai.distance.distance.Minkowski.serialize", false]], "serialize() (cuvis_ai.distance.distance.spectralangle method)": [[23, "cuvis_ai.distance.distance.SpectralAngle.serialize", false]], "serialize() (cuvis_ai.node.base.basetransformation method)": [[33, "cuvis_ai.node.base.BaseTransformation.serialize", false]], "serialize() (cuvis_ai.node.node.node method)": [[37, "cuvis_ai.node.node.Node.serialize", false]], "serialize() (cuvis_ai.pipeline.graph.graph method)": [[47, "cuvis_ai.pipeline.graph.Graph.serialize", false]], "serialize() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.serialize", false]], "serialize() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.serialize", false]], "serialize() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.serialize", false]], "serialize() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.serialize", false]], "serialize() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.serialize", false]], "serialize() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.serialize", false]], "serialize() (cuvis_ai.supervised.skorch_supervised.skorchsupervised method)": [[59, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.serialize", false]], "serialize() (cuvis_ai.transformation.reflectance.reflectance method)": [[85, "cuvis_ai.transformation.reflectance.Reflectance.serialize", false]], "serialize() (cuvis_ai.transformation.torch_transformation.torchtransformation method)": [[87, "cuvis_ai.transformation.torch_transformation.TorchTransformation.serialize", false]], "serialize() (cuvis_ai.transformation.torchvision_transformation.torchvisiontransformation method)": [[89, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation.serialize", false]], "serialize() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.serialize", false]], "serialize() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.serialize", false]], "serialize() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.serialize", false]], "serialize() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.serialize", false]], "serialize() (cuvis_ai.utils.serializer.serializer method)": [[140, "cuvis_ai.utils.serializer.Serializer.serialize", false]], "serialize() (cuvis_ai.utils.serializer.yamlserializer method)": [[141, "cuvis_ai.utils.serializer.YamlSerializer.serialize", false]], "serialize_node() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.serialize_node", false]], "serialize_node() (cuvis_ai.utils.serializer.oldserializer method)": [[139, "cuvis_ai.utils.serializer.OldSerializer.serialize_node", false]], "serializer (class in cuvis_ai.utils.serializer)": [[140, "cuvis_ai.utils.serializer.Serializer", false]], "set_fit_request() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.set_fit_request", false]], "set_fit_request() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.set_fit_request", false]], "set_output() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.set_output", false]], "set_output() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.set_output", false]], "set_output() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.set_output", false]], "set_output() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.set_output", false]], "set_params() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.set_params", false]], "set_params() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.set_params", false]], "set_params() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.set_params", false]], "set_params() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.set_params", false]], "set_params() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.set_params", false]], "set_params() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.set_params", false]], "set_params() (cuvis_ai.unsupervised.sklearn_wrapped.gmm method)": [[110, "cuvis_ai.unsupervised.sklearn_wrapped.GMM.set_params", false]], "set_params() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.set_params", false]], "set_params() (cuvis_ai.unsupervised.sklearn_wrapped.meanshift method)": [[112, "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift.set_params", false]], "set_partial_fit_request() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.set_partial_fit_request", false]], "set_score_request() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.set_score_request", false]], "set_score_request() (cuvis_ai.supervised.sklearn_wrapped.mlp method)": [[55, "cuvis_ai.supervised.sklearn_wrapped.MLP.set_score_request", false]], "set_score_request() (cuvis_ai.supervised.sklearn_wrapped.qda method)": [[56, "cuvis_ai.supervised.sklearn_wrapped.QDA.set_score_request", false]], "set_score_request() (cuvis_ai.supervised.sklearn_wrapped.svm method)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.set_score_request", false]], "set_score_request() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.set_score_request", false]], "setup() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.setUp", false]], "setup() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[65, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.setUp", false]], "setup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.setUp", false]], "setup() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.setUp", false]], "setup() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.setUp", false]], "setup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.setUp", false]], "setup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.setUp", false]], "setup() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[82, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.setUp", false]], "setupclass() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.setUpClass", false]], "setupclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.setUpClass", false]], "setupclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testpreprocessornmf class method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testpreprocessorpca class method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testsupervisedlda class method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testtransformationreflectance class method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testtransformationtorch class method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testtransformationtorchvision class method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testunsupervisedgmm class method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testunsupervisedkmeans class method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.setUpClass", false]], "setupclass() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift class method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.setUpClass", false]], "setupclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.setUpClass", false]], "setupclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.setUpClass", false]], "sgd (class in cuvis_ai.utils.nn_config)": [[122, "cuvis_ai.utils.nn_config.SGD", false]], "shortdescription() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.shortDescription", false]], "shortdescription() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.shortDescription", false]], "skiptest() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.skipTest", false]], "skiptest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.skipTest", false]], "skiptest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.skipTest", false]], "skiptest() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.skipTest", false]], "skiptest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.skipTest", false]], "skiptest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.skipTest", false]], "sklearn_args (cuvis_ai.utils.nn_config.adam property)": [[120, "cuvis_ai.utils.nn_config.Adam.sklearn_args", false]], "sklearn_args (cuvis_ai.utils.nn_config.optimizer property)": [[121, "cuvis_ai.utils.nn_config.Optimizer.sklearn_args", false]], "sklearn_args (cuvis_ai.utils.nn_config.sgd property)": [[122, "cuvis_ai.utils.nn_config.SGD.sklearn_args", false]], "skorchsupervised (class in cuvis_ai.supervised.skorch_supervised)": [[59, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised", false]], "spectra_to_array() (cuvis_ai.distance.distance.abstractdistance static method)": [[16, "cuvis_ai.distance.distance.AbstractDistance.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.canberra static method)": [[17, "cuvis_ai.distance.distance.Canberra.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.ecs static method)": [[18, "cuvis_ai.distance.distance.ECS.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.euclidean static method)": [[19, "cuvis_ai.distance.distance.Euclidean.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.gfc static method)": [[20, "cuvis_ai.distance.distance.GFC.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.manhattan static method)": [[21, "cuvis_ai.distance.distance.Manhattan.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.minkowski static method)": [[22, "cuvis_ai.distance.distance.Minkowski.spectra_to_array", false]], "spectra_to_array() (cuvis_ai.distance.distance.spectralangle static method)": [[23, "cuvis_ai.distance.distance.SpectralAngle.spectra_to_array", false]], "spectralangle (class in cuvis_ai.distance.distance)": [[23, "cuvis_ai.distance.distance.SpectralAngle", false]], "stale_possible_simple_keys() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.stale_possible_simple_keys", false]], "subtest() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.subTest", false]], "subtest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.subTest", false]], "subtest() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.subTest", false]], "subtest() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.subTest", false]], "subtest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.subTest", false]], "subtest() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.subTest", false]], "svm (class in cuvis_ai.supervised.sklearn_wrapped)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM", false]], "teardown() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.tearDown", false]], "teardown() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.tearDown", false]], "teardown() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.tearDown", false]], "teardown() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.tearDown", false]], "teardown() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.tearDown", false]], "teardown() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.tearDown", false]], "teardownclass() (cuvis_ai.test.test_numpy_utils.testnumpyutils class method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf class method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca class method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testpreprocessornmf class method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testpreprocessorpca class method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testsupervisedlda class method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testtransformationreflectance class method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testtransformationtorch class method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testtransformationtorchvision class method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testunsupervisedgmm class method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testunsupervisedkmeans class method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift class method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm class method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.tearDownClass", false]], "teardownclass() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans class method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.tearDownClass", false]], "test_correct_input_dim() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[65, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_correct_input_dim", false]], "test_correct_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[82, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_correct_input_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[65, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_correct_output_dim", false]], "test_correct_output_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[82, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_correct_output_dim", false]], "test_get_shape_without_batch() (cuvis_ai.test.test_numpy_utils.testnumpyutils method)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils.test_get_shape_without_batch", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[65, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_incorrect_input_dim", false]], "test_incorrect_input_dim() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[82, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_incorrect_input_dim", false]], "test_initialization() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[65, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_initialization", false]], "test_initialization() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[82, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_initialization", false]], "test_passthrough() (cuvis_ai.test.test_preprocessor_structural.testpreprocessednode method)": [[65, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_preprocessor_structural.testunsupervisednmf method)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_preprocessor_structural.testunsupervisedpca method)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedgmm method)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_unsupervised_structural.testunsupervisedkmeans method)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans.test_passthrough", false]], "test_passthrough() (cuvis_ai.test.test_unsupervised_structural.testunsupervisednode method)": [[82, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode.test_passthrough", false]], "test_serialization() (cuvis_ai.test.test_serialization.testnodeserialization method)": [[69, "cuvis_ai.test.test_serialization.TestNodeSerialization.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testpreprocessornmf method)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testpreprocessorpca method)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testsupervisedlda method)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testtransformationreflectance method)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testtransformationtorch method)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testtransformationtorchvision method)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testunsupervisedgmm method)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testunsupervisedkmeans method)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans.test_serialization", false]], "test_serialization() (cuvis_ai.test.test_serialization.testunsupervisedmeanshift method)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift.test_serialization", false]], "testnodeserialization (class in cuvis_ai.test.test_serialization)": [[69, "cuvis_ai.test.test_serialization.TestNodeSerialization", false]], "testnumpyutils (class in cuvis_ai.test.test_numpy_utils)": [[62, "cuvis_ai.test.test_numpy_utils.TestNumpyUtils", false]], "testpreprocessednode (class in cuvis_ai.test.test_preprocessor_structural)": [[65, "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode", false]], "testpreprocessornmf (class in cuvis_ai.test.test_serialization)": [[70, "cuvis_ai.test.test_serialization.TestPreprocessorNMF", false]], "testpreprocessorpca (class in cuvis_ai.test.test_serialization)": [[71, "cuvis_ai.test.test_serialization.TestPreprocessorPCA", false]], "testsupervisedlda (class in cuvis_ai.test.test_serialization)": [[72, "cuvis_ai.test.test_serialization.TestSupervisedLDA", false]], "testtransformationreflectance (class in cuvis_ai.test.test_serialization)": [[73, "cuvis_ai.test.test_serialization.TestTransformationReflectance", false]], "testtransformationtorch (class in cuvis_ai.test.test_serialization)": [[74, "cuvis_ai.test.test_serialization.TestTransformationTorch", false]], "testtransformationtorchvision (class in cuvis_ai.test.test_serialization)": [[75, "cuvis_ai.test.test_serialization.TestTransformationTorchVision", false]], "testunsupervisedgmm (class in cuvis_ai.test.test_serialization)": [[76, "cuvis_ai.test.test_serialization.TestUnsupervisedGMM", false]], "testunsupervisedgmm (class in cuvis_ai.test.test_unsupervised_structural)": [[80, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM", false]], "testunsupervisedkmeans (class in cuvis_ai.test.test_serialization)": [[77, "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans", false]], "testunsupervisedkmeans (class in cuvis_ai.test.test_unsupervised_structural)": [[81, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans", false]], "testunsupervisedmeanshift (class in cuvis_ai.test.test_serialization)": [[78, "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift", false]], "testunsupervisednmf (class in cuvis_ai.test.test_preprocessor_structural)": [[66, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF", false]], "testunsupervisednode (class in cuvis_ai.test.test_unsupervised_structural)": [[82, "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode", false]], "testunsupervisedpca (class in cuvis_ai.test.test_preprocessor_structural)": [[67, "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA", false]], "three (cuvis_ai.utils.torch.inputdimension attribute)": [[154, "cuvis_ai.utils.torch.InputDimension.Three", false]], "timestamp_regexp (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.timestamp_regexp", false]], "torchtransformation (class in cuvis_ai.transformation.torch_transformation)": [[87, "cuvis_ai.transformation.torch_transformation.TorchTransformation", false]], "torchvisiontransformation (class in cuvis_ai.transformation.torchvision_transformation)": [[89, "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation", false]], "train() (cuvis_ai.pipeline.executor.memoryexecutor method)": [[45, "cuvis_ai.pipeline.executor.MemoryExecutor.train", false]], "training (cuvis_ai.tv_transforms.bandpass attribute)": [[94, "cuvis_ai.tv_transforms.Bandpass.training", false]], "training (cuvis_ai.tv_transforms.multibandpass attribute)": [[98, "cuvis_ai.tv_transforms.MultiBandpass.training", false]], "training (cuvis_ai.tv_transforms.normalizestddev attribute)": [[102, "cuvis_ai.tv_transforms.NormalizeStdDev.training", false]], "training (cuvis_ai.tv_transforms.normalizetofloat attribute)": [[106, "cuvis_ai.tv_transforms.NormalizeToFloat.training", false]], "transform() (cuvis_ai.preprocessor.sklearn_wrapped.nmf method)": [[50, "cuvis_ai.preprocessor.sklearn_wrapped.NMF.transform", false]], "transform() (cuvis_ai.preprocessor.sklearn_wrapped.pca method)": [[51, "cuvis_ai.preprocessor.sklearn_wrapped.PCA.transform", false]], "transform() (cuvis_ai.supervised.sklearn_wrapped.lda method)": [[54, "cuvis_ai.supervised.sklearn_wrapped.LDA.transform", false]], "transform() (cuvis_ai.unsupervised.sklearn_wrapped.kmeans method)": [[111, "cuvis_ai.unsupervised.sklearn_wrapped.KMeans.transform", false]], "two (cuvis_ai.utils.torch.inputdimension attribute)": [[154, "cuvis_ai.utils.torch.InputDimension.Two", false]], "unflatten_batch_and_labels() (in module cuvis_ai.utils.numpy)": [[132, "cuvis_ai.utils.numpy.unflatten_batch_and_labels", false]], "unflatten_batch_and_spatial() (in module cuvis_ai.utils.numpy)": [[133, "cuvis_ai.utils.numpy.unflatten_batch_and_spatial", false]], "unflatten_labels() (in module cuvis_ai.utils.numpy)": [[134, "cuvis_ai.utils.numpy.unflatten_labels", false]], "unflatten_spatial() (in module cuvis_ai.utils.numpy)": [[135, "cuvis_ai.utils.numpy.unflatten_spatial", false]], "unknown (cuvis_ai.utils.torch.inputdimension attribute)": [[154, "cuvis_ai.utils.torch.InputDimension.Unknown", false]], "unused_param (cuvis_ai.supervised.sklearn_wrapped.svm attribute)": [[57, "cuvis_ai.supervised.sklearn_wrapped.SVM.unused_param", false]], "unwind_indent() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.unwind_indent", false]], "update() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.update", false]], "update_raw() (cuvis_ai.utils.serializer.cuvisyamlloader method)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.update_raw", false]], "verbose (cuvis_ai.supervised.skorch_supervised.skorchsupervised attribute)": [[59, "cuvis_ai.supervised.skorch_supervised.SkorchSupervised.verbose", false]], "visualize_features() (in module cuvis_ai.utils.visualize)": [[158, "cuvis_ai.utils.visualize.visualize_features", false]], "visualize_image() (in module cuvis_ai.utils.visualize)": [[159, "cuvis_ai.utils.visualize.visualize_image", false]], "write_double_quoted() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_double_quoted", false]], "write_folded() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_folded", false]], "write_indent() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_indent", false]], "write_indicator() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_indicator", false]], "write_line_break() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_line_break", false]], "write_literal() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_literal", false]], "write_plain() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_plain", false]], "write_single_quoted() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_single_quoted", false]], "write_stream_end() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_stream_end", false]], "write_stream_start() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_stream_start", false]], "write_tag_directive() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_tag_directive", false]], "write_version_directive() (cuvis_ai.utils.serializer.cuvisyamldumper method)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.write_version_directive", false]], "yaml_constructors (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_constructors", false]], "yaml_implicit_resolvers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_implicit_resolvers", false]], "yaml_implicit_resolvers (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_implicit_resolvers", false]], "yaml_multi_constructors (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_multi_constructors", false]], "yaml_multi_representers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_multi_representers", false]], "yaml_path_resolvers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_path_resolvers", false]], "yaml_path_resolvers (cuvis_ai.utils.serializer.cuvisyamlloader attribute)": [[138, "cuvis_ai.utils.serializer.CuvisYamlLoader.yaml_path_resolvers", false]], "yaml_representers (cuvis_ai.utils.serializer.cuvisyamldumper attribute)": [[137, "cuvis_ai.utils.serializer.CuvisYamlDumper.yaml_representers", false]], "yamlserializer (class in cuvis_ai.utils.serializer)": [[141, "cuvis_ai.utils.serializer.YamlSerializer", false]]}, "objects": {"": [[0, 0, 0, "-", "cuvis_ai"]], "cuvis_ai": [[1, 0, 0, "-", "deciders"], [14, 0, 0, "-", "distance"], [24, 0, 0, "-", "node"], [43, 0, 0, "-", "pipeline"], [48, 0, 0, "-", "preprocessor"], [52, 0, 0, "-", "supervised"], [60, 0, 0, "-", "test"], [83, 0, 0, "-", "transformation"], [90, 0, 0, "-", "tv_transforms"], [108, 0, 0, "-", "unsupervised"], [113, 0, 0, "-", "utils"]], "cuvis_ai.deciders": [[2, 0, 0, "-", "base_decider"], [4, 0, 0, "-", "binary_decider"], [6, 0, 0, "-", "cascaded_decider"], [8, 0, 0, "-", "combining_decider"], [12, 0, 0, "-", "multiclass_decider"]], "cuvis_ai.deciders.base_decider": [[3, 1, 1, "", "BaseDecider"]], "cuvis_ai.deciders.base_decider.BaseDecider": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "check_input_dim"], [3, 2, 1, "", "check_output_dim"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "forward"], [3, 3, 1, "", "input_dim"], [3, 2, 1, "", "load"], [3, 3, 1, "", "output_dim"], [3, 2, 1, "", "serialize"]], "cuvis_ai.deciders.binary_decider": [[5, 1, 1, "", "BinaryDecider"]], "cuvis_ai.deciders.binary_decider.BinaryDecider": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "check_input_dim"], [5, 2, 1, "", "check_output_dim"], [5, 2, 1, "", "fit"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "input_dim"], [5, 2, 1, "", "load"], [5, 3, 1, "", "output_dim"], [5, 2, 1, "", "serialize"]], "cuvis_ai.deciders.cascaded_decider": [[7, 1, 1, "", "Cascaded"]], "cuvis_ai.deciders.cascaded_decider.Cascaded": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "check_input_dim"], [7, 2, 1, "", "check_output_dim"], [7, 2, 1, "", "fit"], [7, 2, 1, "", "forward"], [7, 3, 1, "", "input_dim"], [7, 2, 1, "", "load"], [7, 3, 1, "", "output_dim"], [7, 2, 1, "", "serialize"]], "cuvis_ai.deciders.combining_decider": [[9, 1, 1, "", "CombiningDecider"], [10, 4, 1, "", "all_agree"], [11, 4, 1, "", "at_least_n_agree"]], "cuvis_ai.deciders.combining_decider.CombiningDecider": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "check_input_dim"], [9, 2, 1, "", "check_output_dim"], [9, 2, 1, "", "fit"], [9, 2, 1, "", "forward"], [9, 3, 1, "", "input_dim"], [9, 2, 1, "", "load"], [9, 3, 1, "", "output_dim"], [9, 2, 1, "", "serialize"]], "cuvis_ai.deciders.multiclass_decider": [[13, 1, 1, "", "MultiClassDecider"]], "cuvis_ai.deciders.multiclass_decider.MultiClassDecider": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "check_input_dim"], [13, 2, 1, "", "check_output_dim"], [13, 2, 1, "", "fit"], [13, 2, 1, "", "forward"], [13, 3, 1, "", "input_dim"], [13, 2, 1, "", "load"], [13, 3, 1, "", "output_dim"], [13, 2, 1, "", "serialize"]], "cuvis_ai.distance": [[15, 0, 0, "-", "distance"]], "cuvis_ai.distance.distance": [[16, 1, 1, "", "AbstractDistance"], [17, 1, 1, "", "Canberra"], [18, 1, 1, "", "ECS"], [19, 1, 1, "", "Euclidean"], [20, 1, 1, "", "GFC"], [21, 1, 1, "", "Manhattan"], [22, 1, 1, "", "Minkowski"], [23, 1, 1, "", "SpectralAngle"]], "cuvis_ai.distance.distance.AbstractDistance": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "check_input_dim"], [16, 2, 1, "", "check_output_dim"], [16, 2, 1, "", "fit"], [16, 2, 1, "", "forward"], [16, 3, 1, "", "input_dim"], [16, 2, 1, "", "load"], [16, 3, 1, "", "output_dim"], [16, 2, 1, "", "score"], [16, 2, 1, "", "serialize"], [16, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Canberra": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "check_input_dim"], [17, 2, 1, "", "check_output_dim"], [17, 2, 1, "", "fit"], [17, 2, 1, "", "forward"], [17, 3, 1, "", "input_dim"], [17, 2, 1, "", "load"], [17, 3, 1, "", "output_dim"], [17, 2, 1, "", "score"], [17, 2, 1, "", "serialize"], [17, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.ECS": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "check_input_dim"], [18, 2, 1, "", "check_output_dim"], [18, 2, 1, "", "fit"], [18, 2, 1, "", "forward"], [18, 3, 1, "", "input_dim"], [18, 2, 1, "", "load"], [18, 3, 1, "", "output_dim"], [18, 2, 1, "", "score"], [18, 2, 1, "", "serialize"], [18, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Euclidean": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "check_input_dim"], [19, 2, 1, "", "check_output_dim"], [19, 2, 1, "", "fit"], [19, 2, 1, "", "forward"], [19, 3, 1, "", "input_dim"], [19, 2, 1, "", "load"], [19, 3, 1, "", "output_dim"], [19, 2, 1, "", "score"], [19, 2, 1, "", "serialize"], [19, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.GFC": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "check_input_dim"], [20, 2, 1, "", "check_output_dim"], [20, 2, 1, "", "fit"], [20, 2, 1, "", "forward"], [20, 3, 1, "", "input_dim"], [20, 2, 1, "", "load"], [20, 3, 1, "", "output_dim"], [20, 2, 1, "", "score"], [20, 2, 1, "", "serialize"], [20, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Manhattan": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "check_input_dim"], [21, 2, 1, "", "check_output_dim"], [21, 2, 1, "", "fit"], [21, 2, 1, "", "forward"], [21, 3, 1, "", "input_dim"], [21, 2, 1, "", "load"], [21, 3, 1, "", "output_dim"], [21, 2, 1, "", "score"], [21, 2, 1, "", "serialize"], [21, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.Minkowski": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "check_input_dim"], [22, 2, 1, "", "check_output_dim"], [22, 2, 1, "", "fit"], [22, 2, 1, "", "forward"], [22, 3, 1, "", "input_dim"], [22, 2, 1, "", "load"], [22, 3, 1, "", "output_dim"], [22, 2, 1, "", "score"], [22, 2, 1, "", "serialize"], [22, 2, 1, "", "spectra_to_array"]], "cuvis_ai.distance.distance.SpectralAngle": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "check_input_dim"], [23, 2, 1, "", "check_output_dim"], [23, 2, 1, "", "fit"], [23, 2, 1, "", "forward"], [23, 3, 1, "", "input_dim"], [23, 2, 1, "", "load"], [23, 3, 1, "", "output_dim"], [23, 2, 1, "", "score"], [23, 2, 1, "", "serialize"], [23, 2, 1, "", "spectra_to_array"]], "cuvis_ai.node": [[25, 0, 0, "-", "Consumers"], [31, 0, 0, "-", "base"], [36, 0, 0, "-", "node"], [38, 0, 0, "-", "sklearn"], [39, 0, 0, "-", "skorch"], [40, 0, 0, "-", "torch"], [41, 0, 0, "-", "wrap"]], "cuvis_ai.node.Consumers": [[26, 1, 1, "", "CubeConsumer"], [27, 1, 1, "", "LabelConsumer"], [28, 1, 1, "", "LabelConsumerInference"], [29, 1, 1, "", "MetadataConsumer"], [30, 1, 1, "", "MetadataConsumerInference"]], "cuvis_ai.node.Consumers.CubeConsumer": [[26, 2, 1, "", "__init__"]], "cuvis_ai.node.Consumers.LabelConsumer": [[27, 2, 1, "", "__init__"]], "cuvis_ai.node.Consumers.LabelConsumerInference": [[28, 2, 1, "", "__init__"]], "cuvis_ai.node.Consumers.MetadataConsumer": [[29, 2, 1, "", "__init__"]], "cuvis_ai.node.Consumers.MetadataConsumerInference": [[30, 2, 1, "", "__init__"]], "cuvis_ai.node.base": [[32, 1, 1, "", "BaseSupervised"], [33, 1, 1, "", "BaseTransformation"], [34, 1, 1, "", "BaseUnsupervised"], [35, 1, 1, "", "Preprocessor"]], "cuvis_ai.node.base.BaseSupervised": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "fit"], [32, 2, 1, "", "forward"]], "cuvis_ai.node.base.BaseTransformation": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "fit"], [33, 2, 1, "", "forward"], [33, 2, 1, "", "input_dim"], [33, 2, 1, "", "load"], [33, 2, 1, "", "output_dim"], [33, 2, 1, "", "serialize"]], "cuvis_ai.node.base.BaseUnsupervised": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "fit"], [34, 2, 1, "", "forward"]], "cuvis_ai.node.base.Preprocessor": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "fit"]], "cuvis_ai.node.node": [[37, 1, 1, "", "Node"]], "cuvis_ai.node.node.Node": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "check_input_dim"], [37, 2, 1, "", "check_output_dim"], [37, 2, 1, "", "forward"], [37, 3, 1, "", "input_dim"], [37, 2, 1, "", "load"], [37, 3, 1, "", "output_dim"], [37, 2, 1, "", "serialize"]], "cuvis_ai.node.wrap": [[42, 4, 1, "", "make_node"]], "cuvis_ai.pipeline": [[44, 0, 0, "-", "executor"], [46, 0, 0, "-", "graph"]], "cuvis_ai.pipeline.executor": [[45, 1, 1, "", "MemoryExecutor"]], "cuvis_ai.pipeline.executor.MemoryExecutor": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "forward"], [45, 2, 1, "", "train"]], "cuvis_ai.pipeline.graph": [[47, 1, 1, "", "Graph"]], "cuvis_ai.pipeline.graph.Graph": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "add_base_node"], [47, 2, 1, "", "add_edge"], [47, 2, 1, "", "add_node"], [47, 2, 1, "", "delete_node"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "forward"], [47, 2, 1, "", "load"], [47, 2, 1, "", "load_from_file"], [47, 2, 1, "", "save_to_file"], [47, 2, 1, "", "serialize"]], "cuvis_ai.preprocessor": [[49, 0, 0, "-", "sklearn_wrapped"]], "cuvis_ai.preprocessor.sklearn_wrapped": [[50, 1, 1, "", "NMF"], [51, 1, 1, "", "PCA"]], "cuvis_ai.preprocessor.sklearn_wrapped.NMF": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "check_input_dim"], [50, 2, 1, "", "check_output_dim"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "fit_transform"], [50, 2, 1, "", "forward"], [50, 2, 1, "", "get_feature_names_out"], [50, 2, 1, "", "get_metadata_routing"], [50, 2, 1, "", "get_params"], [50, 3, 1, "", "input_dim"], [50, 2, 1, "", "inverse_transform"], [50, 2, 1, "", "load"], [50, 3, 1, "", "output_dim"], [50, 2, 1, "", "serialize"], [50, 2, 1, "", "set_output"], [50, 2, 1, "", "set_params"], [50, 2, 1, "", "transform"]], "cuvis_ai.preprocessor.sklearn_wrapped.PCA": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "check_input_dim"], [51, 2, 1, "", "check_output_dim"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "fit_transform"], [51, 2, 1, "", "forward"], [51, 2, 1, "", "get_covariance"], [51, 2, 1, "", "get_feature_names_out"], [51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "get_precision"], [51, 3, 1, "", "input_dim"], [51, 2, 1, "", "inverse_transform"], [51, 2, 1, "", "load"], [51, 3, 1, "", "output_dim"], [51, 2, 1, "", "score"], [51, 2, 1, "", "score_samples"], [51, 2, 1, "", "serialize"], [51, 2, 1, "", "set_output"], [51, 2, 1, "", "set_params"], [51, 2, 1, "", "transform"]], "cuvis_ai.supervised": [[53, 0, 0, "-", "sklearn_wrapped"], [58, 0, 0, "-", "skorch_supervised"]], "cuvis_ai.supervised.sklearn_wrapped": [[54, 1, 1, "", "LDA"], [55, 1, 1, "", "MLP"], [56, 1, 1, "", "QDA"], [57, 1, 1, "", "SVM"]], "cuvis_ai.supervised.sklearn_wrapped.LDA": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "check_input_dim"], [54, 2, 1, "", "check_output_dim"], [54, 2, 1, "", "decision_function"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "fit_transform"], [54, 2, 1, "", "forward"], [54, 2, 1, "", "get_feature_names_out"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 3, 1, "", "input_dim"], [54, 2, 1, "", "load"], [54, 3, 1, "", "output_dim"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "predict_log_proba"], [54, 2, 1, "", "predict_proba"], [54, 2, 1, "", "score"], [54, 2, 1, "", "serialize"], [54, 2, 1, "", "set_output"], [54, 2, 1, "", "set_params"], [54, 2, 1, "", "set_score_request"], [54, 2, 1, "", "transform"]], "cuvis_ai.supervised.sklearn_wrapped.MLP": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "check_input_dim"], [55, 2, 1, "", "check_output_dim"], [55, 2, 1, "", "fit"], [55, 2, 1, "", "forward"], [55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 3, 1, "", "input_dim"], [55, 2, 1, "", "load"], [55, 3, 1, "", "output_dim"], [55, 2, 1, "", "partial_fit"], [55, 2, 1, "", "predict"], [55, 2, 1, "", "predict_log_proba"], [55, 2, 1, "", "predict_proba"], [55, 2, 1, "", "score"], [55, 2, 1, "", "serialize"], [55, 2, 1, "", "set_params"], [55, 2, 1, "", "set_partial_fit_request"], [55, 2, 1, "", "set_score_request"]], "cuvis_ai.supervised.sklearn_wrapped.QDA": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "check_input_dim"], [56, 2, 1, "", "check_output_dim"], [56, 2, 1, "", "decision_function"], [56, 2, 1, "", "fit"], [56, 2, 1, "", "forward"], [56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 3, 1, "", "input_dim"], [56, 2, 1, "", "load"], [56, 3, 1, "", "output_dim"], [56, 2, 1, "", "predict"], [56, 2, 1, "", "predict_log_proba"], [56, 2, 1, "", "predict_proba"], [56, 2, 1, "", "score"], [56, 2, 1, "", "serialize"], [56, 2, 1, "", "set_params"], [56, 2, 1, "", "set_score_request"]], "cuvis_ai.supervised.sklearn_wrapped.SVM": [[57, 2, 1, "", "__init__"], [57, 2, 1, "", "check_input_dim"], [57, 2, 1, "", "check_output_dim"], [57, 3, 1, "", "coef_"], [57, 2, 1, "", "decision_function"], [57, 2, 1, "", "fit"], [57, 2, 1, "", "forward"], [57, 2, 1, "", "get_metadata_routing"], [57, 2, 1, "", "get_params"], [57, 3, 1, "", "input_dim"], [57, 2, 1, "", "load"], [57, 3, 1, "", "n_support_"], [57, 3, 1, "", "output_dim"], [57, 2, 1, "", "predict"], [57, 2, 1, "", "predict_log_proba"], [57, 2, 1, "", "predict_proba"], [57, 3, 1, "", "probA_"], [57, 3, 1, "", "probB_"], [57, 2, 1, "", "score"], [57, 2, 1, "", "serialize"], [57, 2, 1, "", "set_fit_request"], [57, 2, 1, "", "set_params"], [57, 2, 1, "", "set_score_request"], [57, 5, 1, "", "unused_param"]], "cuvis_ai.supervised.skorch_supervised": [[59, 1, 1, "", "SkorchSupervised"]], "cuvis_ai.supervised.skorch_supervised.SkorchSupervised": [[59, 2, 1, "", "__init__"], [59, 5, 1, "", "epochs"], [59, 2, 1, "", "fit"], [59, 2, 1, "", "forward"], [59, 2, 1, "", "load"], [59, 5, 1, "", "model"], [59, 5, 1, "", "model_args"], [59, 5, 1, "", "optimizer"], [59, 2, 1, "", "serialize"], [59, 5, 1, "", "verbose"]], "cuvis_ai.test": [[61, 0, 0, "-", "test_numpy_utils"], [63, 0, 0, "-", "test_pipeline_graph"], [64, 0, 0, "-", "test_preprocessor_structural"], [68, 0, 0, "-", "test_serialization"], [79, 0, 0, "-", "test_unsupervised_structural"]], "cuvis_ai.test.test_numpy_utils": [[62, 1, 1, "", "TestNumpyUtils"]], "cuvis_ai.test.test_numpy_utils.TestNumpyUtils": [[62, 2, 1, "", "__init__"], [62, 2, 1, "", "addClassCleanup"], [62, 2, 1, "", "addCleanup"], [62, 2, 1, "", "addTypeEqualityFunc"], [62, 2, 1, "", "assertAlmostEqual"], [62, 2, 1, "", "assertAlmostEquals"], [62, 2, 1, "", "assertCountEqual"], [62, 2, 1, "", "assertDictContainsSubset"], [62, 2, 1, "", "assertDictEqual"], [62, 2, 1, "", "assertEqual"], [62, 2, 1, "", "assertEquals"], [62, 2, 1, "", "assertFalse"], [62, 2, 1, "", "assertGreater"], [62, 2, 1, "", "assertGreaterEqual"], [62, 2, 1, "", "assertIn"], [62, 2, 1, "", "assertIs"], [62, 2, 1, "", "assertIsInstance"], [62, 2, 1, "", "assertIsNone"], [62, 2, 1, "", "assertIsNot"], [62, 2, 1, "", "assertIsNotNone"], [62, 2, 1, "", "assertLess"], [62, 2, 1, "", "assertLessEqual"], [62, 2, 1, "", "assertListEqual"], [62, 2, 1, "", "assertLogs"], [62, 2, 1, "", "assertMultiLineEqual"], [62, 2, 1, "", "assertNoLogs"], [62, 2, 1, "", "assertNotAlmostEqual"], [62, 2, 1, "", "assertNotAlmostEquals"], [62, 2, 1, "", "assertNotEqual"], [62, 2, 1, "", "assertNotEquals"], [62, 2, 1, "", "assertNotIn"], [62, 2, 1, "", "assertNotIsInstance"], [62, 2, 1, "", "assertNotRegex"], [62, 2, 1, "", "assertNotRegexpMatches"], [62, 2, 1, "", "assertRaises"], [62, 2, 1, "", "assertRaisesRegex"], [62, 2, 1, "", "assertRaisesRegexp"], [62, 2, 1, "", "assertRegex"], [62, 2, 1, "", "assertRegexpMatches"], [62, 2, 1, "", "assertSequenceEqual"], [62, 2, 1, "", "assertSetEqual"], [62, 2, 1, "", "assertTrue"], [62, 2, 1, "", "assertTupleEqual"], [62, 2, 1, "", "assertWarns"], [62, 2, 1, "", "assertWarnsRegex"], [62, 2, 1, "", "assert_"], [62, 2, 1, "", "countTestCases"], [62, 2, 1, "", "debug"], [62, 2, 1, "", "defaultTestResult"], [62, 2, 1, "", "doClassCleanups"], [62, 2, 1, "", "doCleanups"], [62, 2, 1, "", "fail"], [62, 2, 1, "", "failIf"], [62, 2, 1, "", "failIfAlmostEqual"], [62, 2, 1, "", "failIfEqual"], [62, 2, 1, "", "failUnless"], [62, 2, 1, "", "failUnlessAlmostEqual"], [62, 2, 1, "", "failUnlessEqual"], [62, 2, 1, "", "failUnlessRaises"], [62, 5, 1, "", "failureException"], [62, 2, 1, "", "id"], [62, 5, 1, "", "longMessage"], [62, 5, 1, "", "maxDiff"], [62, 2, 1, "", "run"], [62, 2, 1, "", "setUp"], [62, 2, 1, "", "setUpClass"], [62, 2, 1, "", "shortDescription"], [62, 2, 1, "", "skipTest"], [62, 2, 1, "", "subTest"], [62, 2, 1, "", "tearDown"], [62, 2, 1, "", "tearDownClass"], [62, 2, 1, "", "test_get_shape_without_batch"]], "cuvis_ai.test.test_preprocessor_structural": [[65, 1, 1, "", "TestPreprocessedNode"], [66, 1, 1, "", "TestUnsupervisedNMF"], [67, 1, 1, "", "TestUnsupervisedPCA"]], "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode": [[65, 2, 1, "", "__init__"], [65, 2, 1, "", "setUp"], [65, 2, 1, "", "test_correct_input_dim"], [65, 2, 1, "", "test_correct_output_dim"], [65, 2, 1, "", "test_incorrect_input_dim"], [65, 2, 1, "", "test_initialization"], [65, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF": [[66, 2, 1, "", "__init__"], [66, 2, 1, "", "addClassCleanup"], [66, 2, 1, "", "addCleanup"], [66, 2, 1, "", "addTypeEqualityFunc"], [66, 2, 1, "", "assertAlmostEqual"], [66, 2, 1, "", "assertAlmostEquals"], [66, 2, 1, "", "assertCountEqual"], [66, 2, 1, "", "assertDictContainsSubset"], [66, 2, 1, "", "assertDictEqual"], [66, 2, 1, "", "assertEqual"], [66, 2, 1, "", "assertEquals"], [66, 2, 1, "", "assertFalse"], [66, 2, 1, "", "assertGreater"], [66, 2, 1, "", "assertGreaterEqual"], [66, 2, 1, "", "assertIn"], [66, 2, 1, "", "assertIs"], [66, 2, 1, "", "assertIsInstance"], [66, 2, 1, "", "assertIsNone"], [66, 2, 1, "", "assertIsNot"], [66, 2, 1, "", "assertIsNotNone"], [66, 2, 1, "", "assertLess"], [66, 2, 1, "", "assertLessEqual"], [66, 2, 1, "", "assertListEqual"], [66, 2, 1, "", "assertLogs"], [66, 2, 1, "", "assertMultiLineEqual"], [66, 2, 1, "", "assertNoLogs"], [66, 2, 1, "", "assertNotAlmostEqual"], [66, 2, 1, "", "assertNotAlmostEquals"], [66, 2, 1, "", "assertNotEqual"], [66, 2, 1, "", "assertNotEquals"], [66, 2, 1, "", "assertNotIn"], [66, 2, 1, "", "assertNotIsInstance"], [66, 2, 1, "", "assertNotRegex"], [66, 2, 1, "", "assertNotRegexpMatches"], [66, 2, 1, "", "assertRaises"], [66, 2, 1, "", "assertRaisesRegex"], [66, 2, 1, "", "assertRaisesRegexp"], [66, 2, 1, "", "assertRegex"], [66, 2, 1, "", "assertRegexpMatches"], [66, 2, 1, "", "assertSequenceEqual"], [66, 2, 1, "", "assertSetEqual"], [66, 2, 1, "", "assertTrue"], [66, 2, 1, "", "assertTupleEqual"], [66, 2, 1, "", "assertWarns"], [66, 2, 1, "", "assertWarnsRegex"], [66, 2, 1, "", "assert_"], [66, 2, 1, "", "countTestCases"], [66, 2, 1, "", "debug"], [66, 2, 1, "", "defaultTestResult"], [66, 2, 1, "", "doClassCleanups"], [66, 2, 1, "", "doCleanups"], [66, 2, 1, "", "fail"], [66, 2, 1, "", "failIf"], [66, 2, 1, "", "failIfAlmostEqual"], [66, 2, 1, "", "failIfEqual"], [66, 2, 1, "", "failUnless"], [66, 2, 1, "", "failUnlessAlmostEqual"], [66, 2, 1, "", "failUnlessEqual"], [66, 2, 1, "", "failUnlessRaises"], [66, 5, 1, "", "failureException"], [66, 2, 1, "", "id"], [66, 5, 1, "", "longMessage"], [66, 5, 1, "", "maxDiff"], [66, 2, 1, "", "run"], [66, 2, 1, "", "setUp"], [66, 2, 1, "", "setUpClass"], [66, 2, 1, "", "shortDescription"], [66, 2, 1, "", "skipTest"], [66, 2, 1, "", "subTest"], [66, 2, 1, "", "tearDown"], [66, 2, 1, "", "tearDownClass"], [66, 2, 1, "", "test_correct_input_dim"], [66, 2, 1, "", "test_correct_output_dim"], [66, 2, 1, "", "test_incorrect_input_dim"], [66, 2, 1, "", "test_initialization"], [66, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA": [[67, 2, 1, "", "__init__"], [67, 2, 1, "", "addClassCleanup"], [67, 2, 1, "", "addCleanup"], [67, 2, 1, "", "addTypeEqualityFunc"], [67, 2, 1, "", "assertAlmostEqual"], [67, 2, 1, "", "assertAlmostEquals"], [67, 2, 1, "", "assertCountEqual"], [67, 2, 1, "", "assertDictContainsSubset"], [67, 2, 1, "", "assertDictEqual"], [67, 2, 1, "", "assertEqual"], [67, 2, 1, "", "assertEquals"], [67, 2, 1, "", "assertFalse"], [67, 2, 1, "", "assertGreater"], [67, 2, 1, "", "assertGreaterEqual"], [67, 2, 1, "", "assertIn"], [67, 2, 1, "", "assertIs"], [67, 2, 1, "", "assertIsInstance"], [67, 2, 1, "", "assertIsNone"], [67, 2, 1, "", "assertIsNot"], [67, 2, 1, "", "assertIsNotNone"], [67, 2, 1, "", "assertLess"], [67, 2, 1, "", "assertLessEqual"], [67, 2, 1, "", "assertListEqual"], [67, 2, 1, "", "assertLogs"], [67, 2, 1, "", "assertMultiLineEqual"], [67, 2, 1, "", "assertNoLogs"], [67, 2, 1, "", "assertNotAlmostEqual"], [67, 2, 1, "", "assertNotAlmostEquals"], [67, 2, 1, "", "assertNotEqual"], [67, 2, 1, "", "assertNotEquals"], [67, 2, 1, "", "assertNotIn"], [67, 2, 1, "", "assertNotIsInstance"], [67, 2, 1, "", "assertNotRegex"], [67, 2, 1, "", "assertNotRegexpMatches"], [67, 2, 1, "", "assertRaises"], [67, 2, 1, "", "assertRaisesRegex"], [67, 2, 1, "", "assertRaisesRegexp"], [67, 2, 1, "", "assertRegex"], [67, 2, 1, "", "assertRegexpMatches"], [67, 2, 1, "", "assertSequenceEqual"], [67, 2, 1, "", "assertSetEqual"], [67, 2, 1, "", "assertTrue"], [67, 2, 1, "", "assertTupleEqual"], [67, 2, 1, "", "assertWarns"], [67, 2, 1, "", "assertWarnsRegex"], [67, 2, 1, "", "assert_"], [67, 2, 1, "", "countTestCases"], [67, 2, 1, "", "debug"], [67, 2, 1, "", "defaultTestResult"], [67, 2, 1, "", "doClassCleanups"], [67, 2, 1, "", "doCleanups"], [67, 2, 1, "", "fail"], [67, 2, 1, "", "failIf"], [67, 2, 1, "", "failIfAlmostEqual"], [67, 2, 1, "", "failIfEqual"], [67, 2, 1, "", "failUnless"], [67, 2, 1, "", "failUnlessAlmostEqual"], [67, 2, 1, "", "failUnlessEqual"], [67, 2, 1, "", "failUnlessRaises"], [67, 5, 1, "", "failureException"], [67, 2, 1, "", "id"], [67, 5, 1, "", "longMessage"], [67, 5, 1, "", "maxDiff"], [67, 2, 1, "", "run"], [67, 2, 1, "", "setUp"], [67, 2, 1, "", "setUpClass"], [67, 2, 1, "", "shortDescription"], [67, 2, 1, "", "skipTest"], [67, 2, 1, "", "subTest"], [67, 2, 1, "", "tearDown"], [67, 2, 1, "", "tearDownClass"], [67, 2, 1, "", "test_correct_input_dim"], [67, 2, 1, "", "test_correct_output_dim"], [67, 2, 1, "", "test_incorrect_input_dim"], [67, 2, 1, "", "test_initialization"], [67, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_serialization": [[69, 1, 1, "", "TestNodeSerialization"], [70, 1, 1, "", "TestPreprocessorNMF"], [71, 1, 1, "", "TestPreprocessorPCA"], [72, 1, 1, "", "TestSupervisedLDA"], [73, 1, 1, "", "TestTransformationReflectance"], [74, 1, 1, "", "TestTransformationTorch"], [75, 1, 1, "", "TestTransformationTorchVision"], [76, 1, 1, "", "TestUnsupervisedGMM"], [77, 1, 1, "", "TestUnsupervisedKMeans"], [78, 1, 1, "", "TestUnsupervisedMeanShift"]], "cuvis_ai.test.test_serialization.TestNodeSerialization": [[69, 2, 1, "", "__init__"], [69, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestPreprocessorNMF": [[70, 2, 1, "", "__init__"], [70, 2, 1, "", "addClassCleanup"], [70, 2, 1, "", "addCleanup"], [70, 2, 1, "", "addTypeEqualityFunc"], [70, 2, 1, "", "assertAlmostEqual"], [70, 2, 1, "", "assertAlmostEquals"], [70, 2, 1, "", "assertCountEqual"], [70, 2, 1, "", "assertDictContainsSubset"], [70, 2, 1, "", "assertDictEqual"], [70, 2, 1, "", "assertEqual"], [70, 2, 1, "", "assertEquals"], [70, 2, 1, "", "assertFalse"], [70, 2, 1, "", "assertGreater"], [70, 2, 1, "", "assertGreaterEqual"], [70, 2, 1, "", "assertIn"], [70, 2, 1, "", "assertIs"], [70, 2, 1, "", "assertIsInstance"], [70, 2, 1, "", "assertIsNone"], [70, 2, 1, "", "assertIsNot"], [70, 2, 1, "", "assertIsNotNone"], [70, 2, 1, "", "assertLess"], [70, 2, 1, "", "assertLessEqual"], [70, 2, 1, "", "assertListEqual"], [70, 2, 1, "", "assertLogs"], [70, 2, 1, "", "assertMultiLineEqual"], [70, 2, 1, "", "assertNoLogs"], [70, 2, 1, "", "assertNotAlmostEqual"], [70, 2, 1, "", "assertNotAlmostEquals"], [70, 2, 1, "", "assertNotEqual"], [70, 2, 1, "", "assertNotEquals"], [70, 2, 1, "", "assertNotIn"], [70, 2, 1, "", "assertNotIsInstance"], [70, 2, 1, "", "assertNotRegex"], [70, 2, 1, "", "assertNotRegexpMatches"], [70, 2, 1, "", "assertRaises"], [70, 2, 1, "", "assertRaisesRegex"], [70, 2, 1, "", "assertRaisesRegexp"], [70, 2, 1, "", "assertRegex"], [70, 2, 1, "", "assertRegexpMatches"], [70, 2, 1, "", "assertSequenceEqual"], [70, 2, 1, "", "assertSetEqual"], [70, 2, 1, "", "assertTrue"], [70, 2, 1, "", "assertTupleEqual"], [70, 2, 1, "", "assertWarns"], [70, 2, 1, "", "assertWarnsRegex"], [70, 2, 1, "", "assert_"], [70, 2, 1, "", "countTestCases"], [70, 2, 1, "", "debug"], [70, 2, 1, "", "defaultTestResult"], [70, 2, 1, "", "doClassCleanups"], [70, 2, 1, "", "doCleanups"], [70, 2, 1, "", "fail"], [70, 2, 1, "", "failIf"], [70, 2, 1, "", "failIfAlmostEqual"], [70, 2, 1, "", "failIfEqual"], [70, 2, 1, "", "failUnless"], [70, 2, 1, "", "failUnlessAlmostEqual"], [70, 2, 1, "", "failUnlessEqual"], [70, 2, 1, "", "failUnlessRaises"], [70, 5, 1, "", "failureException"], [70, 2, 1, "", "id"], [70, 5, 1, "", "longMessage"], [70, 5, 1, "", "maxDiff"], [70, 2, 1, "", "run"], [70, 2, 1, "", "setUp"], [70, 2, 1, "", "setUpClass"], [70, 2, 1, "", "shortDescription"], [70, 2, 1, "", "skipTest"], [70, 2, 1, "", "subTest"], [70, 2, 1, "", "tearDown"], [70, 2, 1, "", "tearDownClass"], [70, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestPreprocessorPCA": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "addClassCleanup"], [71, 2, 1, "", "addCleanup"], [71, 2, 1, "", "addTypeEqualityFunc"], [71, 2, 1, "", "assertAlmostEqual"], [71, 2, 1, "", "assertAlmostEquals"], [71, 2, 1, "", "assertCountEqual"], [71, 2, 1, "", "assertDictContainsSubset"], [71, 2, 1, "", "assertDictEqual"], [71, 2, 1, "", "assertEqual"], [71, 2, 1, "", "assertEquals"], [71, 2, 1, "", "assertFalse"], [71, 2, 1, "", "assertGreater"], [71, 2, 1, "", "assertGreaterEqual"], [71, 2, 1, "", "assertIn"], [71, 2, 1, "", "assertIs"], [71, 2, 1, "", "assertIsInstance"], [71, 2, 1, "", "assertIsNone"], [71, 2, 1, "", "assertIsNot"], [71, 2, 1, "", "assertIsNotNone"], [71, 2, 1, "", "assertLess"], [71, 2, 1, "", "assertLessEqual"], [71, 2, 1, "", "assertListEqual"], [71, 2, 1, "", "assertLogs"], [71, 2, 1, "", "assertMultiLineEqual"], [71, 2, 1, "", "assertNoLogs"], [71, 2, 1, "", "assertNotAlmostEqual"], [71, 2, 1, "", "assertNotAlmostEquals"], [71, 2, 1, "", "assertNotEqual"], [71, 2, 1, "", "assertNotEquals"], [71, 2, 1, "", "assertNotIn"], [71, 2, 1, "", "assertNotIsInstance"], [71, 2, 1, "", "assertNotRegex"], [71, 2, 1, "", "assertNotRegexpMatches"], [71, 2, 1, "", "assertRaises"], [71, 2, 1, "", "assertRaisesRegex"], [71, 2, 1, "", "assertRaisesRegexp"], [71, 2, 1, "", "assertRegex"], [71, 2, 1, "", "assertRegexpMatches"], [71, 2, 1, "", "assertSequenceEqual"], [71, 2, 1, "", "assertSetEqual"], [71, 2, 1, "", "assertTrue"], [71, 2, 1, "", "assertTupleEqual"], [71, 2, 1, "", "assertWarns"], [71, 2, 1, "", "assertWarnsRegex"], [71, 2, 1, "", "assert_"], [71, 2, 1, "", "countTestCases"], [71, 2, 1, "", "debug"], [71, 2, 1, "", "defaultTestResult"], [71, 2, 1, "", "doClassCleanups"], [71, 2, 1, "", "doCleanups"], [71, 2, 1, "", "fail"], [71, 2, 1, "", "failIf"], [71, 2, 1, "", "failIfAlmostEqual"], [71, 2, 1, "", "failIfEqual"], [71, 2, 1, "", "failUnless"], [71, 2, 1, "", "failUnlessAlmostEqual"], [71, 2, 1, "", "failUnlessEqual"], [71, 2, 1, "", "failUnlessRaises"], [71, 5, 1, "", "failureException"], [71, 2, 1, "", "id"], [71, 5, 1, "", "longMessage"], [71, 5, 1, "", "maxDiff"], [71, 2, 1, "", "run"], [71, 2, 1, "", "setUp"], [71, 2, 1, "", "setUpClass"], [71, 2, 1, "", "shortDescription"], [71, 2, 1, "", "skipTest"], [71, 2, 1, "", "subTest"], [71, 2, 1, "", "tearDown"], [71, 2, 1, "", "tearDownClass"], [71, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestSupervisedLDA": [[72, 2, 1, "", "__init__"], [72, 2, 1, "", "addClassCleanup"], [72, 2, 1, "", "addCleanup"], [72, 2, 1, "", "addTypeEqualityFunc"], [72, 2, 1, "", "assertAlmostEqual"], [72, 2, 1, "", "assertAlmostEquals"], [72, 2, 1, "", "assertCountEqual"], [72, 2, 1, "", "assertDictContainsSubset"], [72, 2, 1, "", "assertDictEqual"], [72, 2, 1, "", "assertEqual"], [72, 2, 1, "", "assertEquals"], [72, 2, 1, "", "assertFalse"], [72, 2, 1, "", "assertGreater"], [72, 2, 1, "", "assertGreaterEqual"], [72, 2, 1, "", "assertIn"], [72, 2, 1, "", "assertIs"], [72, 2, 1, "", "assertIsInstance"], [72, 2, 1, "", "assertIsNone"], [72, 2, 1, "", "assertIsNot"], [72, 2, 1, "", "assertIsNotNone"], [72, 2, 1, "", "assertLess"], [72, 2, 1, "", "assertLessEqual"], [72, 2, 1, "", "assertListEqual"], [72, 2, 1, "", "assertLogs"], [72, 2, 1, "", "assertMultiLineEqual"], [72, 2, 1, "", "assertNoLogs"], [72, 2, 1, "", "assertNotAlmostEqual"], [72, 2, 1, "", "assertNotAlmostEquals"], [72, 2, 1, "", "assertNotEqual"], [72, 2, 1, "", "assertNotEquals"], [72, 2, 1, "", "assertNotIn"], [72, 2, 1, "", "assertNotIsInstance"], [72, 2, 1, "", "assertNotRegex"], [72, 2, 1, "", "assertNotRegexpMatches"], [72, 2, 1, "", "assertRaises"], [72, 2, 1, "", "assertRaisesRegex"], [72, 2, 1, "", "assertRaisesRegexp"], [72, 2, 1, "", "assertRegex"], [72, 2, 1, "", "assertRegexpMatches"], [72, 2, 1, "", "assertSequenceEqual"], [72, 2, 1, "", "assertSetEqual"], [72, 2, 1, "", "assertTrue"], [72, 2, 1, "", "assertTupleEqual"], [72, 2, 1, "", "assertWarns"], [72, 2, 1, "", "assertWarnsRegex"], [72, 2, 1, "", "assert_"], [72, 2, 1, "", "countTestCases"], [72, 2, 1, "", "debug"], [72, 2, 1, "", "defaultTestResult"], [72, 2, 1, "", "doClassCleanups"], [72, 2, 1, "", "doCleanups"], [72, 2, 1, "", "fail"], [72, 2, 1, "", "failIf"], [72, 2, 1, "", "failIfAlmostEqual"], [72, 2, 1, "", "failIfEqual"], [72, 2, 1, "", "failUnless"], [72, 2, 1, "", "failUnlessAlmostEqual"], [72, 2, 1, "", "failUnlessEqual"], [72, 2, 1, "", "failUnlessRaises"], [72, 5, 1, "", "failureException"], [72, 2, 1, "", "id"], [72, 5, 1, "", "longMessage"], [72, 5, 1, "", "maxDiff"], [72, 2, 1, "", "run"], [72, 2, 1, "", "setUp"], [72, 2, 1, "", "setUpClass"], [72, 2, 1, "", "shortDescription"], [72, 2, 1, "", "skipTest"], [72, 2, 1, "", "subTest"], [72, 2, 1, "", "tearDown"], [72, 2, 1, "", "tearDownClass"], [72, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestTransformationReflectance": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "addClassCleanup"], [73, 2, 1, "", "addCleanup"], [73, 2, 1, "", "addTypeEqualityFunc"], [73, 2, 1, "", "assertAlmostEqual"], [73, 2, 1, "", "assertAlmostEquals"], [73, 2, 1, "", "assertCountEqual"], [73, 2, 1, "", "assertDictContainsSubset"], [73, 2, 1, "", "assertDictEqual"], [73, 2, 1, "", "assertEqual"], [73, 2, 1, "", "assertEquals"], [73, 2, 1, "", "assertFalse"], [73, 2, 1, "", "assertGreater"], [73, 2, 1, "", "assertGreaterEqual"], [73, 2, 1, "", "assertIn"], [73, 2, 1, "", "assertIs"], [73, 2, 1, "", "assertIsInstance"], [73, 2, 1, "", "assertIsNone"], [73, 2, 1, "", "assertIsNot"], [73, 2, 1, "", "assertIsNotNone"], [73, 2, 1, "", "assertLess"], [73, 2, 1, "", "assertLessEqual"], [73, 2, 1, "", "assertListEqual"], [73, 2, 1, "", "assertLogs"], [73, 2, 1, "", "assertMultiLineEqual"], [73, 2, 1, "", "assertNoLogs"], [73, 2, 1, "", "assertNotAlmostEqual"], [73, 2, 1, "", "assertNotAlmostEquals"], [73, 2, 1, "", "assertNotEqual"], [73, 2, 1, "", "assertNotEquals"], [73, 2, 1, "", "assertNotIn"], [73, 2, 1, "", "assertNotIsInstance"], [73, 2, 1, "", "assertNotRegex"], [73, 2, 1, "", "assertNotRegexpMatches"], [73, 2, 1, "", "assertRaises"], [73, 2, 1, "", "assertRaisesRegex"], [73, 2, 1, "", "assertRaisesRegexp"], [73, 2, 1, "", "assertRegex"], [73, 2, 1, "", "assertRegexpMatches"], [73, 2, 1, "", "assertSequenceEqual"], [73, 2, 1, "", "assertSetEqual"], [73, 2, 1, "", "assertTrue"], [73, 2, 1, "", "assertTupleEqual"], [73, 2, 1, "", "assertWarns"], [73, 2, 1, "", "assertWarnsRegex"], [73, 2, 1, "", "assert_"], [73, 2, 1, "", "countTestCases"], [73, 2, 1, "", "debug"], [73, 2, 1, "", "defaultTestResult"], [73, 2, 1, "", "doClassCleanups"], [73, 2, 1, "", "doCleanups"], [73, 2, 1, "", "fail"], [73, 2, 1, "", "failIf"], [73, 2, 1, "", "failIfAlmostEqual"], [73, 2, 1, "", "failIfEqual"], [73, 2, 1, "", "failUnless"], [73, 2, 1, "", "failUnlessAlmostEqual"], [73, 2, 1, "", "failUnlessEqual"], [73, 2, 1, "", "failUnlessRaises"], [73, 5, 1, "", "failureException"], [73, 2, 1, "", "id"], [73, 5, 1, "", "longMessage"], [73, 5, 1, "", "maxDiff"], [73, 2, 1, "", "run"], [73, 2, 1, "", "setUp"], [73, 2, 1, "", "setUpClass"], [73, 2, 1, "", "shortDescription"], [73, 2, 1, "", "skipTest"], [73, 2, 1, "", "subTest"], [73, 2, 1, "", "tearDown"], [73, 2, 1, "", "tearDownClass"], [73, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestTransformationTorch": [[74, 2, 1, "", "__init__"], [74, 2, 1, "", "addClassCleanup"], [74, 2, 1, "", "addCleanup"], [74, 2, 1, "", "addTypeEqualityFunc"], [74, 2, 1, "", "assertAlmostEqual"], [74, 2, 1, "", "assertAlmostEquals"], [74, 2, 1, "", "assertCountEqual"], [74, 2, 1, "", "assertDictContainsSubset"], [74, 2, 1, "", "assertDictEqual"], [74, 2, 1, "", "assertEqual"], [74, 2, 1, "", "assertEquals"], [74, 2, 1, "", "assertFalse"], [74, 2, 1, "", "assertGreater"], [74, 2, 1, "", "assertGreaterEqual"], [74, 2, 1, "", "assertIn"], [74, 2, 1, "", "assertIs"], [74, 2, 1, "", "assertIsInstance"], [74, 2, 1, "", "assertIsNone"], [74, 2, 1, "", "assertIsNot"], [74, 2, 1, "", "assertIsNotNone"], [74, 2, 1, "", "assertLess"], [74, 2, 1, "", "assertLessEqual"], [74, 2, 1, "", "assertListEqual"], [74, 2, 1, "", "assertLogs"], [74, 2, 1, "", "assertMultiLineEqual"], [74, 2, 1, "", "assertNoLogs"], [74, 2, 1, "", "assertNotAlmostEqual"], [74, 2, 1, "", "assertNotAlmostEquals"], [74, 2, 1, "", "assertNotEqual"], [74, 2, 1, "", "assertNotEquals"], [74, 2, 1, "", "assertNotIn"], [74, 2, 1, "", "assertNotIsInstance"], [74, 2, 1, "", "assertNotRegex"], [74, 2, 1, "", "assertNotRegexpMatches"], [74, 2, 1, "", "assertRaises"], [74, 2, 1, "", "assertRaisesRegex"], [74, 2, 1, "", "assertRaisesRegexp"], [74, 2, 1, "", "assertRegex"], [74, 2, 1, "", "assertRegexpMatches"], [74, 2, 1, "", "assertSequenceEqual"], [74, 2, 1, "", "assertSetEqual"], [74, 2, 1, "", "assertTrue"], [74, 2, 1, "", "assertTupleEqual"], [74, 2, 1, "", "assertWarns"], [74, 2, 1, "", "assertWarnsRegex"], [74, 2, 1, "", "assert_"], [74, 2, 1, "", "countTestCases"], [74, 2, 1, "", "debug"], [74, 2, 1, "", "defaultTestResult"], [74, 2, 1, "", "doClassCleanups"], [74, 2, 1, "", "doCleanups"], [74, 2, 1, "", "fail"], [74, 2, 1, "", "failIf"], [74, 2, 1, "", "failIfAlmostEqual"], [74, 2, 1, "", "failIfEqual"], [74, 2, 1, "", "failUnless"], [74, 2, 1, "", "failUnlessAlmostEqual"], [74, 2, 1, "", "failUnlessEqual"], [74, 2, 1, "", "failUnlessRaises"], [74, 5, 1, "", "failureException"], [74, 2, 1, "", "id"], [74, 5, 1, "", "longMessage"], [74, 5, 1, "", "maxDiff"], [74, 2, 1, "", "run"], [74, 2, 1, "", "setUp"], [74, 2, 1, "", "setUpClass"], [74, 2, 1, "", "shortDescription"], [74, 2, 1, "", "skipTest"], [74, 2, 1, "", "subTest"], [74, 2, 1, "", "tearDown"], [74, 2, 1, "", "tearDownClass"], [74, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestTransformationTorchVision": [[75, 2, 1, "", "__init__"], [75, 2, 1, "", "addClassCleanup"], [75, 2, 1, "", "addCleanup"], [75, 2, 1, "", "addTypeEqualityFunc"], [75, 2, 1, "", "assertAlmostEqual"], [75, 2, 1, "", "assertAlmostEquals"], [75, 2, 1, "", "assertCountEqual"], [75, 2, 1, "", "assertDictContainsSubset"], [75, 2, 1, "", "assertDictEqual"], [75, 2, 1, "", "assertEqual"], [75, 2, 1, "", "assertEquals"], [75, 2, 1, "", "assertFalse"], [75, 2, 1, "", "assertGreater"], [75, 2, 1, "", "assertGreaterEqual"], [75, 2, 1, "", "assertIn"], [75, 2, 1, "", "assertIs"], [75, 2, 1, "", "assertIsInstance"], [75, 2, 1, "", "assertIsNone"], [75, 2, 1, "", "assertIsNot"], [75, 2, 1, "", "assertIsNotNone"], [75, 2, 1, "", "assertLess"], [75, 2, 1, "", "assertLessEqual"], [75, 2, 1, "", "assertListEqual"], [75, 2, 1, "", "assertLogs"], [75, 2, 1, "", "assertMultiLineEqual"], [75, 2, 1, "", "assertNoLogs"], [75, 2, 1, "", "assertNotAlmostEqual"], [75, 2, 1, "", "assertNotAlmostEquals"], [75, 2, 1, "", "assertNotEqual"], [75, 2, 1, "", "assertNotEquals"], [75, 2, 1, "", "assertNotIn"], [75, 2, 1, "", "assertNotIsInstance"], [75, 2, 1, "", "assertNotRegex"], [75, 2, 1, "", "assertNotRegexpMatches"], [75, 2, 1, "", "assertRaises"], [75, 2, 1, "", "assertRaisesRegex"], [75, 2, 1, "", "assertRaisesRegexp"], [75, 2, 1, "", "assertRegex"], [75, 2, 1, "", "assertRegexpMatches"], [75, 2, 1, "", "assertSequenceEqual"], [75, 2, 1, "", "assertSetEqual"], [75, 2, 1, "", "assertTrue"], [75, 2, 1, "", "assertTupleEqual"], [75, 2, 1, "", "assertWarns"], [75, 2, 1, "", "assertWarnsRegex"], [75, 2, 1, "", "assert_"], [75, 2, 1, "", "countTestCases"], [75, 2, 1, "", "debug"], [75, 2, 1, "", "defaultTestResult"], [75, 2, 1, "", "doClassCleanups"], [75, 2, 1, "", "doCleanups"], [75, 2, 1, "", "fail"], [75, 2, 1, "", "failIf"], [75, 2, 1, "", "failIfAlmostEqual"], [75, 2, 1, "", "failIfEqual"], [75, 2, 1, "", "failUnless"], [75, 2, 1, "", "failUnlessAlmostEqual"], [75, 2, 1, "", "failUnlessEqual"], [75, 2, 1, "", "failUnlessRaises"], [75, 5, 1, "", "failureException"], [75, 2, 1, "", "id"], [75, 5, 1, "", "longMessage"], [75, 5, 1, "", "maxDiff"], [75, 2, 1, "", "run"], [75, 2, 1, "", "setUp"], [75, 2, 1, "", "setUpClass"], [75, 2, 1, "", "shortDescription"], [75, 2, 1, "", "skipTest"], [75, 2, 1, "", "subTest"], [75, 2, 1, "", "tearDown"], [75, 2, 1, "", "tearDownClass"], [75, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestUnsupervisedGMM": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "addClassCleanup"], [76, 2, 1, "", "addCleanup"], [76, 2, 1, "", "addTypeEqualityFunc"], [76, 2, 1, "", "assertAlmostEqual"], [76, 2, 1, "", "assertAlmostEquals"], [76, 2, 1, "", "assertCountEqual"], [76, 2, 1, "", "assertDictContainsSubset"], [76, 2, 1, "", "assertDictEqual"], [76, 2, 1, "", "assertEqual"], [76, 2, 1, "", "assertEquals"], [76, 2, 1, "", "assertFalse"], [76, 2, 1, "", "assertGreater"], [76, 2, 1, "", "assertGreaterEqual"], [76, 2, 1, "", "assertIn"], [76, 2, 1, "", "assertIs"], [76, 2, 1, "", "assertIsInstance"], [76, 2, 1, "", "assertIsNone"], [76, 2, 1, "", "assertIsNot"], [76, 2, 1, "", "assertIsNotNone"], [76, 2, 1, "", "assertLess"], [76, 2, 1, "", "assertLessEqual"], [76, 2, 1, "", "assertListEqual"], [76, 2, 1, "", "assertLogs"], [76, 2, 1, "", "assertMultiLineEqual"], [76, 2, 1, "", "assertNoLogs"], [76, 2, 1, "", "assertNotAlmostEqual"], [76, 2, 1, "", "assertNotAlmostEquals"], [76, 2, 1, "", "assertNotEqual"], [76, 2, 1, "", "assertNotEquals"], [76, 2, 1, "", "assertNotIn"], [76, 2, 1, "", "assertNotIsInstance"], [76, 2, 1, "", "assertNotRegex"], [76, 2, 1, "", "assertNotRegexpMatches"], [76, 2, 1, "", "assertRaises"], [76, 2, 1, "", "assertRaisesRegex"], [76, 2, 1, "", "assertRaisesRegexp"], [76, 2, 1, "", "assertRegex"], [76, 2, 1, "", "assertRegexpMatches"], [76, 2, 1, "", "assertSequenceEqual"], [76, 2, 1, "", "assertSetEqual"], [76, 2, 1, "", "assertTrue"], [76, 2, 1, "", "assertTupleEqual"], [76, 2, 1, "", "assertWarns"], [76, 2, 1, "", "assertWarnsRegex"], [76, 2, 1, "", "assert_"], [76, 2, 1, "", "countTestCases"], [76, 2, 1, "", "debug"], [76, 2, 1, "", "defaultTestResult"], [76, 2, 1, "", "doClassCleanups"], [76, 2, 1, "", "doCleanups"], [76, 2, 1, "", "fail"], [76, 2, 1, "", "failIf"], [76, 2, 1, "", "failIfAlmostEqual"], [76, 2, 1, "", "failIfEqual"], [76, 2, 1, "", "failUnless"], [76, 2, 1, "", "failUnlessAlmostEqual"], [76, 2, 1, "", "failUnlessEqual"], [76, 2, 1, "", "failUnlessRaises"], [76, 5, 1, "", "failureException"], [76, 2, 1, "", "id"], [76, 5, 1, "", "longMessage"], [76, 5, 1, "", "maxDiff"], [76, 2, 1, "", "run"], [76, 2, 1, "", "setUp"], [76, 2, 1, "", "setUpClass"], [76, 2, 1, "", "shortDescription"], [76, 2, 1, "", "skipTest"], [76, 2, 1, "", "subTest"], [76, 2, 1, "", "tearDown"], [76, 2, 1, "", "tearDownClass"], [76, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans": [[77, 2, 1, "", "__init__"], [77, 2, 1, "", "addClassCleanup"], [77, 2, 1, "", "addCleanup"], [77, 2, 1, "", "addTypeEqualityFunc"], [77, 2, 1, "", "assertAlmostEqual"], [77, 2, 1, "", "assertAlmostEquals"], [77, 2, 1, "", "assertCountEqual"], [77, 2, 1, "", "assertDictContainsSubset"], [77, 2, 1, "", "assertDictEqual"], [77, 2, 1, "", "assertEqual"], [77, 2, 1, "", "assertEquals"], [77, 2, 1, "", "assertFalse"], [77, 2, 1, "", "assertGreater"], [77, 2, 1, "", "assertGreaterEqual"], [77, 2, 1, "", "assertIn"], [77, 2, 1, "", "assertIs"], [77, 2, 1, "", "assertIsInstance"], [77, 2, 1, "", "assertIsNone"], [77, 2, 1, "", "assertIsNot"], [77, 2, 1, "", "assertIsNotNone"], [77, 2, 1, "", "assertLess"], [77, 2, 1, "", "assertLessEqual"], [77, 2, 1, "", "assertListEqual"], [77, 2, 1, "", "assertLogs"], [77, 2, 1, "", "assertMultiLineEqual"], [77, 2, 1, "", "assertNoLogs"], [77, 2, 1, "", "assertNotAlmostEqual"], [77, 2, 1, "", "assertNotAlmostEquals"], [77, 2, 1, "", "assertNotEqual"], [77, 2, 1, "", "assertNotEquals"], [77, 2, 1, "", "assertNotIn"], [77, 2, 1, "", "assertNotIsInstance"], [77, 2, 1, "", "assertNotRegex"], [77, 2, 1, "", "assertNotRegexpMatches"], [77, 2, 1, "", "assertRaises"], [77, 2, 1, "", "assertRaisesRegex"], [77, 2, 1, "", "assertRaisesRegexp"], [77, 2, 1, "", "assertRegex"], [77, 2, 1, "", "assertRegexpMatches"], [77, 2, 1, "", "assertSequenceEqual"], [77, 2, 1, "", "assertSetEqual"], [77, 2, 1, "", "assertTrue"], [77, 2, 1, "", "assertTupleEqual"], [77, 2, 1, "", "assertWarns"], [77, 2, 1, "", "assertWarnsRegex"], [77, 2, 1, "", "assert_"], [77, 2, 1, "", "countTestCases"], [77, 2, 1, "", "debug"], [77, 2, 1, "", "defaultTestResult"], [77, 2, 1, "", "doClassCleanups"], [77, 2, 1, "", "doCleanups"], [77, 2, 1, "", "fail"], [77, 2, 1, "", "failIf"], [77, 2, 1, "", "failIfAlmostEqual"], [77, 2, 1, "", "failIfEqual"], [77, 2, 1, "", "failUnless"], [77, 2, 1, "", "failUnlessAlmostEqual"], [77, 2, 1, "", "failUnlessEqual"], [77, 2, 1, "", "failUnlessRaises"], [77, 5, 1, "", "failureException"], [77, 2, 1, "", "id"], [77, 5, 1, "", "longMessage"], [77, 5, 1, "", "maxDiff"], [77, 2, 1, "", "run"], [77, 2, 1, "", "setUp"], [77, 2, 1, "", "setUpClass"], [77, 2, 1, "", "shortDescription"], [77, 2, 1, "", "skipTest"], [77, 2, 1, "", "subTest"], [77, 2, 1, "", "tearDown"], [77, 2, 1, "", "tearDownClass"], [77, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift": [[78, 2, 1, "", "__init__"], [78, 2, 1, "", "addClassCleanup"], [78, 2, 1, "", "addCleanup"], [78, 2, 1, "", "addTypeEqualityFunc"], [78, 2, 1, "", "assertAlmostEqual"], [78, 2, 1, "", "assertAlmostEquals"], [78, 2, 1, "", "assertCountEqual"], [78, 2, 1, "", "assertDictContainsSubset"], [78, 2, 1, "", "assertDictEqual"], [78, 2, 1, "", "assertEqual"], [78, 2, 1, "", "assertEquals"], [78, 2, 1, "", "assertFalse"], [78, 2, 1, "", "assertGreater"], [78, 2, 1, "", "assertGreaterEqual"], [78, 2, 1, "", "assertIn"], [78, 2, 1, "", "assertIs"], [78, 2, 1, "", "assertIsInstance"], [78, 2, 1, "", "assertIsNone"], [78, 2, 1, "", "assertIsNot"], [78, 2, 1, "", "assertIsNotNone"], [78, 2, 1, "", "assertLess"], [78, 2, 1, "", "assertLessEqual"], [78, 2, 1, "", "assertListEqual"], [78, 2, 1, "", "assertLogs"], [78, 2, 1, "", "assertMultiLineEqual"], [78, 2, 1, "", "assertNoLogs"], [78, 2, 1, "", "assertNotAlmostEqual"], [78, 2, 1, "", "assertNotAlmostEquals"], [78, 2, 1, "", "assertNotEqual"], [78, 2, 1, "", "assertNotEquals"], [78, 2, 1, "", "assertNotIn"], [78, 2, 1, "", "assertNotIsInstance"], [78, 2, 1, "", "assertNotRegex"], [78, 2, 1, "", "assertNotRegexpMatches"], [78, 2, 1, "", "assertRaises"], [78, 2, 1, "", "assertRaisesRegex"], [78, 2, 1, "", "assertRaisesRegexp"], [78, 2, 1, "", "assertRegex"], [78, 2, 1, "", "assertRegexpMatches"], [78, 2, 1, "", "assertSequenceEqual"], [78, 2, 1, "", "assertSetEqual"], [78, 2, 1, "", "assertTrue"], [78, 2, 1, "", "assertTupleEqual"], [78, 2, 1, "", "assertWarns"], [78, 2, 1, "", "assertWarnsRegex"], [78, 2, 1, "", "assert_"], [78, 2, 1, "", "countTestCases"], [78, 2, 1, "", "debug"], [78, 2, 1, "", "defaultTestResult"], [78, 2, 1, "", "doClassCleanups"], [78, 2, 1, "", "doCleanups"], [78, 2, 1, "", "fail"], [78, 2, 1, "", "failIf"], [78, 2, 1, "", "failIfAlmostEqual"], [78, 2, 1, "", "failIfEqual"], [78, 2, 1, "", "failUnless"], [78, 2, 1, "", "failUnlessAlmostEqual"], [78, 2, 1, "", "failUnlessEqual"], [78, 2, 1, "", "failUnlessRaises"], [78, 5, 1, "", "failureException"], [78, 2, 1, "", "id"], [78, 5, 1, "", "longMessage"], [78, 5, 1, "", "maxDiff"], [78, 2, 1, "", "run"], [78, 2, 1, "", "setUp"], [78, 2, 1, "", "setUpClass"], [78, 2, 1, "", "shortDescription"], [78, 2, 1, "", "skipTest"], [78, 2, 1, "", "subTest"], [78, 2, 1, "", "tearDown"], [78, 2, 1, "", "tearDownClass"], [78, 2, 1, "", "test_serialization"]], "cuvis_ai.test.test_unsupervised_structural": [[80, 1, 1, "", "TestUnsupervisedGMM"], [81, 1, 1, "", "TestUnsupervisedKMeans"], [82, 1, 1, "", "TestUnsupervisedNode"]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM": [[80, 2, 1, "", "__init__"], [80, 2, 1, "", "addClassCleanup"], [80, 2, 1, "", "addCleanup"], [80, 2, 1, "", "addTypeEqualityFunc"], [80, 2, 1, "", "assertAlmostEqual"], [80, 2, 1, "", "assertAlmostEquals"], [80, 2, 1, "", "assertCountEqual"], [80, 2, 1, "", "assertDictContainsSubset"], [80, 2, 1, "", "assertDictEqual"], [80, 2, 1, "", "assertEqual"], [80, 2, 1, "", "assertEquals"], [80, 2, 1, "", "assertFalse"], [80, 2, 1, "", "assertGreater"], [80, 2, 1, "", "assertGreaterEqual"], [80, 2, 1, "", "assertIn"], [80, 2, 1, "", "assertIs"], [80, 2, 1, "", "assertIsInstance"], [80, 2, 1, "", "assertIsNone"], [80, 2, 1, "", "assertIsNot"], [80, 2, 1, "", "assertIsNotNone"], [80, 2, 1, "", "assertLess"], [80, 2, 1, "", "assertLessEqual"], [80, 2, 1, "", "assertListEqual"], [80, 2, 1, "", "assertLogs"], [80, 2, 1, "", "assertMultiLineEqual"], [80, 2, 1, "", "assertNoLogs"], [80, 2, 1, "", "assertNotAlmostEqual"], [80, 2, 1, "", "assertNotAlmostEquals"], [80, 2, 1, "", "assertNotEqual"], [80, 2, 1, "", "assertNotEquals"], [80, 2, 1, "", "assertNotIn"], [80, 2, 1, "", "assertNotIsInstance"], [80, 2, 1, "", "assertNotRegex"], [80, 2, 1, "", "assertNotRegexpMatches"], [80, 2, 1, "", "assertRaises"], [80, 2, 1, "", "assertRaisesRegex"], [80, 2, 1, "", "assertRaisesRegexp"], [80, 2, 1, "", "assertRegex"], [80, 2, 1, "", "assertRegexpMatches"], [80, 2, 1, "", "assertSequenceEqual"], [80, 2, 1, "", "assertSetEqual"], [80, 2, 1, "", "assertTrue"], [80, 2, 1, "", "assertTupleEqual"], [80, 2, 1, "", "assertWarns"], [80, 2, 1, "", "assertWarnsRegex"], [80, 2, 1, "", "assert_"], [80, 2, 1, "", "countTestCases"], [80, 2, 1, "", "debug"], [80, 2, 1, "", "defaultTestResult"], [80, 2, 1, "", "doClassCleanups"], [80, 2, 1, "", "doCleanups"], [80, 2, 1, "", "fail"], [80, 2, 1, "", "failIf"], [80, 2, 1, "", "failIfAlmostEqual"], [80, 2, 1, "", "failIfEqual"], [80, 2, 1, "", "failUnless"], [80, 2, 1, "", "failUnlessAlmostEqual"], [80, 2, 1, "", "failUnlessEqual"], [80, 2, 1, "", "failUnlessRaises"], [80, 5, 1, "", "failureException"], [80, 2, 1, "", "id"], [80, 5, 1, "", "longMessage"], [80, 5, 1, "", "maxDiff"], [80, 2, 1, "", "run"], [80, 2, 1, "", "setUp"], [80, 2, 1, "", "setUpClass"], [80, 2, 1, "", "shortDescription"], [80, 2, 1, "", "skipTest"], [80, 2, 1, "", "subTest"], [80, 2, 1, "", "tearDown"], [80, 2, 1, "", "tearDownClass"], [80, 2, 1, "", "test_correct_input_dim"], [80, 2, 1, "", "test_correct_output_dim"], [80, 2, 1, "", "test_incorrect_input_dim"], [80, 2, 1, "", "test_initialization"], [80, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "addClassCleanup"], [81, 2, 1, "", "addCleanup"], [81, 2, 1, "", "addTypeEqualityFunc"], [81, 2, 1, "", "assertAlmostEqual"], [81, 2, 1, "", "assertAlmostEquals"], [81, 2, 1, "", "assertCountEqual"], [81, 2, 1, "", "assertDictContainsSubset"], [81, 2, 1, "", "assertDictEqual"], [81, 2, 1, "", "assertEqual"], [81, 2, 1, "", "assertEquals"], [81, 2, 1, "", "assertFalse"], [81, 2, 1, "", "assertGreater"], [81, 2, 1, "", "assertGreaterEqual"], [81, 2, 1, "", "assertIn"], [81, 2, 1, "", "assertIs"], [81, 2, 1, "", "assertIsInstance"], [81, 2, 1, "", "assertIsNone"], [81, 2, 1, "", "assertIsNot"], [81, 2, 1, "", "assertIsNotNone"], [81, 2, 1, "", "assertLess"], [81, 2, 1, "", "assertLessEqual"], [81, 2, 1, "", "assertListEqual"], [81, 2, 1, "", "assertLogs"], [81, 2, 1, "", "assertMultiLineEqual"], [81, 2, 1, "", "assertNoLogs"], [81, 2, 1, "", "assertNotAlmostEqual"], [81, 2, 1, "", "assertNotAlmostEquals"], [81, 2, 1, "", "assertNotEqual"], [81, 2, 1, "", "assertNotEquals"], [81, 2, 1, "", "assertNotIn"], [81, 2, 1, "", "assertNotIsInstance"], [81, 2, 1, "", "assertNotRegex"], [81, 2, 1, "", "assertNotRegexpMatches"], [81, 2, 1, "", "assertRaises"], [81, 2, 1, "", "assertRaisesRegex"], [81, 2, 1, "", "assertRaisesRegexp"], [81, 2, 1, "", "assertRegex"], [81, 2, 1, "", "assertRegexpMatches"], [81, 2, 1, "", "assertSequenceEqual"], [81, 2, 1, "", "assertSetEqual"], [81, 2, 1, "", "assertTrue"], [81, 2, 1, "", "assertTupleEqual"], [81, 2, 1, "", "assertWarns"], [81, 2, 1, "", "assertWarnsRegex"], [81, 2, 1, "", "assert_"], [81, 2, 1, "", "countTestCases"], [81, 2, 1, "", "debug"], [81, 2, 1, "", "defaultTestResult"], [81, 2, 1, "", "doClassCleanups"], [81, 2, 1, "", "doCleanups"], [81, 2, 1, "", "fail"], [81, 2, 1, "", "failIf"], [81, 2, 1, "", "failIfAlmostEqual"], [81, 2, 1, "", "failIfEqual"], [81, 2, 1, "", "failUnless"], [81, 2, 1, "", "failUnlessAlmostEqual"], [81, 2, 1, "", "failUnlessEqual"], [81, 2, 1, "", "failUnlessRaises"], [81, 5, 1, "", "failureException"], [81, 2, 1, "", "id"], [81, 5, 1, "", "longMessage"], [81, 5, 1, "", "maxDiff"], [81, 2, 1, "", "run"], [81, 2, 1, "", "setUp"], [81, 2, 1, "", "setUpClass"], [81, 2, 1, "", "shortDescription"], [81, 2, 1, "", "skipTest"], [81, 2, 1, "", "subTest"], [81, 2, 1, "", "tearDown"], [81, 2, 1, "", "tearDownClass"], [81, 2, 1, "", "test_correct_input_dim"], [81, 2, 1, "", "test_correct_output_dim"], [81, 2, 1, "", "test_incorrect_input_dim"], [81, 2, 1, "", "test_initialization"], [81, 2, 1, "", "test_passthrough"]], "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode": [[82, 2, 1, "", "__init__"], [82, 2, 1, "", "setUp"], [82, 2, 1, "", "test_correct_input_dim"], [82, 2, 1, "", "test_correct_output_dim"], [82, 2, 1, "", "test_incorrect_input_dim"], [82, 2, 1, "", "test_initialization"], [82, 2, 1, "", "test_passthrough"]], "cuvis_ai.transformation": [[84, 0, 0, "-", "reflectance"], [86, 0, 0, "-", "torch_transformation"], [88, 0, 0, "-", "torchvision_transformation"]], "cuvis_ai.transformation.reflectance": [[85, 1, 1, "", "Reflectance"]], "cuvis_ai.transformation.reflectance.Reflectance": [[85, 2, 1, "", "__init__"], [85, 2, 1, "", "check_input_dim"], [85, 2, 1, "", "check_output_dim"], [85, 2, 1, "", "fit"], [85, 2, 1, "", "forward"], [85, 3, 1, "", "input_dim"], [85, 2, 1, "", "load"], [85, 3, 1, "", "output_dim"], [85, 2, 1, "", "serialize"]], "cuvis_ai.transformation.torch_transformation": [[87, 1, 1, "", "TorchTransformation"]], "cuvis_ai.transformation.torch_transformation.TorchTransformation": [[87, 2, 1, "", "__init__"], [87, 2, 1, "", "check_input_dim"], [87, 2, 1, "", "check_output_dim"], [87, 2, 1, "", "fit"], [87, 2, 1, "", "forward"], [87, 3, 1, "", "input_dim"], [87, 2, 1, "", "load"], [87, 3, 1, "", "output_dim"], [87, 2, 1, "", "serialize"]], "cuvis_ai.transformation.torchvision_transformation": [[89, 1, 1, "", "TorchVisionTransformation"]], "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation": [[89, 2, 1, "", "__init__"], [89, 2, 1, "", "check_input_dim"], [89, 2, 1, "", "check_output_dim"], [89, 2, 1, "", "fit"], [89, 2, 1, "", "forward"], [89, 3, 1, "", "input_dim"], [89, 2, 1, "", "load"], [89, 3, 1, "", "output_dim"], [89, 2, 1, "", "serialize"]], "cuvis_ai.tv_transforms": [[91, 0, 0, "-", "Bandpass"], [95, 0, 0, "-", "MultiBandpass"], [99, 0, 0, "-", "NormalizeStdDev"], [103, 0, 0, "-", "NormalizeToFloat"], [107, 0, 0, "-", "WavelengthList"]], "cuvis_ai.tv_transforms.Bandpass": [[92, 5, 1, "", "call_super_init"], [93, 5, 1, "", "dump_patches"], [94, 5, 1, "", "training"]], "cuvis_ai.tv_transforms.MultiBandpass": [[96, 5, 1, "", "call_super_init"], [97, 5, 1, "", "dump_patches"], [98, 5, 1, "", "training"]], "cuvis_ai.tv_transforms.NormalizeStdDev": [[100, 5, 1, "", "call_super_init"], [101, 5, 1, "", "dump_patches"], [102, 5, 1, "", "training"]], "cuvis_ai.tv_transforms.NormalizeToFloat": [[104, 5, 1, "", "call_super_init"], [105, 5, 1, "", "dump_patches"], [106, 5, 1, "", "training"]], "cuvis_ai.unsupervised": [[109, 0, 0, "-", "sklearn_wrapped"]], "cuvis_ai.unsupervised.sklearn_wrapped": [[110, 1, 1, "", "GMM"], [111, 1, 1, "", "KMeans"], [112, 1, 1, "", "MeanShift"]], "cuvis_ai.unsupervised.sklearn_wrapped.GMM": [[110, 2, 1, "", "__init__"], [110, 2, 1, "", "aic"], [110, 2, 1, "", "bic"], [110, 2, 1, "", "check_input_dim"], [110, 2, 1, "", "check_output_dim"], [110, 2, 1, "", "fit"], [110, 2, 1, "", "fit_predict"], [110, 2, 1, "", "forward"], [110, 2, 1, "", "get_metadata_routing"], [110, 2, 1, "", "get_params"], [110, 3, 1, "", "input_dim"], [110, 2, 1, "", "load"], [110, 3, 1, "", "output_dim"], [110, 2, 1, "", "predict"], [110, 2, 1, "", "predict_proba"], [110, 2, 1, "", "sample"], [110, 2, 1, "", "score"], [110, 2, 1, "", "score_samples"], [110, 2, 1, "", "serialize"], [110, 2, 1, "", "set_params"]], "cuvis_ai.unsupervised.sklearn_wrapped.KMeans": [[111, 2, 1, "", "__init__"], [111, 2, 1, "", "check_input_dim"], [111, 2, 1, "", "check_output_dim"], [111, 2, 1, "", "fit"], [111, 2, 1, "", "fit_predict"], [111, 2, 1, "", "fit_transform"], [111, 2, 1, "", "forward"], [111, 2, 1, "", "get_feature_names_out"], [111, 2, 1, "", "get_metadata_routing"], [111, 2, 1, "", "get_params"], [111, 3, 1, "", "input_dim"], [111, 2, 1, "", "load"], [111, 3, 1, "", "output_dim"], [111, 2, 1, "", "predict"], [111, 2, 1, "", "score"], [111, 2, 1, "", "serialize"], [111, 2, 1, "", "set_fit_request"], [111, 2, 1, "", "set_output"], [111, 2, 1, "", "set_params"], [111, 2, 1, "", "set_score_request"], [111, 2, 1, "", "transform"]], "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift": [[112, 2, 1, "", "__init__"], [112, 2, 1, "", "check_input_dim"], [112, 2, 1, "", "check_output_dim"], [112, 2, 1, "", "fit"], [112, 2, 1, "", "fit_predict"], [112, 2, 1, "", "forward"], [112, 2, 1, "", "get_metadata_routing"], [112, 2, 1, "", "get_params"], [112, 3, 1, "", "input_dim"], [112, 2, 1, "", "load"], [112, 3, 1, "", "output_dim"], [112, 2, 1, "", "predict"], [112, 2, 1, "", "serialize"], [112, 2, 1, "", "set_params"]], "cuvis_ai.utils": [[114, 0, 0, "-", "dependencies"], [117, 0, 0, "-", "filesystem"], [119, 0, 0, "-", "nn_config"], [123, 0, 0, "-", "numpy"], [136, 0, 0, "-", "serializer"], [151, 0, 0, "-", "test"], [153, 0, 0, "-", "torch"], [157, 0, 0, "-", "visualize"]], "cuvis_ai.utils.dependencies": [[115, 4, 1, "", "get_installed_packages"], [116, 4, 1, "", "get_installed_packages_str"]], "cuvis_ai.utils.filesystem": [[118, 4, 1, "", "change_working_dir"]], "cuvis_ai.utils.nn_config": [[120, 1, 1, "", "Adam"], [121, 1, 1, "", "Optimizer"], [122, 1, 1, "", "SGD"]], "cuvis_ai.utils.nn_config.Adam": [[120, 2, 1, "", "__init__"], [120, 5, 1, "", "alpha"], [120, 3, 1, "", "args"], [120, 5, 1, "", "beta_1"], [120, 5, 1, "", "beta_2"], [120, 5, 1, "", "epsilon"], [120, 5, 1, "", "lr"], [120, 3, 1, "", "name"], [120, 3, 1, "", "pytorch_args"], [120, 3, 1, "", "sklearn_args"]], "cuvis_ai.utils.nn_config.Optimizer": [[121, 2, 1, "", "__init__"], [121, 3, 1, "", "args"], [121, 3, 1, "", "name"], [121, 3, 1, "", "pytorch_args"], [121, 3, 1, "", "sklearn_args"]], "cuvis_ai.utils.nn_config.SGD": [[122, 2, 1, "", "__init__"], [122, 5, 1, "", "alpha"], [122, 3, 1, "", "args"], [122, 5, 1, "", "lr"], [122, 5, 1, "", "momentum"], [122, 3, 1, "", "name"], [122, 5, 1, "", "nesterov"], [122, 5, 1, "", "power_t"], [122, 3, 1, "", "pytorch_args"], [122, 3, 1, "", "sklearn_args"]], "cuvis_ai.utils.numpy": [[124, 4, 1, "", "binary_mask_to_rle"], [125, 4, 1, "", "check_array_shape"], [126, 4, 1, "", "flatten_batch_and_labels"], [127, 4, 1, "", "flatten_batch_and_spatial"], [128, 4, 1, "", "flatten_labels"], [129, 4, 1, "", "flatten_spatial"], [130, 4, 1, "", "gen_coco_labels"], [131, 4, 1, "", "get_shape_without_batch"], [132, 4, 1, "", "unflatten_batch_and_labels"], [133, 4, 1, "", "unflatten_batch_and_spatial"], [134, 4, 1, "", "unflatten_labels"], [135, 4, 1, "", "unflatten_spatial"]], "cuvis_ai.utils.serializer": [[137, 1, 1, "", "CuvisYamlDumper"], [138, 1, 1, "", "CuvisYamlLoader"], [139, 1, 1, "", "OldSerializer"], [140, 1, 1, "", "Serializer"], [141, 1, 1, "", "YamlSerializer"], [142, 4, 1, "", "numpy_array_binary_representer"], [143, 4, 1, "", "numpy_array_file_representer"], [144, 4, 1, "", "numpy_array_string_representer"], [145, 4, 1, "", "numpy_arrray_file_constructor"], [146, 4, 1, "", "numpy_arrray_string_constructor"], [147, 4, 1, "", "numpy_float32_constructor"], [148, 4, 1, "", "numpy_float32_representer"], [149, 4, 1, "", "numpy_float64_constructor"], [150, 4, 1, "", "numpy_float64_representer"]], "cuvis_ai.utils.serializer.CuvisYamlDumper": [[137, 5, 1, "", "ANCHOR_TEMPLATE"], [137, 5, 1, "", "DEFAULT_MAPPING_TAG"], [137, 5, 1, "", "DEFAULT_SCALAR_TAG"], [137, 5, 1, "", "DEFAULT_SEQUENCE_TAG"], [137, 5, 1, "", "DEFAULT_TAG_PREFIXES"], [137, 5, 1, "", "ESCAPE_REPLACEMENTS"], [137, 2, 1, "", "__init__"], [137, 2, 1, "", "add_implicit_resolver"], [137, 2, 1, "", "add_multi_representer"], [137, 2, 1, "", "add_path_resolver"], [137, 2, 1, "", "add_representer"], [137, 2, 1, "", "analyze_scalar"], [137, 2, 1, "", "anchor_node"], [137, 2, 1, "", "ascend_resolver"], [137, 2, 1, "", "check_empty_document"], [137, 2, 1, "", "check_empty_mapping"], [137, 2, 1, "", "check_empty_sequence"], [137, 2, 1, "", "check_resolver_prefix"], [137, 2, 1, "", "check_simple_key"], [137, 2, 1, "", "choose_scalar_style"], [137, 2, 1, "", "close"], [137, 2, 1, "", "descend_resolver"], [137, 2, 1, "", "determine_block_hints"], [137, 2, 1, "", "dispose"], [137, 2, 1, "", "emit"], [137, 2, 1, "", "expect_alias"], [137, 2, 1, "", "expect_block_mapping"], [137, 2, 1, "", "expect_block_mapping_key"], [137, 2, 1, "", "expect_block_mapping_simple_value"], [137, 2, 1, "", "expect_block_mapping_value"], [137, 2, 1, "", "expect_block_sequence"], [137, 2, 1, "", "expect_block_sequence_item"], [137, 2, 1, "", "expect_document_end"], [137, 2, 1, "", "expect_document_root"], [137, 2, 1, "", "expect_document_start"], [137, 2, 1, "", "expect_first_block_mapping_key"], [137, 2, 1, "", "expect_first_block_sequence_item"], [137, 2, 1, "", "expect_first_document_start"], [137, 2, 1, "", "expect_first_flow_mapping_key"], [137, 2, 1, "", "expect_first_flow_sequence_item"], [137, 2, 1, "", "expect_flow_mapping"], [137, 2, 1, "", "expect_flow_mapping_key"], [137, 2, 1, "", "expect_flow_mapping_simple_value"], [137, 2, 1, "", "expect_flow_mapping_value"], [137, 2, 1, "", "expect_flow_sequence"], [137, 2, 1, "", "expect_flow_sequence_item"], [137, 2, 1, "", "expect_node"], [137, 2, 1, "", "expect_nothing"], [137, 2, 1, "", "expect_scalar"], [137, 2, 1, "", "expect_stream_start"], [137, 2, 1, "", "flush_stream"], [137, 2, 1, "", "generate_anchor"], [137, 2, 1, "", "ignore_aliases"], [137, 2, 1, "", "increase_indent"], [137, 5, 1, "", "inf_value"], [137, 2, 1, "", "need_events"], [137, 2, 1, "", "need_more_events"], [137, 2, 1, "", "open"], [137, 2, 1, "", "prepare_anchor"], [137, 2, 1, "", "prepare_tag"], [137, 2, 1, "", "prepare_tag_handle"], [137, 2, 1, "", "prepare_tag_prefix"], [137, 2, 1, "", "prepare_version"], [137, 2, 1, "", "process_anchor"], [137, 2, 1, "", "process_scalar"], [137, 2, 1, "", "process_tag"], [137, 2, 1, "", "represent"], [137, 2, 1, "", "represent_binary"], [137, 2, 1, "", "represent_bool"], [137, 2, 1, "", "represent_data"], [137, 2, 1, "", "represent_date"], [137, 2, 1, "", "represent_datetime"], [137, 2, 1, "", "represent_dict"], [137, 2, 1, "", "represent_float"], [137, 2, 1, "", "represent_int"], [137, 2, 1, "", "represent_list"], [137, 2, 1, "", "represent_mapping"], [137, 2, 1, "", "represent_none"], [137, 2, 1, "", "represent_scalar"], [137, 2, 1, "", "represent_sequence"], [137, 2, 1, "", "represent_set"], [137, 2, 1, "", "represent_str"], [137, 2, 1, "", "represent_undefined"], [137, 2, 1, "", "represent_yaml_object"], [137, 2, 1, "", "resolve"], [137, 2, 1, "", "serialize"], [137, 2, 1, "", "serialize_node"], [137, 2, 1, "", "write_double_quoted"], [137, 2, 1, "", "write_folded"], [137, 2, 1, "", "write_indent"], [137, 2, 1, "", "write_indicator"], [137, 2, 1, "", "write_line_break"], [137, 2, 1, "", "write_literal"], [137, 2, 1, "", "write_plain"], [137, 2, 1, "", "write_single_quoted"], [137, 2, 1, "", "write_stream_end"], [137, 2, 1, "", "write_stream_start"], [137, 2, 1, "", "write_tag_directive"], [137, 2, 1, "", "write_version_directive"], [137, 5, 1, "", "yaml_implicit_resolvers"], [137, 5, 1, "", "yaml_multi_representers"], [137, 5, 1, "", "yaml_path_resolvers"], [137, 5, 1, "", "yaml_representers"]], "cuvis_ai.utils.serializer.CuvisYamlLoader": [[138, 5, 1, "", "DEFAULT_MAPPING_TAG"], [138, 5, 1, "", "DEFAULT_SCALAR_TAG"], [138, 5, 1, "", "DEFAULT_SEQUENCE_TAG"], [138, 5, 1, "", "DEFAULT_TAGS"], [138, 5, 1, "", "ESCAPE_CODES"], [138, 5, 1, "", "ESCAPE_REPLACEMENTS"], [138, 5, 1, "", "NON_PRINTABLE"], [138, 2, 1, "", "__init__"], [138, 2, 1, "", "add_constructor"], [138, 2, 1, "", "add_implicit_resolver"], [138, 2, 1, "", "add_indent"], [138, 2, 1, "", "add_multi_constructor"], [138, 2, 1, "", "add_path_resolver"], [138, 2, 1, "", "ascend_resolver"], [138, 5, 1, "", "bool_values"], [138, 2, 1, "", "check_block_entry"], [138, 2, 1, "", "check_data"], [138, 2, 1, "", "check_directive"], [138, 2, 1, "", "check_document_end"], [138, 2, 1, "", "check_document_start"], [138, 2, 1, "", "check_event"], [138, 2, 1, "", "check_key"], [138, 2, 1, "", "check_node"], [138, 2, 1, "", "check_plain"], [138, 2, 1, "", "check_printable"], [138, 2, 1, "", "check_resolver_prefix"], [138, 2, 1, "", "check_state_key"], [138, 2, 1, "", "check_token"], [138, 2, 1, "", "check_value"], [138, 2, 1, "", "compose_document"], [138, 2, 1, "", "compose_mapping_node"], [138, 2, 1, "", "compose_node"], [138, 2, 1, "", "compose_scalar_node"], [138, 2, 1, "", "compose_sequence_node"], [138, 2, 1, "", "construct_document"], [138, 2, 1, "", "construct_mapping"], [138, 2, 1, "", "construct_object"], [138, 2, 1, "", "construct_pairs"], [138, 2, 1, "", "construct_scalar"], [138, 2, 1, "", "construct_sequence"], [138, 2, 1, "", "construct_undefined"], [138, 2, 1, "", "construct_yaml_binary"], [138, 2, 1, "", "construct_yaml_bool"], [138, 2, 1, "", "construct_yaml_float"], [138, 2, 1, "", "construct_yaml_int"], [138, 2, 1, "", "construct_yaml_map"], [138, 2, 1, "", "construct_yaml_null"], [138, 2, 1, "", "construct_yaml_object"], [138, 2, 1, "", "construct_yaml_omap"], [138, 2, 1, "", "construct_yaml_pairs"], [138, 2, 1, "", "construct_yaml_seq"], [138, 2, 1, "", "construct_yaml_set"], [138, 2, 1, "", "construct_yaml_str"], [138, 2, 1, "", "construct_yaml_timestamp"], [138, 2, 1, "", "descend_resolver"], [138, 2, 1, "", "determine_encoding"], [138, 2, 1, "", "dispose"], [138, 2, 1, "", "fetch_alias"], [138, 2, 1, "", "fetch_anchor"], [138, 2, 1, "", "fetch_block_entry"], [138, 2, 1, "", "fetch_block_scalar"], [138, 2, 1, "", "fetch_directive"], [138, 2, 1, "", "fetch_document_end"], [138, 2, 1, "", "fetch_document_indicator"], [138, 2, 1, "", "fetch_document_start"], [138, 2, 1, "", "fetch_double"], [138, 2, 1, "", "fetch_flow_collection_end"], [138, 2, 1, "", "fetch_flow_collection_start"], [138, 2, 1, "", "fetch_flow_entry"], [138, 2, 1, "", "fetch_flow_mapping_end"], [138, 2, 1, "", "fetch_flow_mapping_start"], [138, 2, 1, "", "fetch_flow_scalar"], [138, 2, 1, "", "fetch_flow_sequence_end"], [138, 2, 1, "", "fetch_flow_sequence_start"], [138, 2, 1, "", "fetch_folded"], [138, 2, 1, "", "fetch_key"], [138, 2, 1, "", "fetch_literal"], [138, 2, 1, "", "fetch_more_tokens"], [138, 2, 1, "", "fetch_plain"], [138, 2, 1, "", "fetch_single"], [138, 2, 1, "", "fetch_stream_end"], [138, 2, 1, "", "fetch_stream_start"], [138, 2, 1, "", "fetch_tag"], [138, 2, 1, "", "fetch_value"], [138, 2, 1, "", "flatten_mapping"], [138, 2, 1, "", "forward"], [138, 2, 1, "", "get_data"], [138, 2, 1, "", "get_event"], [138, 2, 1, "", "get_mark"], [138, 2, 1, "", "get_node"], [138, 2, 1, "", "get_single_data"], [138, 2, 1, "", "get_single_node"], [138, 2, 1, "", "get_token"], [138, 5, 1, "", "inf_value"], [138, 5, 1, "", "nan_value"], [138, 2, 1, "", "need_more_tokens"], [138, 2, 1, "", "next_possible_simple_key"], [138, 2, 1, "", "parse_block_mapping_first_key"], [138, 2, 1, "", "parse_block_mapping_key"], [138, 2, 1, "", "parse_block_mapping_value"], [138, 2, 1, "", "parse_block_node"], [138, 2, 1, "", "parse_block_node_or_indentless_sequence"], [138, 2, 1, "", "parse_block_sequence_entry"], [138, 2, 1, "", "parse_block_sequence_first_entry"], [138, 2, 1, "", "parse_document_content"], [138, 2, 1, "", "parse_document_end"], [138, 2, 1, "", "parse_document_start"], [138, 2, 1, "", "parse_flow_mapping_empty_value"], [138, 2, 1, "", "parse_flow_mapping_first_key"], [138, 2, 1, "", "parse_flow_mapping_key"], [138, 2, 1, "", "parse_flow_mapping_value"], [138, 2, 1, "", "parse_flow_node"], [138, 2, 1, "", "parse_flow_sequence_entry"], [138, 2, 1, "", "parse_flow_sequence_entry_mapping_end"], [138, 2, 1, "", "parse_flow_sequence_entry_mapping_key"], [138, 2, 1, "", "parse_flow_sequence_entry_mapping_value"], [138, 2, 1, "", "parse_flow_sequence_first_entry"], [138, 2, 1, "", "parse_implicit_document_start"], [138, 2, 1, "", "parse_indentless_sequence_entry"], [138, 2, 1, "", "parse_node"], [138, 2, 1, "", "parse_stream_start"], [138, 2, 1, "", "peek"], [138, 2, 1, "", "peek_event"], [138, 2, 1, "", "peek_token"], [138, 2, 1, "", "prefix"], [138, 2, 1, "", "process_directives"], [138, 2, 1, "", "process_empty_scalar"], [138, 2, 1, "", "remove_possible_simple_key"], [138, 2, 1, "", "resolve"], [138, 2, 1, "", "save_possible_simple_key"], [138, 2, 1, "", "scan_anchor"], [138, 2, 1, "", "scan_block_scalar"], [138, 2, 1, "", "scan_block_scalar_breaks"], [138, 2, 1, "", "scan_block_scalar_ignored_line"], [138, 2, 1, "", "scan_block_scalar_indentation"], [138, 2, 1, "", "scan_block_scalar_indicators"], [138, 2, 1, "", "scan_directive"], [138, 2, 1, "", "scan_directive_ignored_line"], [138, 2, 1, "", "scan_directive_name"], [138, 2, 1, "", "scan_flow_scalar"], [138, 2, 1, "", "scan_flow_scalar_breaks"], [138, 2, 1, "", "scan_flow_scalar_non_spaces"], [138, 2, 1, "", "scan_flow_scalar_spaces"], [138, 2, 1, "", "scan_line_break"], [138, 2, 1, "", "scan_plain"], [138, 2, 1, "", "scan_plain_spaces"], [138, 2, 1, "", "scan_tag"], [138, 2, 1, "", "scan_tag_directive_handle"], [138, 2, 1, "", "scan_tag_directive_prefix"], [138, 2, 1, "", "scan_tag_directive_value"], [138, 2, 1, "", "scan_tag_handle"], [138, 2, 1, "", "scan_tag_uri"], [138, 2, 1, "", "scan_to_next_token"], [138, 2, 1, "", "scan_uri_escapes"], [138, 2, 1, "", "scan_yaml_directive_number"], [138, 2, 1, "", "scan_yaml_directive_value"], [138, 2, 1, "", "stale_possible_simple_keys"], [138, 5, 1, "", "timestamp_regexp"], [138, 2, 1, "", "unwind_indent"], [138, 2, 1, "", "update"], [138, 2, 1, "", "update_raw"], [138, 5, 1, "", "yaml_constructors"], [138, 5, 1, "", "yaml_implicit_resolvers"], [138, 5, 1, "", "yaml_multi_constructors"], [138, 5, 1, "", "yaml_path_resolvers"]], "cuvis_ai.utils.serializer.OldSerializer": [[139, 2, 1, "", "__init__"], [139, 2, 1, "", "load_node"], [139, 2, 1, "", "serialize_node"]], "cuvis_ai.utils.serializer.Serializer": [[140, 2, 1, "", "__init__"], [140, 2, 1, "", "load"], [140, 2, 1, "", "serialize"]], "cuvis_ai.utils.serializer.YamlSerializer": [[141, 2, 1, "", "__init__"], [141, 2, 1, "", "load"], [141, 2, 1, "", "serialize"]], "cuvis_ai.utils.test": [[152, 4, 1, "", "get_np_dummy_data"]], "cuvis_ai.utils.torch": [[154, 1, 1, "", "InputDimension"], [155, 4, 1, "", "get_output_shape"], [156, 4, 1, "", "guess_input_dimensionalty"]], "cuvis_ai.utils.torch.InputDimension": [[154, 5, 1, "", "One"], [154, 5, 1, "", "Three"], [154, 5, 1, "", "Two"], [154, 5, 1, "", "Unknown"], [154, 2, 1, "", "__init__"]], "cuvis_ai.utils.visualize": [[158, 4, 1, "", "visualize_features"], [159, 4, 1, "", "visualize_image"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "terms": {"": [47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 112], "0": [5, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 110, 111, 120, 122, 137, 138], "0001": [50, 54, 55, 56, 111, 120, 122], "001": [55, 57, 110, 120, 122], "03d": 137, "06": 110, "08": [55, 120], "0b": [137, 138], "0x": [137, 138], "1": [3, 5, 7, 9, 13, 37, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 137, 138, 154], "10": [51, 55, 59, 110], "100": [55, 110], "12": 51, "147": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "15000": 55, "18": 50, "19": [54, 56], "1998": 20, "1_": [137, 138], "1d": 156, "1e": [55, 110, 120], "2": [16, 23, 51, 57, 85, 137, 138, 154], "20": [85, 110, 111], "200": [50, 55, 57], "2002": [137, 138], "2d": 156, "3": [50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111, 137, 138, 154], "300": [111, 112], "37": 20, "3d": 156, "4": [50, 51, 54, 111, 112, 137, 138], "4096": 138, "5": [50, 55, 85, 122, 137, 138], "50": 85, "574": 51, "6": [20, 137, 138], "640": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "7": [50, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137, 138], "76990451": 124, "7_": [137, 138], "8": [111, 137, 138], "9": [55, 120, 122, 137, 138], "971": 20, "977": 20, "999": [55, 120], "9_": [137, 138], "9a": [137, 138], "A": [20, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 110, 111, 112], "At": [47, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 161], "For": [50, 51, 54, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 89, 111, 161, 163], "If": [3, 5, 7, 9, 13, 16, 37, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 160], "In": [51, 54, 55, 56, 57, 111, 161], "It": 111, "NO": [137, 138], "No": [16, 17, 18, 19, 20, 21, 22, 23, 137, 138], "Not": [50, 110, 111, 112], "ON": [137, 138], "On": [137, 138], "One": 154, "The": [3, 5, 9, 13, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 160], "There": 16, "To": [47, 51, 162], "_": [137, 138], "__": [50, 51, 54, 55, 56, 57, 110, 111, 112], "__init__": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 45, 47, 50, 51, 54, 55, 56, 57, 59, 62, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 85, 87, 89, 110, 111, 112, 120, 121, 122, 137, 138, 139, 140, 141, 154], "_summary_": 34, "abc": [3, 32, 34, 35, 37, 121, 140], "about": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "abstract": [3, 16, 32, 33, 34, 35, 37, 121, 140], "abstractdist": [17, 18, 19, 20, 21, 22, 23], "accomplish": 3, "accord": [23, 50, 56, 57, 89], "accuraci": [54, 55, 56, 57], "across": 55, "activ": 55, "ad": [50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 89, 110, 111, 112], "adam": 55, "add": [47, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "add_base_nod": 47, "add_constructor": 138, "add_edg": 47, "add_implicit_resolv": [137, 138], "add_ind": 138, "add_multi_constructor": 138, "add_multi_represent": 137, "add_nod": 47, "add_path_resolv": [137, 138], "add_represent": 137, "addclasscleanup": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "addcleanup": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "addit": [54, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87], "addtypeequalityfunc": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "after": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 161], "against": [16, 17, 18, 19, 20, 21, 22, 23], "ai": [47, 161, 163], "aic": 110, "akaik": 110, "algorithm": [16, 110, 111, 160], "alia": [54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111], "all": [9, 34, 45, 47, 51, 55, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111, 161], "all_agre": 9, "allow": [16, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 111, 160, 161], "allow_unicod": 137, "almost": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87], "along": [85, 87], "alongsid": 87, "alpha": [55, 120, 122], "alpha_h": 50, "alpha_w": 50, "alreadi": [47, 130, 160], "also": [9, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 89], "an": [3, 16, 18, 37, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 112, 154], "analysi": 54, "analyze_scalar": 137, "anchor": [137, 138], "anchor_nod": 137, "anchor_templ": 137, "andr\u00e9": 20, "angl": 23, "ani": [3, 5, 7, 34, 85, 87, 89], "anoth": 161, "anytim": 87, "api": [50, 51, 54, 110, 111, 112], "appear": 57, "append": 130, "appli": [5, 9, 13, 20, 51, 54, 56, 85, 87, 89, 130], "applic": 160, "ar": [5, 9, 16, 45, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 112, 160, 161], "archiv": 47, "arg": [9, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87, 120, 121, 122], "argument": [50, 55, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87, 112], "arrai": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 35, 37, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135], "ascend_resolv": [137, 138], "ascontiguousarrai": 51, "assert": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assert_": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertalmostequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertcountequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertdictcontainssubset": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertdictequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertfals": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertgreat": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertgreaterequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "asserti": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertin": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertionerror": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertisinst": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertisnon": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertisnot": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertisnotnon": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertless": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertlessequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertlistequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertlog": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertmultilineequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertnolog": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertnotalmostequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertnotequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertnotin": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertnotisinst": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertnotregex": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertnotregexpmatch": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertrais": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertraisesregex": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertraisesregexp": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertregex": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertregexpmatch": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertsequenceequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertsetequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "asserttru": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "asserttupleequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertwarn": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assertwarnsregex": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "assign": [57, 111], "assum": 47, "at_least_n_agre": 9, "attribut": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 50, 51, 54, 55, 56, 57, 59, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 91, 95, 99, 103, 107, 110, 111, 112, 120, 121, 122, 137, 138, 154], "auto": [51, 55, 111], "automat": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "avail": 87, "averag": [51, 110], "b": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137, 138], "back": [50, 51], "background": 130, "bandwidth": 112, "bar": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "base": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 37, 45, 47, 50, 51, 54, 55, 56, 57, 59, 62, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 85, 87, 89, 110, 111, 112, 120, 121, 122, 137, 138, 139, 140, 141, 154], "basedecid": [5, 7, 9, 13], "basesupervis": [54, 55, 56, 57, 59], "basetransform": [85, 87, 89], "baseunsupervis": [110, 111, 112], "basi": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "basic": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87], "batch_siz": 55, "bayesian": 110, "been": [54, 56, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "befor": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "behavior": 16, "being": [47, 138], "belong": [47, 111, 112], "beltr\u00e1n": 20, "bene": 23, "beta_1": [55, 120], "beta_2": [55, 120], "beta_loss": 50, "better": 110, "between": [23, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 110], "bic": 110, "bin_seed": 112, "binari": [5, 54, 56, 124, 138], "binary_mask": 124, "bishop": 51, "block": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 138], "book": 111, "bool": [3, 5, 7, 9, 10, 11, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 50, 51, 54, 55, 56, 57, 59, 85, 87, 89, 92, 93, 94, 96, 97, 98, 100, 101, 102, 104, 105, 106, 110, 111, 112, 122, 130, 137, 138], "bool_valu": 138, "boolean": 9, "both": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 161], "bound": 110, "break": 16, "break_ti": 57, "bright": 85, "brighter": 85, "byte": 137, "c": [51, 54, 56, 57, 111], "cache_s": 57, "calcul": [17, 19, 21, 23], "calculu": 85, "call": [16, 17, 18, 19, 20, 21, 22, 23, 50, 55, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87, 110, 111, 138], "callabl": [9, 11, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 89, 111], "can": [16, 18, 55, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 130, 161], "canon": 137, "case": [54, 56, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "caught": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "caus": 111, "cd": 50, "center": 111, "chang": [54, 55, 56, 57, 110, 111], "channel": [9, 13, 18], "channel_count": 9, "check": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112], "check_block_entri": 138, "check_data": 138, "check_direct": 138, "check_document_end": 138, "check_document_start": 138, "check_empty_docu": 137, "check_empty_map": 137, "check_empty_sequ": 137, "check_ev": 138, "check_input_dim": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112], "check_kei": 138, "check_nod": 138, "check_output_dim": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112], "check_plain": 138, "check_print": 138, "check_resolver_prefix": [137, 138], "check_simple_kei": 137, "check_state_kei": 138, "check_token": 138, "check_valu": 138, "child": [34, 47], "children": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "choic": 138, "choos": 13, "choose_scalar_styl": 137, "chosen": [9, 13], "citat": 20, "cl": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137, 138], "clamp": 85, "clarifi": 130, "class": [2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 109, 110, 111, 112, 119, 120, 121, 122, 136, 137, 138, 139, 140, 141, 153, 154, 160, 161], "class_name0": [50, 51, 54, 111], "class_name1": [50, 51, 54, 111], "class_name2": [50, 51, 54, 111], "class_weight": 57, "classes_": [55, 57], "classif": [5, 13, 54, 55, 56, 57], "classifi": [5, 9, 13, 34, 54, 55, 56, 57], "classmethod": [47, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137, 138], "cleanup": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "close": 137, "closest": [111, 112], "cluster": [111, 112], "cluster_al": 112, "cluster_centers_": 111, "cm": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "coco": 130, "code": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111], "coef0": 57, "coef_": 57, "coeffici": 20, "collect": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "column": [57, 138], "com": [51, 124], "compar": [16, 17, 18, 19, 20, 21, 22, 23, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "compat": 89, "compil": [137, 138], "complet": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "compon": [50, 51, 54, 55, 56, 57, 110, 111, 112], "components_": 51, "compose_docu": 138, "compose_mapping_nod": 138, "compose_nod": 138, "compose_scalar_nod": 138, "compose_sequence_nod": 138, "composit": 89, "compris": 13, "comput": [51, 57, 85, 110, 111], "concept": 160, "configur": [50, 51, 54, 111], "connect": 47, "consecut": 110, "consid": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "consist": [18, 50, 110, 111, 112], "constant": [54, 55, 56, 87], "construct": [17, 19, 20, 21, 22, 23], "construct_docu": 138, "construct_map": 138, "construct_object": 138, "construct_pair": 138, "construct_scalar": 138, "construct_sequ": 138, "construct_undefin": 138, "construct_yaml_binari": 138, "construct_yaml_bool": 138, "construct_yaml_float": 138, "construct_yaml_int": 138, "construct_yaml_map": 138, "construct_yaml_nul": 138, "construct_yaml_object": 138, "construct_yaml_omap": 138, "construct_yaml_pair": 138, "construct_yaml_seq": 138, "construct_yaml_set": 138, "construct_yaml_str": 138, "construct_yaml_timestamp": 138, "constructor": [54, 56, 138], "contain": [16, 17, 18, 19, 20, 21, 22, 23, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 112, 130], "context": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "contigu": [57, 111], "control": 138, "conveni": 111, "convent": [50, 110, 111, 112], "convergencewarn": 110, "convert": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 47, 50, 51, 54, 55, 56, 57, 110, 111, 112, 124], "copi": [47, 51, 57, 111, 124], "copy_x": 111, "correctli": [54, 55, 56, 57, 130], "correspond": [54, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110], "cosin": 23, "count": 137, "counter": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "counttestcas": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "cov": 51, "covari": 51, "covariance_estim": 54, "covariance_typ": 110, "creat": [13, 47, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 138, 160], "criterion": 110, "cross": 57, "csr": 111, "csr_matrix": 57, "cube": 89, "cubeconsum": [3, 16, 32, 33, 34, 35], "cumul": 18, "current": [16, 47, 51, 110], "current_index": [137, 138], "current_nod": [137, 138], "custom": [9, 50], "cuvi": [47, 161, 163], "cuvis_ai": 162, "d1": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "d2": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "dai": 138, "dark": 85, "darker": 85, "data": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 37, 45, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 137, 138, 140, 141, 142, 143, 144, 148, 150, 156, 158, 161], "data_dir": [47, 50, 51, 54, 55, 56, 57, 110, 111, 112, 140, 141], "data_typ": 137, "datacub": [17, 18, 19, 20, 21, 22, 23], "datafram": [50, 51, 54, 111], "dataload": [45, 89], "datapoint": 5, "dataset": [55, 57], "datatyp": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "date": 137, "datetim": 137, "daylight": 20, "debug": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "decid": 16, "decim": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "decis": [3, 5, 9, 10, 54, 56, 57], "decision_funct": [54, 56, 57], "decision_function_shap": 57, "deconstruct": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "decor": 42, "deem": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "deep": [50, 51, 54, 55, 56, 57, 110, 111, 112, 138, 161], "default": [16, 17, 18, 19, 20, 21, 22, 23, 45, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 110, 111, 112, 130], "default_flow_styl": 137, "default_mapping_tag": [137, 138], "default_scalar_tag": [137, 138], "default_sequence_tag": [137, 138], "default_styl": 137, "default_tag": 138, "default_tag_prefix": 137, "defaulttestresult": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "defin": [16, 17, 18, 19, 20, 21, 22, 23, 34, 47], "definit": 161, "degre": [22, 57], "delet": 47, "delete_nod": 47, "delta": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "dens": [57, 111], "densiti": 110, "depend": [3, 37, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112], "deprec": 50, "depth": [137, 138], "descend_resolv": [137, 138], "descript": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "deseri": 138, "detail": [57, 110], "determin": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "determine_block_hint": 137, "determine_encod": 138, "dict": [5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 45, 47, 50, 51, 54, 55, 56, 57, 59, 85, 87, 89, 110, 111, 112, 137, 139, 140, 141], "dictionari": [16, 17, 18, 19, 20, 21, 22, 23, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "differ": [54, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 161], "digit": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "digraph": 45, "dimens": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112, 156], "dimension": [51, 110, 161], "dir_path": 118, "direct": 47, "directori": [5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 47], "discrimin": 54, "dispos": [137, 138], "distanc": [57, 111], "distribut": 110, "divid": 57, "do": [47, 161], "do_someth": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "doclasscleanup": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "docleanup": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "docstr": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "doe": [47, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 160], "doesn": 55, "doubl": 138, "dtype": 112, "ducktyp": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "dump": [16, 17, 18, 19, 20, 21, 22, 23], "dumper": [142, 143, 144, 148, 150], "dure": [111, 138], "e": [54, 55, 56, 57, 85, 110, 111, 137, 138, 161], "each": [9, 16, 17, 18, 19, 20, 21, 22, 23, 50, 51, 54, 55, 56, 57, 110, 111, 112], "early_stop": 55, "easi": [160, 161], "edg": 47, "ee": [137, 138], "effect": [54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111], "effici": [50, 51, 111], "element": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "em": 110, "emit": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137], "emphasi": 57, "empti": [158, 159], "enabl": 51, "enable_metadata_rout": [54, 55, 56, 57, 111], "encapsul": [50, 51, 54, 55, 56, 57, 110, 111, 112], "enclos": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "encod": 137, "end": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "enforc": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "entir": 55, "entri": 47, "entry_point": 45, "enum": [154, 156], "enumer": 154, "environ": 162, "epoch": 59, "epsilon": [55, 120], "equal": [5, 18, 51, 54, 56, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111], "equival": [55, 111], "error": [45, 47, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111], "error_cod": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "escape_cod": 138, "escape_replac": [137, 138], "estim": [50, 51, 54, 55, 56, 57, 110, 111, 112], "euclidean": 18, "evalu": [57, 110], "even": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111], "event": [47, 137], "everi": [16, 130], "everyth": 85, "exact": [51, 57], "exactli": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "exampl": [50, 51, 54, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111, 163], "except": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "execut": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 161], "exercis": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "exist": [47, 54, 55, 56, 57, 111, 130, 160], "expect": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 156], "expect_alia": 137, "expect_block_map": 137, "expect_block_mapping_kei": 137, "expect_block_mapping_simple_valu": 137, "expect_block_mapping_valu": 137, "expect_block_sequ": 137, "expect_block_sequence_item": 137, "expect_document_end": 137, "expect_document_root": 137, "expect_document_start": 137, "expect_first_block_mapping_kei": 137, "expect_first_block_sequence_item": 137, "expect_first_document_start": 137, "expect_first_flow_mapping_kei": 137, "expect_first_flow_sequence_item": 137, "expect_flow_map": 137, "expect_flow_mapping_kei": 137, "expect_flow_mapping_simple_valu": 137, "expect_flow_mapping_valu": 137, "expect_flow_sequ": 137, "expect_flow_sequence_item": 137, "expect_nod": 137, "expect_noth": 137, "expect_scalar": 137, "expect_stream_start": 137, "expected_except": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "expected_regex": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "expected_warn": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "explain": 51, "explicit_end": 137, "explicit_start": 137, "expr": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "expr1": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "expr2": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "express": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "extra": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "extract": 51, "ey": 51, "f": [137, 138], "f_": [137, 138], "fa": [137, 138], "factor": [54, 56], "factori": 59, "fail": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "failif": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "failifalmostequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "failifequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "failunless": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "failunlessalmostequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "failunlessequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "failunlessrais": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "failur": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "failureexcept": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "fals": [5, 13, 50, 51, 54, 55, 56, 57, 59, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 92, 93, 96, 97, 100, 101, 104, 105, 110, 111, 112, 130, 137, 138], "featur": [50, 51, 54, 56, 57, 111], "feature_names_out": [50, 51, 54, 111], "fetch_alia": 138, "fetch_anchor": 138, "fetch_block_entri": 138, "fetch_block_scalar": 138, "fetch_direct": 138, "fetch_document_end": 138, "fetch_document_ind": 138, "fetch_document_start": 138, "fetch_doubl": 138, "fetch_flow_collection_end": 138, "fetch_flow_collection_start": 138, "fetch_flow_entri": 138, "fetch_flow_mapping_end": 138, "fetch_flow_mapping_start": 138, "fetch_flow_scalar": 138, "fetch_flow_sequence_end": 138, "fetch_flow_sequence_start": 138, "fetch_fold": 138, "fetch_kei": 138, "fetch_liter": 138, "fetch_more_token": 138, "fetch_plain": 138, "fetch_singl": 138, "fetch_stream_end": 138, "fetch_stream_start": 138, "fetch_tag": 138, "fetch_valu": 138, "file": [47, 130, 138], "filenam": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 141], "filepath": [5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 47], "filter": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "final": 3, "first": [47, 51, 55, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87, 110, 137, 138, 156], "fit": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 45, 47, 50, 51, 54, 55, 56, 57, 59, 85, 87, 89, 110, 111, 112], "fit_param": 54, "fit_predict": [110, 111, 112], "fit_transform": [50, 51, 54, 111], "fixtur": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "flatten": 156, "flatten_map": 138, "float": [5, 51, 54, 55, 56, 57, 85, 110, 111, 120, 122, 137, 138], "float32": [137, 138], "float64": [57, 137, 138], "flow": [45, 47, 137], "flow_styl": 137, "flush_stream": 137, "follow": [34, 50, 111], "foo": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "forc": 57, "form": [50, 51, 54, 55, 56, 57, 110, 111, 112, 161], "format": [3, 16, 17, 18, 19, 20, 21, 22, 23, 37, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 112], "formul": [54, 56, 110], "formula": 23, "fortran": 51, "forward": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 37, 45, 47, 50, 51, 54, 55, 56, 57, 59, 85, 87, 89, 110, 111, 112, 138], "found": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "framework": [160, 161], "frobeniu": 50, "from": [3, 5, 7, 9, 13, 37, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 124, 130, 138, 160], "full": 110, "function": [8, 16, 17, 18, 19, 20, 21, 22, 23, 41, 45, 54, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87, 89, 114, 117, 123, 136, 137, 138, 151, 153, 157, 160], "function_nam": 87, "further": [57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "g": [54, 55, 56, 57, 85, 111, 161], "gamma": 57, "garc\u00eda": 20, "gaussian": 110, "gener": [34, 51, 85, 110, 130], "generate_anchor": 137, "get": [16, 17, 18, 19, 20, 21, 22, 23, 50, 51, 54, 55, 56, 57, 110, 111, 112, 160, 163], "get_covari": 51, "get_data": 138, "get_ev": 138, "get_feature_names_out": [50, 51, 54, 111], "get_mark": 138, "get_metadata_rout": [50, 51, 54, 55, 56, 57, 110, 111, 112], "get_nod": 138, "get_param": [50, 51, 54, 55, 56, 57, 110, 111, 112], "get_precis": 51, "get_single_data": 138, "get_single_nod": 138, "get_token": 138, "getlogg": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "give": [54, 56, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "given": [13, 18, 45, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111], "goal": 160, "good": 20, "graph": [5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 45, 85, 87, 89], "guess": [50, 156], "guid": [50, 51, 54, 55, 56, 57, 110, 111, 112], "h": 50, "ha": [54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 130], "handl": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137], "handle_text": 137, "harsh": [54, 55, 56, 57], "have": [47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 112], "hearth": 161, "height": 18, "here": [9, 111], "hern\u00e1ndez": 20, "hidden_layer_s": 55, "higher": [57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85], "highest": 13, "hook": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "hour": 138, "how": [50, 51, 54, 55, 56, 57, 110, 111, 112, 163], "hsi": 89, "http": [51, 124], "hyperplan": 57, "i": [3, 5, 7, 9, 13, 37, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 160, 161], "id": [47, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137], "identifi": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "ignor": [50, 51, 54, 55, 56, 57, 110, 111, 112, 131], "ignore_alias": 137, "imag": [16, 130], "img": 130, "img_nam": 130, "immedi": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "implement": [16, 34, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111], "implicit": [137, 138], "import": [3, 5, 7, 9, 13, 37, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112], "includ": [51, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 89], "increase_ind": 137, "indent": [137, 138], "indentless": 137, "indentless_sequ": 138, "index": [16, 17, 18, 19, 20, 21, 22, 23, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111, 112, 137, 138], "indic": [13, 137, 156], "inf": [137, 138], "inf_valu": [137, 138], "info": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "inform": [50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 112, 160], "init": [16, 17, 18, 19, 20, 21, 22, 23, 50, 111], "init_param": 110, "initi": [16, 17, 18, 19, 20, 21, 22, 23, 34, 50, 110, 111, 138], "initialis": 50, "inner_modul": 139, "input": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 35, 37, 45, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112, 156, 161], "input_dim": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 33, 37, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112], "input_featur": [50, 51, 54, 111], "input_shap": 155, "inputdimens": 156, "insid": [54, 55, 56, 57, 111], "inspect": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 156], "instal": 160, "instanc": [13, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 112], "instead": [50, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111, 160], "int": [3, 9, 11, 13, 22, 33, 37, 59, 85, 87, 89, 110, 125, 137, 138], "int64": 112, "integ": [56, 130], "interfac": 160, "intermediari": 45, "introduc": [50, 51, 54, 111], "introduct": 163, "invent": 160, "invers": 51, "inverse_transform": [50, 51], "invok": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "isinst": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "item": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "iter": [45, 55, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87, 110], "iterated_pow": 51, "its": [50, 51, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 130, 161], "itself": [47, 50, 51], "j": 20, "json": 130, "just": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 89], "k": [54, 56, 111], "keep": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "kei": 138, "kernel": 57, "keyword": [50, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87], "kind": [137, 138], "kmean": 110, "known": 16, "kwarg": [50, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87, 112], "l": [20, 137, 138], "l1": [17, 21], "l1_ratio": 50, "l2": 19, "label": [3, 7, 45, 54, 55, 56, 57, 87, 89, 110, 111, 112, 130, 158, 161], "label_nam": 130, "labelconsum": 32, "larg": 23, "larger": 5, "largest": [85, 110], "latter": [50, 51, 54, 55, 56, 57, 110, 111, 112], "layer": [55, 156], "lda": 56, "learn": [50, 51, 57, 161], "learning_r": 55, "learning_rate_init": 55, "least": 47, "left": 110, "lemma": 51, "length": [18, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 138], "less": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110], "level": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "lifo": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "like": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 35, 37, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 156, 160, 161], "likelihood": [51, 54, 56, 110], "line": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "line_break": 137, "linear": [20, 54, 57], "lineno": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "list": [16, 17, 18, 19, 20, 21, 22, 23, 45, 47, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 110, 115, 130, 137, 139, 161], "list1": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "list2": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "literatur": 111, "ll": 51, "lloyd": 111, "load": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 33, 37, 47, 50, 51, 54, 55, 56, 57, 59, 85, 87, 89, 110, 111, 112, 140, 141], "load_from_fil": 47, "load_nod": 139, "loader": [145, 146, 147, 149], "locat": [9, 13, 47], "log": [51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110], "log_likelihood": 110, "log_prob": 110, "log_y_prob": 55, "logger": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "logger_nam": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "logrecord": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "longmessag": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "look": [160, 163], "lower": [85, 110], "lower_bond": 85, "lower_bound": 85, "lowercas": [50, 51, 54, 111], "lr": [120, 122], "m": [45, 47, 110, 162], "machin": [51, 161], "made": 111, "mai": [9, 57], "main": [47, 54, 56, 141], "make": 3, "manag": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "map": [16, 17, 18, 19, 20, 21, 22, 23, 50, 51, 54, 55, 56, 57, 110, 111, 112, 137, 138], "mapper": 23, "mark": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 138], "mask": [124, 130], "match": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112], "mathemat": [54, 56, 110], "matric": 57, "matrix": [9, 13, 50, 51, 54, 55, 57, 111], "max_fun": 55, "max_it": [50, 55, 57, 110, 111, 112], "maxdiff": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "maxim": 54, "maximum": 13, "mean": [54, 55, 56, 57, 85, 111], "meaningless": 57, "means_init": 110, "measur": [16, 20, 23, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "mechan": [50, 51, 54, 55, 56, 57, 110, 111, 112], "member": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "memori": 111, "merg": [137, 138], "messag": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "met": 51, "meta": [54, 55, 56, 57, 85, 89, 111], "metadata": [16, 17, 18, 19, 20, 21, 22, 23, 45, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112], "metadata_rout": [54, 55, 56, 57, 111], "metadataconsum": 85, "metadataconsumerinfer": 85, "metadatarequest": [50, 51, 54, 55, 56, 57, 110, 111, 112], "method": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 45, 47, 50, 51, 54, 55, 56, 57, 59, 62, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 85, 87, 89, 110, 111, 112, 120, 121, 122, 137, 138, 139, 140, 141, 160], "methodnam": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "metric": [16, 54, 55, 56, 57], "might": [16, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "miketip": 51, "min": 54, "min_bin_freq": 112, "minim": 13, "mismatch": [16, 17, 18, 19, 20, 21, 22, 23, 47], "mixtur": 110, "model": [20, 47, 50, 51, 54, 55, 56, 57, 59, 110, 155, 156], "model_arg": 59, "modul": [0, 1, 14, 24, 42, 43, 48, 52, 59, 60, 83, 87, 90, 91, 95, 99, 103, 107, 108, 113, 156, 161], "moment": 130, "momentum": [55, 122], "monoton": 57, "month": 138, "more": [50, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111], "most": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110], "move": [54, 56], "mppca": 51, "msg": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "much": 160, "multi": [13, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "multi_constructor": 138, "multipl": [9, 16, 130], "must": [18, 34, 47, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111], "n": [11, 13, 22, 137, 138], "n_class": [54, 55, 56, 57], "n_cluster": 111, "n_compon": [50, 51, 54, 110], "n_dimens": 110, "n_featur": [50, 51, 54, 55, 56, 57, 110, 111, 112], "n_features_new": 54, "n_init": [110, 111], "n_iter_no_chang": 55, "n_job": 112, "n_output": [54, 55, 56, 57], "n_oversampl": 51, "n_sampl": [50, 51, 54, 55, 56, 57, 110, 111, 112], "n_samples_test": 57, "n_samples_train": 57, "n_support_": 57, "name": [47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87, 110, 111, 112, 120, 121, 122, 130, 138, 139], "nan": 138, "nan_valu": 138, "ndarrai": [5, 7, 9, 10, 11, 13, 16, 17, 18, 19, 20, 21, 22, 23, 45, 47, 50, 51, 54, 55, 56, 57, 59, 85, 87, 89, 110, 111, 112, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 158, 159], "need": [3, 5, 7, 9, 13, 37, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 161], "need_ev": 137, "need_more_ev": 137, "need_more_token": 138, "need_whitespac": 137, "nest": [50, 51, 54, 55, 56, 57, 110, 111, 112], "nesterov": 122, "nesterovs_momentum": 55, "new": [17, 18, 19, 20, 21, 22, 23, 34, 47, 51, 111, 112], "newli": 138, "next_possible_simple_kei": 138, "nicer": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "niev": 20, "nm": 18, "nn": 59, "nn_config": 59, "node": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 45, 47, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112, 137, 138, 139, 145, 146, 147, 149, 160], "node2": 47, "nois": 51, "non_print": 138, "none": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 45, 47, 50, 51, 54, 55, 56, 57, 59, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 120, 122, 130, 137, 138, 139, 140, 141, 158], "nonetyp": 137, "norm": [22, 57], "normal": [23, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "nota": 23, "note": [51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 89, 111], "notion": 16, "np": [5, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 45, 51, 55, 57, 85, 87, 89, 112], "nsampl": 110, "nu": 57, "null": [137, 138], "number": [9, 13, 18, 50, 51, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110], "numer": 47, "numpi": [5, 16, 17, 18, 19, 20, 21, 22, 23, 89, 137, 138], "numpy_array_file_represent": 137, "numpy_arrray_file_constructor": 138, "numpy_arrray_string_constructor": 138, "numpy_float32_constructor": 138, "numpy_float32_represent": 137, "numpy_float64_constructor": 138, "numpy_float64_represent": 137, "o": [137, 138], "obj": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "object": [3, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 37, 45, 47, 50, 51, 54, 55, 56, 57, 62, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 110, 111, 112, 130, 138, 139], "observ": 111, "obtain": [55, 57], "occlud": 130, "off": [110, 137, 138], "often": 161, "omap": 138, "omit": [55, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "one": [47, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 161], "onli": [50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 89, 111], "open": 137, "oper": [51, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "operand": 87, "operand_b": 87, "opposit": 111, "optic": 20, "optim": [59, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 120, 122], "option": [16, 17, 18, 19, 20, 21, 22, 23, 45, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 111], "order": [22, 51, 55, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111], "org": [137, 138], "orig_shap": [132, 133, 134, 135], "origin": [50, 51, 54, 55, 56, 57, 111], "other": [51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111, 160], "otherwis": [54, 55, 56, 57, 110, 111], "out": [50, 51, 54, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111], "outcom": 57, "output": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 45, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 130], "output_dim": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 33, 37, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112], "output_dir": 130, "over": 55, "overwritten": 47, "ovo": 57, "ovr": 57, "own": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 130, 160], "p": [51, 54, 56, 137, 138], "pair": 138, "panda": [50, 51, 54, 111], "paper": 51, "param": [5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 124, 130, 139], "paramet": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 37, 45, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112], "parameter": [16, 17, 18, 19, 20, 21, 22, 23], "params_list": 139, "parent": [47, 137, 138], "parse_block_mapping_first_kei": 138, "parse_block_mapping_kei": 138, "parse_block_mapping_valu": 138, "parse_block_nod": 138, "parse_block_node_or_indentless_sequ": 138, "parse_block_sequence_entri": 138, "parse_block_sequence_first_entri": 138, "parse_document_cont": 138, "parse_document_end": 138, "parse_document_start": 138, "parse_flow_mapping_empty_valu": 138, "parse_flow_mapping_first_kei": 138, "parse_flow_mapping_kei": 138, "parse_flow_mapping_valu": 138, "parse_flow_nod": 138, "parse_flow_sequence_entri": 138, "parse_flow_sequence_entry_mapping_end": 138, "parse_flow_sequence_entry_mapping_kei": 138, "parse_flow_sequence_entry_mapping_valu": 138, "parse_flow_sequence_first_entri": 138, "parse_implicit_document_start": 138, "parse_indentless_sequence_entri": 138, "parse_nod": 138, "parse_stream_start": 138, "part": 160, "partial_fit": 55, "pass": [16, 17, 18, 19, 20, 21, 22, 23, 34, 45, 50, 54, 55, 56, 57, 85, 87, 89, 111, 112], "path": [47, 50, 51, 54, 55, 56, 57, 110, 111, 112, 130, 137, 138, 140, 141], "pattern": [51, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "pca": 161, "pdf": 51, "peek": 138, "peek_ev": 138, "peek_token": 138, "per": [13, 54, 56, 57, 110], "percentag": 85, "perceptron": 55, "perform": [56, 57, 110, 112], "pickle_inn": 139, "pip": 160, "pipelin": [50, 51, 54, 55, 56, 57, 89, 110, 111, 112, 160], "pixel": 85, "place": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "platt": 57, "pleas": [50, 51, 54, 55, 56, 57, 110, 111, 112], "point": [9, 47, 57, 110], "polar": [50, 51, 54, 111], "posit": [3, 5, 7, 9, 13, 18, 37, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112], "possibl": [50, 51, 54, 55, 56, 57, 110, 111, 112, 160], "posterior": [54, 56], "power_iteration_norm": 51, "power_t": [55, 122], "precis": 51, "precisions_init": 110, "precomput": 57, "pred": 159, "predict": [3, 7, 54, 55, 56, 57, 110, 111, 112], "predict_log_proba": [54, 55, 56, 57], "predict_proba": [54, 55, 56, 57, 110], "prefix": [50, 51, 54, 111, 137, 138], "prefix_text": 137, "prepare_anchor": 137, "prepare_tag": 137, "prepare_tag_handl": 137, "prepare_tag_prefix": 137, "prepare_vers": 137, "preprocess": [16, 35, 37], "preprocessor": 160, "present": [50, 89, 110, 111, 112], "prevent": [47, 138], "previous": 51, "princip": 51, "print": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "prior": [54, 56], "proba_": 57, "probabl": [54, 55, 56, 57, 110], "probb_": 57, "process": [45, 47, 161], "process_anchor": 137, "process_direct": 138, "process_empty_scalar": 138, "process_scalar": 137, "process_tag": 137, "produc": 57, "project": [51, 54], "proper": 89, "properti": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112, 120, 121, 122], "proport": 57, "provid": [5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 47, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111, 160], "purpos": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "put": 57, "python": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 162], "pytorch": [45, 87, 156, 160], "pytorch_arg": [120, 121, 122], "qda": 54, "quantiz": 111, "question": 57, "quickli": 160, "quickstart": 160, "r": [54, 55, 56, 57, 137, 138], "rais": [16, 17, 18, 19, 20, 21, 22, 23, 45, 47, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111], "random": 110, "random_st": [50, 51, 55, 57, 110, 111], "randomli": 110, "rank": 54, "rather": 161, "ratio": [54, 56], "rbf": 57, "re": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137, 138, 160], "real": [55, 57], "reason": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "recognit": 51, "recommend": 162, "reconstruct": 47, "record": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "recreat": [16, 17, 18, 19, 20, 21, 22, 23], "reduct": [51, 161], "ref_spectra": [16, 17, 18, 19, 20, 21, 22, 23], "refer": [16, 17, 18, 19, 20, 21, 22, 23, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 110], "reg_covar": 110, "reg_param": 56, "regard": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110], "regex": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "regexp": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137, 138], "regist": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "regress": [55, 57], "regular": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87], "rel": 16, "relat": [54, 56], "relev": [54, 55, 56, 57, 111], "relu": 55, "remain": 85, "remov": [47, 50], "remove_possible_simple_kei": 138, "repositori": 163, "repres": [87, 89, 137, 161], "represent": [3, 5, 7, 9, 13, 37, 50, 51, 54, 55, 56, 57, 110, 111, 112, 137], "represent_binari": 137, "represent_bool": 137, "represent_d": 137, "represent_data": 137, "represent_datetim": 137, "represent_dict": 137, "represent_float": 137, "represent_int": 137, "represent_list": 137, "represent_map": 137, "represent_non": 137, "represent_scalar": 137, "represent_sequ": 137, "represent_set": 137, "represent_str": 137, "represent_undefin": 137, "represent_yaml_object": 137, "request": [54, 55, 56, 57, 111], "requir": [16, 17, 18, 19, 20, 21, 22, 23, 54, 55, 56, 57, 85], "rescal": 57, "residu": 45, "resolv": [137, 138], "resp": 110, "result": [5, 9, 13, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87], "resum": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "retain": [54, 55, 56, 57, 111], "return": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 37, 45, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 124, 130, 156], "revers": 51, "rle": 124, "romero": 20, "root": [45, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137], "round": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "rout": [50, 51, 54, 55, 56, 57, 110, 111, 112], "row": 110, "rtype": 5, "rule": [9, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "run": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87, 162], "runtest": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "safeconstructor": 138, "safedump": 137, "safeload": 138, "saferepresent": 137, "sam": 23, "same": [50, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 130], "sampl": [50, 51, 54, 55, 56, 57, 110, 111, 112], "sample_weight": [54, 55, 56, 57, 111], "save": [16, 17, 18, 19, 20, 21, 22, 23, 87, 130], "save_possible_simple_kei": 138, "save_to_fil": 47, "scalar": 137, "scale": 57, "scan_anchor": 138, "scan_block_scalar": 138, "scan_block_scalar_break": 138, "scan_block_scalar_ignored_lin": 138, "scan_block_scalar_ind": 138, "scan_block_scalar_indent": 138, "scan_direct": 138, "scan_directive_ignored_lin": 138, "scan_directive_nam": 138, "scan_flow_scalar": 138, "scan_flow_scalar_break": 138, "scan_flow_scalar_non_spac": 138, "scan_flow_scalar_spac": 138, "scan_line_break": 138, "scan_plain": 138, "scan_plain_spac": 138, "scan_tag": 138, "scan_tag_directive_handl": 138, "scan_tag_directive_prefix": 138, "scan_tag_directive_valu": 138, "scan_tag_handl": 138, "scan_tag_uri": 138, "scan_to_next_token": 138, "scan_uri_escap": 138, "scan_yaml_directive_numb": 138, "scan_yaml_directive_valu": 138, "scanner": 138, "scipi": 57, "score": [16, 17, 18, 19, 20, 21, 22, 23, 51, 54, 55, 56, 57, 110, 111], "score_sampl": [51, 110], "second": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87], "section": 110, "see": [50, 51, 54, 55, 56, 57, 111], "seed": 112, "seen": [50, 51, 54, 111], "self": [35, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 112], "separ": [54, 57], "seq": [137, 138], "seq1": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "seq2": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "seq_typ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "sequenc": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137], "sequenti": [16, 17, 18, 19, 20, 21, 22, 23, 47], "serial": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 33, 37, 47, 50, 51, 54, 55, 56, 57, 59, 85, 87, 89, 110, 111, 112], "serial_dir": [37, 85, 87, 89, 139], "serializ": [16, 17, 18, 19, 20, 21, 22, 23, 47], "serialize_nod": [137, 139], "set": [45, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 110, 111, 112, 137, 138], "set1": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "set2": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "set_config": [54, 55, 56, 57, 111], "set_fit_request": [57, 111], "set_output": [50, 51, 54, 111], "set_param": [50, 51, 54, 55, 56, 57, 110, 111, 112], "set_partial_fit_request": 55, "set_score_request": [54, 55, 56, 57, 111], "setup": [62, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82], "setupclass": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "shallow": 161, "shamelessli": 124, "shape": [3, 5, 7, 9, 13, 18, 34, 37, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112, 152], "share": 130, "shortdescript": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "should": [16, 17, 18, 19, 20, 21, 22, 23, 47, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 89, 111, 130], "shrink": 57, "shrinkag": 54, "shuffl": [50, 55], "sigma2": 51, "signific": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "silenc": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "similar": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 161], "similarli": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "simpl": [5, 13, 50, 51, 54, 55, 56, 57, 110, 111, 112, 161, 163], "simple_kei": 137, "sinc": [50, 54, 55, 56, 57], "singl": [9, 13, 16, 55, 89, 110], "single_object_per_label": 130, "singular": [16, 17, 18, 19, 20, 21, 22, 23], "size": [18, 47, 138], "skew": 23, "skip": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "skiptest": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "sklearn": [54, 55, 56, 57, 111, 160], "sklearn_arg": [120, 121, 122], "sklearnwrappedsupervis": [54, 55, 56, 57], "sklearnwrappedunsupervis": 111, "slightli": 57, "small": 57, "smaller": 5, "smallest": 85, "so": [50, 51, 54, 55, 56, 57, 110, 111, 112], "solut": 50, "solver": [50, 54, 55], "some": [54, 55, 56, 57, 111], "some_attribut": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "someexcept": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "somewarn": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "sort": 57, "sort_kei": 137, "sourc": [3, 5, 7, 9, 10, 11, 13, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 42, 45, 47, 50, 51, 54, 55, 56, 57, 59, 62, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 85, 87, 89, 110, 111, 112, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 158, 159], "space": [22, 50, 51, 111], "spars": [50, 51, 54, 55, 57, 111], "spatial": [9, 13, 156], "special": 138, "specif": [3, 5, 7, 9, 13, 37, 42, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 160], "specifi": [50, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "spectra": [16, 17, 18, 19, 20, 21, 22, 23], "spectra_to_arrai": [16, 17, 18, 19, 20, 21, 22, 23], "spectral": [16, 20, 23], "spectrum": 18, "split": 137, "stackoverflow": 124, "stage": 45, "stale_possible_simple_kei": 138, "start": [45, 110, 160, 163], "start_mark": 138, "state": 3, "static": [5, 16, 17, 18, 19, 20, 21, 22, 23], "step": 110, "store": [16, 17, 18, 19, 20, 21, 22, 23, 47], "store_covari": [54, 56], "str": [5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 45, 47, 50, 51, 54, 55, 56, 57, 85, 87, 89, 111, 115, 130, 137, 138, 139, 141], "strategi": 9, "stream": [137, 138], "string": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "structur": 47, "style": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137, 138], "sub": [54, 55, 56, 57, 111], "subclass": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "subobject": [50, 51, 54, 55, 56, 57, 110, 111, 112], "subsequ": 55, "subset": [54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "subtest": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "success": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "successfulli": 47, "successor": 47, "suffer": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "superset": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "supervis": 161, "support": [57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "svd": 54, "svd_solver": 51, "symmetri": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "t": [51, 54, 55, 56, 57, 137, 138], "tag": [137, 138], "tag_prefix": 138, "take": [45, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 163], "target": [47, 54, 55, 56, 57], "task": [3, 161], "teardown": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "teardownclass": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "tensor": 89, "test": [20, 45, 54, 55, 56, 57], "test_correct_input_dim": [65, 66, 67, 80, 81, 82], "test_correct_output_dim": [65, 66, 67, 80, 81, 82], "test_dataload": 45, "test_get_shape_without_batch": 62, "test_incorrect_input_dim": [65, 66, 67, 80, 81, 82], "test_initi": [65, 66, 67, 80, 81, 82], "test_passthrough": [65, 66, 67, 80, 81, 82], "testcas": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "testnodeseri": [70, 71, 72, 73, 74, 75, 76, 77, 78], "testpreprocessednod": [66, 67], "testresult": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "testunsupervisednod": [80, 81], "text": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 137], "th": 22, "than": [5, 50, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 110], "the_except": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "the_warn": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "thei": [16, 55, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "themselv": 161, "thi": [5, 7, 9, 13, 16, 18, 23, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 160, 161, 162], "thing": 161, "those": [57, 161], "three": 154, "threshold": [5, 85], "through": [16, 17, 18, 19, 20, 21, 22, 23, 34, 45], "time": [47, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110], "timestamp": [137, 138], "timestamp_regexp": 138, "titl": [158, 159], "todo": 16, "tokenclass": 138, "tol": [50, 51, 54, 55, 56, 57, 110, 111], "torch": [45, 59, 87, 89], "torchvis": 89, "toward": 23, "train": [45, 50, 51, 54, 55, 56, 57, 110, 111, 161], "train_dataload": 45, "transform": [3, 7, 34, 37, 50, 51, 54, 55, 56, 57, 110, 111, 112], "tree": 160, "tri": 160, "trial": 110, "trigger": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "true": [5, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 112, 122, 137, 138, 139], "tt": [137, 138], "tupl": [3, 5, 7, 9, 13, 33, 37, 45, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 115, 125, 137], "tuple1": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "tuple2": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "tutori": 160, "tv_transform": 89, "two": [16, 54, 56, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 154], "type": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 45, 47, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112, 156, 161], "typeerror": 45, "typeobj": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "typic": [18, 111], "u": 138, "u0010ffff": 138, "u2028": [137, 138], "u2029": [137, 138], "ud7ff": 138, "ue000": 138, "unchang": [50, 51, 54, 55, 56, 57, 111], "under": [51, 110], "unequ": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "unexpect": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "unexpected_regex": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "uniform": 160, "uniniti": 45, "union": [45, 59], "uniqu": 55, "unknown": 154, "unless": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "unlik": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "unsupervis": [34, 54, 161], "until": 110, "unused_param": 57, "unwind_ind": 138, "up": [54, 56, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "updat": [50, 51, 54, 55, 56, 57, 110, 111, 112, 138], "update_raw": 138, "upon": 110, "upper_bound": 85, "us": [5, 9, 13, 16, 42, 45, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87, 89, 110, 111, 112, 160, 161, 162], "use_min": 13, "user": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 50, 51, 54, 55, 56, 57, 85, 87, 89, 110, 111, 112, 138], "usual": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "util": [9, 45, 54, 55, 56, 57, 59, 111], "uuid": 47, "v": [137, 138], "v2": 89, "valid": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 37, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 89, 110, 111, 112], "validation_fract": 55, "valu": [9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 50, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 87, 110, 111, 112, 137, 138, 154, 156], "valueerror": [16, 17, 18, 19, 20, 21, 22, 23, 47, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "vari": 18, "varianc": 51, "vector": [18, 22, 50, 54, 55, 56, 57, 111], "verbos": [50, 55, 57, 59, 110, 111, 137, 138], "verbose_interv": 110, "veri": 57, "version": [50, 51, 54, 55, 56, 57, 110, 111, 112, 137], "version_text": 137, "via": 55, "virtual": 162, "w": [50, 54, 55, 56, 57], "wa": [50, 51, 54, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 111], "wai": 16, "want": 54, "wanted_shap": 125, "warm_start": [55, 110], "warn": [50, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "warnclass": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "wavelength": 18, "we": [54, 162], "weight": [17, 54, 55, 56, 57, 111], "weights_init": 110, "well": [50, 51, 54, 55, 56, 57, 89, 110, 111, 112], "wheel": 160, "when": [57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "where": [5, 16, 17, 18, 19, 20, 21, 22, 23, 50, 51, 55, 56, 57, 110, 130], "whether": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "which": [16, 17, 18, 19, 20, 21, 22, 23, 51, 54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 130], "white": 85, "whiten": 51, "whitespac": 137, "whose": [51, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "width": [18, 137], "within": [89, 110], "without": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "word": 51, "work": [50, 51, 54, 55, 56, 57, 110, 111, 112], "working_dir": [16, 17, 18, 19, 20, 21, 22, 23], "would": 51, "wrapper": 42, "write_double_quot": 137, "write_fold": 137, "write_ind": 137, "write_line_break": 137, "write_liter": 137, "write_plain": 137, "write_single_quot": 137, "write_stream_end": 137, "write_stream_start": 137, "write_tag_direct": 137, "write_version_direct": 137, "www": 51, "x": [3, 5, 7, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 37, 45, 47, 50, 51, 54, 55, 56, 57, 59, 85, 87, 89, 110, 111, 112, 138], "x00": [137, 138], "x07": [137, 138], "x08": [137, 138], "x0b": [137, 138], "x0c": [137, 138], "x1b": [137, 138], "x85": [137, 138], "x_new": [51, 54, 111], "x_origin": 51, "xa0": [137, 138], "xt": 50, "y": [32, 45, 47, 50, 51, 54, 55, 56, 57, 59, 87, 110, 111, 112, 137, 138], "y_all": 55, "y_pred": [54, 57], "y_prob": 55, "yaml": [16, 17, 18, 19, 20, 21, 22, 23, 47, 137, 138], "yaml_constructor": 138, "yaml_implicit_resolv": [137, 138], "yaml_multi_constructor": 138, "yaml_multi_represent": 137, "yaml_path_resolv": [137, 138], "yaml_represent": 137, "ye": [137, 138], "year": 138, "yield": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81], "you": [54, 55, 56, 57, 62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 110, 111, 160], "your": 160, "zero": [62, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 130], "zip": 47, "\u03c0": 23, "\ud800\udc00": 138}, "titles": ["cuvis_ai", "cuvis_ai.deciders", "cuvis_ai.deciders.base_decider", "cuvis_ai.deciders.base_decider.BaseDecider", "cuvis_ai.deciders.binary_decider", "cuvis_ai.deciders.binary_decider.BinaryDecider", "cuvis_ai.deciders.cascaded_decider", "cuvis_ai.deciders.cascaded_decider.Cascaded", "cuvis_ai.deciders.combining_decider", "cuvis_ai.deciders.combining_decider.CombiningDecider", "cuvis_ai.deciders.combining_decider.all_agree", "cuvis_ai.deciders.combining_decider.at_least_n_agree", "cuvis_ai.deciders.multiclass_decider", "cuvis_ai.deciders.multiclass_decider.MultiClassDecider", "cuvis_ai.distance", "cuvis_ai.distance.distance", "cuvis_ai.distance.distance.AbstractDistance", "cuvis_ai.distance.distance.Canberra", "cuvis_ai.distance.distance.ECS", "cuvis_ai.distance.distance.Euclidean", "cuvis_ai.distance.distance.GFC", "cuvis_ai.distance.distance.Manhattan", "cuvis_ai.distance.distance.Minkowski", "cuvis_ai.distance.distance.SpectralAngle", "cuvis_ai.node", "cuvis_ai.node.Consumers", "cuvis_ai.node.Consumers.CubeConsumer", "cuvis_ai.node.Consumers.LabelConsumer", "cuvis_ai.node.Consumers.LabelConsumerInference", "cuvis_ai.node.Consumers.MetadataConsumer", "cuvis_ai.node.Consumers.MetadataConsumerInference", "cuvis_ai.node.base", "cuvis_ai.node.base.BaseSupervised", "cuvis_ai.node.base.BaseTransformation", "cuvis_ai.node.base.BaseUnsupervised", "cuvis_ai.node.base.Preprocessor", "cuvis_ai.node.node", "cuvis_ai.node.node.Node", "cuvis_ai.node.sklearn", "cuvis_ai.node.skorch", "cuvis_ai.node.torch", "cuvis_ai.node.wrap", "cuvis_ai.node.wrap.make_node", "cuvis_ai.pipeline", "cuvis_ai.pipeline.executor", "cuvis_ai.pipeline.executor.MemoryExecutor", "cuvis_ai.pipeline.graph", "cuvis_ai.pipeline.graph.Graph", "cuvis_ai.preprocessor", "cuvis_ai.preprocessor.sklearn_wrapped", "cuvis_ai.preprocessor.sklearn_wrapped.NMF", "cuvis_ai.preprocessor.sklearn_wrapped.PCA", "cuvis_ai.supervised", "cuvis_ai.supervised.sklearn_wrapped", "cuvis_ai.supervised.sklearn_wrapped.LDA", "cuvis_ai.supervised.sklearn_wrapped.MLP", "cuvis_ai.supervised.sklearn_wrapped.QDA", "cuvis_ai.supervised.sklearn_wrapped.SVM", "cuvis_ai.supervised.skorch_supervised", "cuvis_ai.supervised.skorch_supervised.SkorchSupervised", "cuvis_ai.test", "cuvis_ai.test.test_numpy_utils", "cuvis_ai.test.test_numpy_utils.TestNumpyUtils", "cuvis_ai.test.test_pipeline_graph", "cuvis_ai.test.test_preprocessor_structural", "cuvis_ai.test.test_preprocessor_structural.TestPreprocessedNode", "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedNMF", "cuvis_ai.test.test_preprocessor_structural.TestUnsupervisedPCA", "cuvis_ai.test.test_serialization", "cuvis_ai.test.test_serialization.TestNodeSerialization", "cuvis_ai.test.test_serialization.TestPreprocessorNMF", "cuvis_ai.test.test_serialization.TestPreprocessorPCA", "cuvis_ai.test.test_serialization.TestSupervisedLDA", "cuvis_ai.test.test_serialization.TestTransformationReflectance", "cuvis_ai.test.test_serialization.TestTransformationTorch", "cuvis_ai.test.test_serialization.TestTransformationTorchVision", "cuvis_ai.test.test_serialization.TestUnsupervisedGMM", "cuvis_ai.test.test_serialization.TestUnsupervisedKMeans", "cuvis_ai.test.test_serialization.TestUnsupervisedMeanShift", "cuvis_ai.test.test_unsupervised_structural", "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedGMM", "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedKMeans", "cuvis_ai.test.test_unsupervised_structural.TestUnsupervisedNode", "cuvis_ai.transformation", "cuvis_ai.transformation.reflectance", "cuvis_ai.transformation.reflectance.Reflectance", "cuvis_ai.transformation.torch_transformation", "cuvis_ai.transformation.torch_transformation.TorchTransformation", "cuvis_ai.transformation.torchvision_transformation", "cuvis_ai.transformation.torchvision_transformation.TorchVisionTransformation", "cuvis_ai.tv_transforms", "cuvis_ai.tv_transforms.Bandpass", "cuvis_ai.tv_transforms.Bandpass.call_super_init", "cuvis_ai.tv_transforms.Bandpass.dump_patches", "cuvis_ai.tv_transforms.Bandpass.training", "cuvis_ai.tv_transforms.MultiBandpass", "cuvis_ai.tv_transforms.MultiBandpass.call_super_init", "cuvis_ai.tv_transforms.MultiBandpass.dump_patches", "cuvis_ai.tv_transforms.MultiBandpass.training", "cuvis_ai.tv_transforms.NormalizeStdDev", "cuvis_ai.tv_transforms.NormalizeStdDev.call_super_init", "cuvis_ai.tv_transforms.NormalizeStdDev.dump_patches", "cuvis_ai.tv_transforms.NormalizeStdDev.training", "cuvis_ai.tv_transforms.NormalizeToFloat", "cuvis_ai.tv_transforms.NormalizeToFloat.call_super_init", "cuvis_ai.tv_transforms.NormalizeToFloat.dump_patches", "cuvis_ai.tv_transforms.NormalizeToFloat.training", "cuvis_ai.tv_transforms.WavelengthList", "cuvis_ai.unsupervised", "cuvis_ai.unsupervised.sklearn_wrapped", "cuvis_ai.unsupervised.sklearn_wrapped.GMM", "cuvis_ai.unsupervised.sklearn_wrapped.KMeans", "cuvis_ai.unsupervised.sklearn_wrapped.MeanShift", "cuvis_ai.utils", "cuvis_ai.utils.dependencies", "cuvis_ai.utils.dependencies.get_installed_packages", "cuvis_ai.utils.dependencies.get_installed_packages_str", "cuvis_ai.utils.filesystem", "cuvis_ai.utils.filesystem.change_working_dir", "cuvis_ai.utils.nn_config", "cuvis_ai.utils.nn_config.Adam", "cuvis_ai.utils.nn_config.Optimizer", "cuvis_ai.utils.nn_config.SGD", "cuvis_ai.utils.numpy", "cuvis_ai.utils.numpy.binary_mask_to_rle", "cuvis_ai.utils.numpy.check_array_shape", "cuvis_ai.utils.numpy.flatten_batch_and_labels", "cuvis_ai.utils.numpy.flatten_batch_and_spatial", "cuvis_ai.utils.numpy.flatten_labels", "cuvis_ai.utils.numpy.flatten_spatial", "cuvis_ai.utils.numpy.gen_coco_labels", "cuvis_ai.utils.numpy.get_shape_without_batch", "cuvis_ai.utils.numpy.unflatten_batch_and_labels", "cuvis_ai.utils.numpy.unflatten_batch_and_spatial", "cuvis_ai.utils.numpy.unflatten_labels", "cuvis_ai.utils.numpy.unflatten_spatial", "cuvis_ai.utils.serializer", "cuvis_ai.utils.serializer.CuvisYamlDumper", "cuvis_ai.utils.serializer.CuvisYamlLoader", "cuvis_ai.utils.serializer.OldSerializer", "cuvis_ai.utils.serializer.Serializer", "cuvis_ai.utils.serializer.YamlSerializer", "cuvis_ai.utils.serializer.numpy_array_binary_representer", "cuvis_ai.utils.serializer.numpy_array_file_representer", "cuvis_ai.utils.serializer.numpy_array_string_representer", "cuvis_ai.utils.serializer.numpy_arrray_file_constructor", "cuvis_ai.utils.serializer.numpy_arrray_string_constructor", "cuvis_ai.utils.serializer.numpy_float32_constructor", "cuvis_ai.utils.serializer.numpy_float32_representer", "cuvis_ai.utils.serializer.numpy_float64_constructor", "cuvis_ai.utils.serializer.numpy_float64_representer", "cuvis_ai.utils.test", "cuvis_ai.utils.test.get_np_dummy_data", "cuvis_ai.utils.torch", "cuvis_ai.utils.torch.InputDimension", "cuvis_ai.utils.torch.get_output_shape", "cuvis_ai.utils.torch.guess_input_dimensionalty", "cuvis_ai.utils.visualize", "cuvis_ai.utils.visualize.visualize_features", "cuvis_ai.utils.visualize.visualize_image", "Welcome to Cuvis AI\u2019s documentation!", "Concepts", "Installation", "Quickstart", "Tutorials"], "titleterms": {"": 160, "The": 161, "abstractdist": 16, "adam": 120, "ai": 160, "algorithm": 161, "all_agre": 10, "api": 160, "at_least_n_agre": 11, "bandpass": [91, 92, 93, 94], "base": [31, 32, 33, 34, 35], "base_decid": [2, 3], "basedecid": 3, "basesupervis": 32, "basetransform": 33, "baseunsupervis": 34, "binary_decid": [4, 5], "binary_mask_to_rl": 124, "binarydecid": 5, "call_super_init": [92, 96, 100, 104], "canberra": 17, "cascad": 7, "cascaded_decid": [6, 7], "change_working_dir": 118, "check_array_shap": 125, "combining_decid": [8, 9, 10, 11], "combiningdecid": 9, "concept": 161, "consum": [25, 26, 27, 28, 29, 30], "cubeconsum": 26, "cuvi": 160, "cuvis_ai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], "cuvisyamldump": 137, "cuvisyamlload": 138, "decid": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "depend": [114, 115, 116], "distanc": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "document": 160, "dump_patch": [93, 97, 101, 105], "ec": 18, "euclidean": 19, "executor": [44, 45], "filesystem": [117, 118], "flatten_batch_and_label": 126, "flatten_batch_and_spati": 127, "flatten_label": 128, "flatten_spati": 129, "gen_coco_label": 130, "get_installed_packag": 115, "get_installed_packages_str": 116, "get_np_dummy_data": 152, "get_output_shap": 155, "get_shape_without_batch": 131, "gfc": 20, "gmm": 110, "graph": [46, 47], "guess_input_dimensionalti": 156, "guid": 160, "inputdimens": 154, "instal": 162, "introduct": 160, "kmean": 111, "labelconsum": 27, "labelconsumerinfer": 28, "lda": 54, "make_nod": 42, "manhattan": 21, "meanshift": 112, "memoryexecutor": 45, "metadataconsum": 29, "metadataconsumerinfer": 30, "minkowski": 22, "mlp": 55, "multibandpass": [95, 96, 97, 98], "multiclass_decid": [12, 13], "multiclassdecid": 13, "nmf": 50, "nn_config": [119, 120, 121, 122], "node": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 161], "normalizestddev": [99, 100, 101, 102], "normalizetofloat": [103, 104, 105, 106], "numpi": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "numpy_array_binary_represent": 142, "numpy_array_file_represent": 143, "numpy_array_string_represent": 144, "numpy_arrray_file_constructor": 145, "numpy_arrray_string_constructor": 146, "numpy_float32_constructor": 147, "numpy_float32_represent": 148, "numpy_float64_constructor": 149, "numpy_float64_represent": 150, "oldseri": 139, "optim": 121, "paramat": 5, "pca": 51, "pip": 162, "pipelin": [43, 44, 45, 46, 47, 161], "preprocessor": [35, 48, 49, 50, 51, 161], "qda": 56, "quickstart": 163, "refer": 160, "reflect": [84, 85], "serial": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "sgd": 122, "sklearn": 38, "sklearn_wrap": [49, 50, 51, 53, 54, 55, 56, 57, 109, 110, 111, 112], "skorch": 39, "skorch_supervis": [58, 59], "skorchsupervis": 59, "spectralangl": 23, "supervis": [52, 53, 54, 55, 56, 57, 58, 59], "svm": 57, "test": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 151, 152], "test_numpy_util": [61, 62], "test_pipeline_graph": 63, "test_preprocessor_structur": [64, 65, 66, 67], "test_seri": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "test_unsupervised_structur": [79, 80, 81, 82], "testnodeseri": 69, "testnumpyutil": 62, "testpreprocessednod": 65, "testpreprocessornmf": 70, "testpreprocessorpca": 71, "testsupervisedlda": 72, "testtransformationreflect": 73, "testtransformationtorch": 74, "testtransformationtorchvis": 75, "testunsupervisedgmm": [76, 80], "testunsupervisedkmean": [77, 81], "testunsupervisedmeanshift": 78, "testunsupervisednmf": 66, "testunsupervisednod": 82, "testunsupervisedpca": 67, "torch": [40, 153, 154, 155, 156], "torch_transform": [86, 87], "torchtransform": 87, "torchvision_transform": [88, 89], "torchvisiontransform": 89, "train": [94, 98, 102, 106], "transform": [83, 84, 85, 86, 87, 88, 89], "tree": 161, "tutori": 164, "tv_transform": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "unflatten_batch_and_label": 132, "unflatten_batch_and_spati": 133, "unflatten_label": 134, "unflatten_spati": 135, "unsupervis": [108, 109, 110, 111, 112], "user": 160, "util": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], "visual": [157, 158, 159], "visualize_featur": 158, "visualize_imag": 159, "wavelengthlist": 107, "welcom": 160, "wrap": [41, 42], "yamlseri": 141}})